# ./musicxml.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:e92452c8d3e28a9e27abfc9994d2007779e7f4c9
# Generated 2014-05-10 21:39:11.057495 by PyXB version 1.2.3
# Namespace AbsentNamespace0

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:c0742661-d87a-11e3-a304-d49a200dedda')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.3'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import _xlink as _ImportedBinding__xlink
import pyxb.binding.xml_

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.CreateAbsentNamespace()
Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_xlink = _ImportedBinding__xlink.Namespace
_Namespace_xlink.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, unicode):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: above-below
class above_below (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The above-below type is used to indicate whether one element appears above or below another element."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'above-below')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 28, 1)
    _Documentation = u'The above-below type is used to indicate whether one element appears above or below another element.'
above_below._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=above_below, enum_prefix=None)
above_below.above = above_below._CF_enumeration.addEnumeration(unicode_value=u'above', tag=u'above')
above_below.below = above_below._CF_enumeration.addEnumeration(unicode_value=u'below', tag=u'below')
above_below._InitializeFacetMap(above_below._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'above-below', above_below)

# Atomic simple type: beam-level
class beam_level (pyxb.binding.datatypes.positiveInteger):

    """The MusicXML format supports six levels of beaming, up to 1024th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'beam-level')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 38, 1)
    _Documentation = u'The MusicXML format supports six levels of beaming, up to 1024th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices.'
beam_level._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=beam_level, value=pyxb.binding.datatypes.positiveInteger(8L))
beam_level._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=beam_level, value=pyxb.binding.datatypes.positiveInteger(1L))
beam_level._InitializeFacetMap(beam_level._CF_maxInclusive,
   beam_level._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'beam-level', beam_level)

# Atomic simple type: color
class color (pyxb.binding.datatypes.token):

    """The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 

For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.

As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'color')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 48, 1)
    _Documentation = u'The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. \n\nFor instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.\n\nAs in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).'
color._CF_pattern = pyxb.binding.facets.CF_pattern()
color._CF_pattern.addPattern(pattern=u'#[\\dA-F]{6}([\\dA-F][\\dA-F])?')
color._InitializeFacetMap(color._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'color', color)

# Atomic simple type: comma-separated-text
class comma_separated_text (pyxb.binding.datatypes.token):

    """The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'comma-separated-text')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 61, 1)
    _Documentation = u'The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.'
comma_separated_text._CF_pattern = pyxb.binding.facets.CF_pattern()
comma_separated_text._CF_pattern.addPattern(pattern=u'[^,]+(, ?[^,]+)*')
comma_separated_text._InitializeFacetMap(comma_separated_text._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'comma-separated-text', comma_separated_text)

# Atomic simple type: css-font-size
class css_font_size (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The css-font-size type includes the CSS font sizes used as an alternative to a numeric point size."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'css-font-size')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 70, 1)
    _Documentation = u'The css-font-size type includes the CSS font sizes used as an alternative to a numeric point size.'
css_font_size._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=css_font_size, enum_prefix=None)
css_font_size.xx_small = css_font_size._CF_enumeration.addEnumeration(unicode_value=u'xx-small', tag=u'xx_small')
css_font_size.x_small = css_font_size._CF_enumeration.addEnumeration(unicode_value=u'x-small', tag=u'x_small')
css_font_size.small = css_font_size._CF_enumeration.addEnumeration(unicode_value=u'small', tag=u'small')
css_font_size.medium = css_font_size._CF_enumeration.addEnumeration(unicode_value=u'medium', tag=u'medium')
css_font_size.large = css_font_size._CF_enumeration.addEnumeration(unicode_value=u'large', tag=u'large')
css_font_size.x_large = css_font_size._CF_enumeration.addEnumeration(unicode_value=u'x-large', tag=u'x_large')
css_font_size.xx_large = css_font_size._CF_enumeration.addEnumeration(unicode_value=u'xx-large', tag=u'xx_large')
css_font_size._InitializeFacetMap(css_font_size._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'css-font-size', css_font_size)

# Atomic simple type: divisions
class divisions (pyxb.binding.datatypes.decimal):

    """The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'divisions')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 85, 1)
    _Documentation = u'The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.'
divisions._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'divisions', divisions)

# Atomic simple type: enclosure-shape
class enclosure_shape (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The enclosure-shape type describes the shape and presence / absence of an enclosure around text or symbols. A bracket enclosure is similar to a rectangle with the bottom line missing, as is common in jazz notation."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'enclosure-shape')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 92, 1)
    _Documentation = u'The enclosure-shape type describes the shape and presence / absence of an enclosure around text or symbols. A bracket enclosure is similar to a rectangle with the bottom line missing, as is common in jazz notation.'
enclosure_shape._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=enclosure_shape, enum_prefix=None)
enclosure_shape.rectangle = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'rectangle', tag=u'rectangle')
enclosure_shape.square = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'square', tag=u'square')
enclosure_shape.oval = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'oval', tag=u'oval')
enclosure_shape.circle = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'circle', tag=u'circle')
enclosure_shape.bracket = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'bracket', tag=u'bracket')
enclosure_shape.triangle = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'triangle', tag=u'triangle')
enclosure_shape.diamond = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'diamond', tag=u'diamond')
enclosure_shape.none = enclosure_shape._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
enclosure_shape._InitializeFacetMap(enclosure_shape._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'enclosure-shape', enclosure_shape)

# Atomic simple type: fermata-shape
class fermata_shape (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The fermata-shape type represents the shape of the fermata sign. The empty value is equivalent to the normal value."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fermata-shape')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 108, 1)
    _Documentation = u'The fermata-shape type represents the shape of the fermata sign. The empty value is equivalent to the normal value.'
fermata_shape._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=fermata_shape, enum_prefix=None)
fermata_shape.normal = fermata_shape._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
fermata_shape.angled = fermata_shape._CF_enumeration.addEnumeration(unicode_value=u'angled', tag=u'angled')
fermata_shape.square = fermata_shape._CF_enumeration.addEnumeration(unicode_value=u'square', tag=u'square')
fermata_shape.emptyString = fermata_shape._CF_enumeration.addEnumeration(unicode_value=u'', tag='emptyString')
fermata_shape._InitializeFacetMap(fermata_shape._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'fermata-shape', fermata_shape)

# Atomic simple type: font-style
class font_style (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The font-style type represents a simplified version of the CSS font-style property."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'font-style')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 127, 1)
    _Documentation = u'The font-style type represents a simplified version of the CSS font-style property.'
font_style._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=font_style, enum_prefix=None)
font_style.normal = font_style._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
font_style.italic = font_style._CF_enumeration.addEnumeration(unicode_value=u'italic', tag=u'italic')
font_style._InitializeFacetMap(font_style._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'font-style', font_style)

# Atomic simple type: font-weight
class font_weight (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The font-weight type represents a simplified version of the CSS font-weight property."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'font-weight')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 137, 1)
    _Documentation = u'The font-weight type represents a simplified version of the CSS font-weight property.'
font_weight._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=font_weight, enum_prefix=None)
font_weight.normal = font_weight._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
font_weight.bold = font_weight._CF_enumeration.addEnumeration(unicode_value=u'bold', tag=u'bold')
font_weight._InitializeFacetMap(font_weight._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'font-weight', font_weight)

# Atomic simple type: left-center-right
class left_center_right (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The left-center-right type is used to define horizontal alignment and text justification."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'left-center-right')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 147, 1)
    _Documentation = u'The left-center-right type is used to define horizontal alignment and text justification.'
left_center_right._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=left_center_right, enum_prefix=None)
left_center_right.left = left_center_right._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
left_center_right.center = left_center_right._CF_enumeration.addEnumeration(unicode_value=u'center', tag=u'center')
left_center_right.right = left_center_right._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
left_center_right._InitializeFacetMap(left_center_right._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'left-center-right', left_center_right)

# Atomic simple type: left-right
class left_right (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The left-right type is used to indicate whether one element appears to the left or the right of another element."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'left-right')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 158, 1)
    _Documentation = u'The left-right type is used to indicate whether one element appears to the left or the right of another element.'
left_right._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=left_right, enum_prefix=None)
left_right.left = left_right._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
left_right.right = left_right._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
left_right._InitializeFacetMap(left_right._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'left-right', left_right)

# Atomic simple type: line-shape
class line_shape (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The line-shape type distinguishes between straight and curved lines."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'line-shape')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 168, 1)
    _Documentation = u'The line-shape type distinguishes between straight and curved lines.'
line_shape._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=line_shape, enum_prefix=None)
line_shape.straight = line_shape._CF_enumeration.addEnumeration(unicode_value=u'straight', tag=u'straight')
line_shape.curved = line_shape._CF_enumeration.addEnumeration(unicode_value=u'curved', tag=u'curved')
line_shape._InitializeFacetMap(line_shape._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'line-shape', line_shape)

# Atomic simple type: line-type
class line_type (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The line-type type distinguishes between solid, dashed, dotted, and wavy lines."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'line-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 178, 1)
    _Documentation = u'The line-type type distinguishes between solid, dashed, dotted, and wavy lines.'
line_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=line_type, enum_prefix=None)
line_type.solid = line_type._CF_enumeration.addEnumeration(unicode_value=u'solid', tag=u'solid')
line_type.dashed = line_type._CF_enumeration.addEnumeration(unicode_value=u'dashed', tag=u'dashed')
line_type.dotted = line_type._CF_enumeration.addEnumeration(unicode_value=u'dotted', tag=u'dotted')
line_type.wavy = line_type._CF_enumeration.addEnumeration(unicode_value=u'wavy', tag=u'wavy')
line_type._InitializeFacetMap(line_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'line-type', line_type)

# Atomic simple type: midi-16
class midi_16 (pyxb.binding.datatypes.positiveInteger):

    """The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'midi-16')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 190, 1)
    _Documentation = u'The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16.'
midi_16._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=midi_16, value=pyxb.binding.datatypes.positiveInteger(16L))
midi_16._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=midi_16, value=pyxb.binding.datatypes.positiveInteger(1L))
midi_16._InitializeFacetMap(midi_16._CF_maxInclusive,
   midi_16._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'midi-16', midi_16)

# Atomic simple type: midi-128
class midi_128 (pyxb.binding.datatypes.positiveInteger):

    """The midi-16 type is used to express MIDI 1.0 values that range from 1 to 128."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'midi-128')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 200, 1)
    _Documentation = u'The midi-16 type is used to express MIDI 1.0 values that range from 1 to 128.'
midi_128._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=midi_128, value=pyxb.binding.datatypes.positiveInteger(128L))
midi_128._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=midi_128, value=pyxb.binding.datatypes.positiveInteger(1L))
midi_128._InitializeFacetMap(midi_128._CF_maxInclusive,
   midi_128._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'midi-128', midi_128)

# Atomic simple type: midi-16384
class midi_16384 (pyxb.binding.datatypes.positiveInteger):

    """The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16,384."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'midi-16384')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 210, 1)
    _Documentation = u'The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16,384.'
midi_16384._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=midi_16384, value=pyxb.binding.datatypes.positiveInteger(16384L))
midi_16384._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=midi_16384, value=pyxb.binding.datatypes.positiveInteger(1L))
midi_16384._InitializeFacetMap(midi_16384._CF_maxInclusive,
   midi_16384._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'midi-16384', midi_16384)

# Atomic simple type: mute
class mute (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The mute type represents muting for different instruments, including brass, winds, and strings. The on and off values are used for undifferentiated mutes. The remaining values represent specific mutes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'mute')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 220, 1)
    _Documentation = u'The mute type represents muting for different instruments, including brass, winds, and strings. The on and off values are used for undifferentiated mutes. The remaining values represent specific mutes.'
mute._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=mute, enum_prefix=None)
mute.on = mute._CF_enumeration.addEnumeration(unicode_value=u'on', tag=u'on')
mute.off = mute._CF_enumeration.addEnumeration(unicode_value=u'off', tag=u'off')
mute.straight = mute._CF_enumeration.addEnumeration(unicode_value=u'straight', tag=u'straight')
mute.cup = mute._CF_enumeration.addEnumeration(unicode_value=u'cup', tag=u'cup')
mute.harmon_no_stem = mute._CF_enumeration.addEnumeration(unicode_value=u'harmon-no-stem', tag=u'harmon_no_stem')
mute.harmon_stem = mute._CF_enumeration.addEnumeration(unicode_value=u'harmon-stem', tag=u'harmon_stem')
mute.bucket = mute._CF_enumeration.addEnumeration(unicode_value=u'bucket', tag=u'bucket')
mute.plunger = mute._CF_enumeration.addEnumeration(unicode_value=u'plunger', tag=u'plunger')
mute.hat = mute._CF_enumeration.addEnumeration(unicode_value=u'hat', tag=u'hat')
mute.solotone = mute._CF_enumeration.addEnumeration(unicode_value=u'solotone', tag=u'solotone')
mute.practice = mute._CF_enumeration.addEnumeration(unicode_value=u'practice', tag=u'practice')
mute.stop_mute = mute._CF_enumeration.addEnumeration(unicode_value=u'stop-mute', tag=u'stop_mute')
mute.stop_hand = mute._CF_enumeration.addEnumeration(unicode_value=u'stop-hand', tag=u'stop_hand')
mute.echo = mute._CF_enumeration.addEnumeration(unicode_value=u'echo', tag=u'echo')
mute.palm = mute._CF_enumeration.addEnumeration(unicode_value=u'palm', tag=u'palm')
mute._InitializeFacetMap(mute._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'mute', mute)

# Atomic simple type: non-negative-decimal
class non_negative_decimal (pyxb.binding.datatypes.decimal):

    """The non-negative-decimal type specifies a non-negative decimal value."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'non-negative-decimal')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 243, 1)
    _Documentation = u'The non-negative-decimal type specifies a non-negative decimal value.'
non_negative_decimal._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=non_negative_decimal, value=pyxb.binding.datatypes.decimal(0.0))
non_negative_decimal._InitializeFacetMap(non_negative_decimal._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'non-negative-decimal', non_negative_decimal)

# Atomic simple type: number-level
class number_level (pyxb.binding.datatypes.positiveInteger):

    """Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML document order. When a number-level value is implied, the value is 1 by default."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'number-level')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 252, 1)
    _Documentation = u'Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML document order. When a number-level value is implied, the value is 1 by default.'
number_level._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=number_level, value=pyxb.binding.datatypes.positiveInteger(6L))
number_level._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=number_level, value=pyxb.binding.datatypes.positiveInteger(1L))
number_level._InitializeFacetMap(number_level._CF_maxInclusive,
   number_level._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'number-level', number_level)

# Atomic simple type: number-of-lines
class number_of_lines (pyxb.binding.datatypes.nonNegativeInteger):

    """The number-of-lines type is used to specify the number of lines in text decoration attributes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'number-of-lines')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 262, 1)
    _Documentation = u'The number-of-lines type is used to specify the number of lines in text decoration attributes.'
number_of_lines._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=number_of_lines, value=pyxb.binding.datatypes.nonNegativeInteger(3L))
number_of_lines._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=number_of_lines, value=pyxb.binding.datatypes.nonNegativeInteger(0L))
number_of_lines._InitializeFacetMap(number_of_lines._CF_maxInclusive,
   number_of_lines._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'number-of-lines', number_of_lines)

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 277, 3)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.normal = STD_ANON._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

# Atomic simple type: over-under
class over_under (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The over-under type is used to indicate whether the tips of curved lines such as slurs and ties are overhand (tips down) or underhand (tips up)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'over-under')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 285, 1)
    _Documentation = u'The over-under type is used to indicate whether the tips of curved lines such as slurs and ties are overhand (tips down) or underhand (tips up).'
over_under._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=over_under, enum_prefix=None)
over_under.over = over_under._CF_enumeration.addEnumeration(unicode_value=u'over', tag=u'over')
over_under.under = over_under._CF_enumeration.addEnumeration(unicode_value=u'under', tag=u'under')
over_under._InitializeFacetMap(over_under._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'over-under', over_under)

# Atomic simple type: percent
class percent (pyxb.binding.datatypes.decimal):

    """The percent type specifies a percentage from 0 to 100."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'percent')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 295, 1)
    _Documentation = u'The percent type specifies a percentage from 0 to 100.'
percent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=percent, value=pyxb.binding.datatypes.decimal(100.0))
percent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=percent, value=pyxb.binding.datatypes.decimal(0.0))
percent._InitializeFacetMap(percent._CF_maxInclusive,
   percent._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'percent', percent)

# Atomic simple type: positive-decimal
class positive_decimal (pyxb.binding.datatypes.decimal):

    """The positive-decimal type specifies a positive decimal value."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'positive-decimal')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 305, 1)
    _Documentation = u'The positive-decimal type specifies a positive decimal value.'
positive_decimal._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=pyxb.binding.datatypes.decimal, value=pyxb.binding.datatypes.anySimpleType(u'0'))
positive_decimal._InitializeFacetMap(positive_decimal._CF_minExclusive)
Namespace.addCategoryObject('typeBinding', u'positive-decimal', positive_decimal)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 328, 3)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.emptyString = STD_ANON_._CF_enumeration.addEnumeration(unicode_value=u'', tag='emptyString')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)

# Atomic simple type: rotation-degrees
class rotation_degrees (pyxb.binding.datatypes.decimal):

    """The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'rotation-degrees')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 336, 1)
    _Documentation = u'The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.'
rotation_degrees._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=rotation_degrees, value=pyxb.binding.datatypes.decimal(180.0))
rotation_degrees._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=rotation_degrees, value=pyxb.binding.datatypes.decimal(-180.0))
rotation_degrees._InitializeFacetMap(rotation_degrees._CF_maxInclusive,
   rotation_degrees._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'rotation-degrees', rotation_degrees)

# Atomic simple type: semi-pitched
class semi_pitched (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The semi-pitched type represents categories of indefinite pitch for percussion instruments."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'semi-pitched')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 346, 1)
    _Documentation = u'The semi-pitched type represents categories of indefinite pitch for percussion instruments.'
semi_pitched._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=semi_pitched, enum_prefix=None)
semi_pitched.high = semi_pitched._CF_enumeration.addEnumeration(unicode_value=u'high', tag=u'high')
semi_pitched.medium_high = semi_pitched._CF_enumeration.addEnumeration(unicode_value=u'medium-high', tag=u'medium_high')
semi_pitched.medium = semi_pitched._CF_enumeration.addEnumeration(unicode_value=u'medium', tag=u'medium')
semi_pitched.medium_low = semi_pitched._CF_enumeration.addEnumeration(unicode_value=u'medium-low', tag=u'medium_low')
semi_pitched.low = semi_pitched._CF_enumeration.addEnumeration(unicode_value=u'low', tag=u'low')
semi_pitched.very_low = semi_pitched._CF_enumeration.addEnumeration(unicode_value=u'very-low', tag=u'very_low')
semi_pitched._InitializeFacetMap(semi_pitched._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'semi-pitched', semi_pitched)

# Atomic simple type: start-note
class start_note (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The start-note type describes the starting note of trills and mordents for playback, relative to the current note."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'start-note')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 360, 1)
    _Documentation = u'The start-note type describes the starting note of trills and mordents for playback, relative to the current note.'
start_note._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=start_note, enum_prefix=None)
start_note.upper = start_note._CF_enumeration.addEnumeration(unicode_value=u'upper', tag=u'upper')
start_note.main = start_note._CF_enumeration.addEnumeration(unicode_value=u'main', tag=u'main')
start_note.below = start_note._CF_enumeration.addEnumeration(unicode_value=u'below', tag=u'below')
start_note._InitializeFacetMap(start_note._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'start-note', start_note)

# Atomic simple type: start-stop
class start_stop (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The start-stop type is used for an attribute of musical elements that can either start or stop, such as tuplets.
									
The values of start and stop refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a tuplet may appear in staff 1 before the starting point for the tuplet appears in staff 2 later in the document."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'start-stop')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 371, 1)
    _Documentation = u'The start-stop type is used for an attribute of musical elements that can either start or stop, such as tuplets.\n\t\t\t\t\t\t\t\t\t\nThe values of start and stop refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a tuplet may appear in staff 1 before the starting point for the tuplet appears in staff 2 later in the document.'
start_stop._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=start_stop, enum_prefix=None)
start_stop.start = start_stop._CF_enumeration.addEnumeration(unicode_value=u'start', tag=u'start')
start_stop.stop = start_stop._CF_enumeration.addEnumeration(unicode_value=u'stop', tag=u'stop')
start_stop._InitializeFacetMap(start_stop._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'start-stop', start_stop)

# Atomic simple type: start-stop-continue
class start_stop_continue (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The start-stop-continue type is used for an attribute of musical elements that can either start or stop, but also need to refer to an intermediate point in the symbol, as for complex slurs or for formatting of symbols across system breaks.
						
The values of start, stop, and continue refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a slur may appear in staff 1 before the starting point for the slur appears in staff 2 later in the document."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'start-stop-continue')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 383, 1)
    _Documentation = u'The start-stop-continue type is used for an attribute of musical elements that can either start or stop, but also need to refer to an intermediate point in the symbol, as for complex slurs or for formatting of symbols across system breaks.\n\t\t\t\t\t\t\nThe values of start, stop, and continue refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a slur may appear in staff 1 before the starting point for the slur appears in staff 2 later in the document.'
start_stop_continue._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=start_stop_continue, enum_prefix=None)
start_stop_continue.start = start_stop_continue._CF_enumeration.addEnumeration(unicode_value=u'start', tag=u'start')
start_stop_continue.stop = start_stop_continue._CF_enumeration.addEnumeration(unicode_value=u'stop', tag=u'stop')
start_stop_continue.continue_ = start_stop_continue._CF_enumeration.addEnumeration(unicode_value=u'continue', tag=u'continue_')
start_stop_continue._InitializeFacetMap(start_stop_continue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'start-stop-continue', start_stop_continue)

# Atomic simple type: start-stop-single
class start_stop_single (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The start-stop-single type is used for an attribute of musical elements that can be used for either multi-note or single-note musical elements, as for tremolos."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'start-stop-single')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 396, 1)
    _Documentation = u'The start-stop-single type is used for an attribute of musical elements that can be used for either multi-note or single-note musical elements, as for tremolos.'
start_stop_single._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=start_stop_single, enum_prefix=None)
start_stop_single.start = start_stop_single._CF_enumeration.addEnumeration(unicode_value=u'start', tag=u'start')
start_stop_single.stop = start_stop_single._CF_enumeration.addEnumeration(unicode_value=u'stop', tag=u'stop')
start_stop_single.single = start_stop_single._CF_enumeration.addEnumeration(unicode_value=u'single', tag=u'single')
start_stop_single._InitializeFacetMap(start_stop_single._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'start-stop-single', start_stop_single)

# Atomic simple type: string-number
class string_number (pyxb.binding.datatypes.positiveInteger):

    """The string-number type indicates a string number. Strings are numbered from high to low, with 1 being the highest pitched string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string-number')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 407, 1)
    _Documentation = u'The string-number type indicates a string number. Strings are numbered from high to low, with 1 being the highest pitched string.'
string_number._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'string-number', string_number)

# Atomic simple type: symbol-size
class symbol_size (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The symbol-size type is used to indicate full vs. cue-sized vs. oversized symbols. The large value for oversized symbols was added in version 1.1."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'symbol-size')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 414, 1)
    _Documentation = u'The symbol-size type is used to indicate full vs. cue-sized vs. oversized symbols. The large value for oversized symbols was added in version 1.1.'
symbol_size._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=symbol_size, enum_prefix=None)
symbol_size.full = symbol_size._CF_enumeration.addEnumeration(unicode_value=u'full', tag=u'full')
symbol_size.cue = symbol_size._CF_enumeration.addEnumeration(unicode_value=u'cue', tag=u'cue')
symbol_size.large = symbol_size._CF_enumeration.addEnumeration(unicode_value=u'large', tag=u'large')
symbol_size._InitializeFacetMap(symbol_size._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'symbol-size', symbol_size)

# Atomic simple type: tenths
class tenths (pyxb.binding.datatypes.decimal):

    """The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.

Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tenths')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 425, 1)
    _Documentation = u'The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.\n\nDistances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.'
tenths._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'tenths', tenths)

# Atomic simple type: text-direction
class text_direction (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The text-direction type is used to adjust and override the Unicode bidirectional text algorithm, similar to the W3C Internationalization Tag Set recommendation. Values are ltr (left-to-right embed), rtl (right-to-left embed), lro (left-to-right bidi-override), and rlo (right-to-left bidi-override). The default value is ltr. This type is typically used by applications that store text in left-to-right visual order rather than logical order. Such applications can use the lro value to better communicate with other applications that more fully support bidirectional text."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'text-direction')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 434, 1)
    _Documentation = u'The text-direction type is used to adjust and override the Unicode bidirectional text algorithm, similar to the W3C Internationalization Tag Set recommendation. Values are ltr (left-to-right embed), rtl (right-to-left embed), lro (left-to-right bidi-override), and rlo (right-to-left bidi-override). The default value is ltr. This type is typically used by applications that store text in left-to-right visual order rather than logical order. Such applications can use the lro value to better communicate with other applications that more fully support bidirectional text.'
text_direction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=text_direction, enum_prefix=None)
text_direction.ltr = text_direction._CF_enumeration.addEnumeration(unicode_value=u'ltr', tag=u'ltr')
text_direction.rtl = text_direction._CF_enumeration.addEnumeration(unicode_value=u'rtl', tag=u'rtl')
text_direction.lro = text_direction._CF_enumeration.addEnumeration(unicode_value=u'lro', tag=u'lro')
text_direction.rlo = text_direction._CF_enumeration.addEnumeration(unicode_value=u'rlo', tag=u'rlo')
text_direction._InitializeFacetMap(text_direction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'text-direction', text_direction)

# Atomic simple type: time-only
class time_only (pyxb.binding.datatypes.token):

    """The time-only type is used to indicate that a particular playback-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'time-only')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 446, 1)
    _Documentation = u'The time-only type is used to indicate that a particular playback-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.'
time_only._CF_pattern = pyxb.binding.facets.CF_pattern()
time_only._CF_pattern.addPattern(pattern=u'[1-9][0-9]*(, ?[1-9][0-9]*)*')
time_only._InitializeFacetMap(time_only._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'time-only', time_only)

# Atomic simple type: top-bottom
class top_bottom (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The top-bottom type is used to indicate the top or bottom part of a vertical shape like non-arpeggiate."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'top-bottom')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 455, 1)
    _Documentation = u'The top-bottom type is used to indicate the top or bottom part of a vertical shape like non-arpeggiate.'
top_bottom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=top_bottom, enum_prefix=None)
top_bottom.top = top_bottom._CF_enumeration.addEnumeration(unicode_value=u'top', tag=u'top')
top_bottom.bottom = top_bottom._CF_enumeration.addEnumeration(unicode_value=u'bottom', tag=u'bottom')
top_bottom._InitializeFacetMap(top_bottom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'top-bottom', top_bottom)

# Atomic simple type: trill-beats
class trill_beats (pyxb.binding.datatypes.decimal):

    """The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'trill-beats')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 465, 1)
    _Documentation = u'The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.'
trill_beats._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=trill_beats, value=pyxb.binding.datatypes.decimal(2.0))
trill_beats._InitializeFacetMap(trill_beats._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'trill-beats', trill_beats)

# Atomic simple type: trill-step
class trill_step (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The trill-step type describes the alternating note of trills and mordents for playback, relative to the current note."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'trill-step')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 474, 1)
    _Documentation = u'The trill-step type describes the alternating note of trills and mordents for playback, relative to the current note.'
trill_step._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=trill_step, enum_prefix=None)
trill_step.whole = trill_step._CF_enumeration.addEnumeration(unicode_value=u'whole', tag=u'whole')
trill_step.half = trill_step._CF_enumeration.addEnumeration(unicode_value=u'half', tag=u'half')
trill_step.unison = trill_step._CF_enumeration.addEnumeration(unicode_value=u'unison', tag=u'unison')
trill_step._InitializeFacetMap(trill_step._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'trill-step', trill_step)

# Atomic simple type: two-note-turn
class two_note_turn (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The two-note-turn type describes the ending notes of trills and mordents for playback, relative to the current note."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'two-note-turn')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 485, 1)
    _Documentation = u'The two-note-turn type describes the ending notes of trills and mordents for playback, relative to the current note.'
two_note_turn._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=two_note_turn, enum_prefix=None)
two_note_turn.whole = two_note_turn._CF_enumeration.addEnumeration(unicode_value=u'whole', tag=u'whole')
two_note_turn.half = two_note_turn._CF_enumeration.addEnumeration(unicode_value=u'half', tag=u'half')
two_note_turn.none = two_note_turn._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
two_note_turn._InitializeFacetMap(two_note_turn._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'two-note-turn', two_note_turn)

# Atomic simple type: up-down
class up_down (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The up-down type is used for the direction of arrows and other pointed symbols like vertical accents, indicating which way the tip is pointing."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'up-down')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 496, 1)
    _Documentation = u'The up-down type is used for the direction of arrows and other pointed symbols like vertical accents, indicating which way the tip is pointing.'
up_down._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=up_down, enum_prefix=None)
up_down.up = up_down._CF_enumeration.addEnumeration(unicode_value=u'up', tag=u'up')
up_down.down = up_down._CF_enumeration.addEnumeration(unicode_value=u'down', tag=u'down')
up_down._InitializeFacetMap(up_down._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'up-down', up_down)

# Atomic simple type: upright-inverted
class upright_inverted (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The upright-inverted type describes the appearance of a fermata element. The value is upright if not specified."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'upright-inverted')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 506, 1)
    _Documentation = u'The upright-inverted type describes the appearance of a fermata element. The value is upright if not specified.'
upright_inverted._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=upright_inverted, enum_prefix=None)
upright_inverted.upright = upright_inverted._CF_enumeration.addEnumeration(unicode_value=u'upright', tag=u'upright')
upright_inverted.inverted = upright_inverted._CF_enumeration.addEnumeration(unicode_value=u'inverted', tag=u'inverted')
upright_inverted._InitializeFacetMap(upright_inverted._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'upright-inverted', upright_inverted)

# Atomic simple type: valign
class valign (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The valign type is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. Defaults are implementation-dependent."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'valign')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 516, 1)
    _Documentation = u'The valign type is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. Defaults are implementation-dependent.'
valign._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=valign, enum_prefix=None)
valign.top = valign._CF_enumeration.addEnumeration(unicode_value=u'top', tag=u'top')
valign.middle = valign._CF_enumeration.addEnumeration(unicode_value=u'middle', tag=u'middle')
valign.bottom = valign._CF_enumeration.addEnumeration(unicode_value=u'bottom', tag=u'bottom')
valign.baseline = valign._CF_enumeration.addEnumeration(unicode_value=u'baseline', tag=u'baseline')
valign._InitializeFacetMap(valign._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'valign', valign)

# Atomic simple type: valign-image
class valign_image (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The valign-image type is used to indicate vertical alignment for images and graphics, so it does not include a baseline value. Defaults are implementation-dependent."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'valign-image')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 528, 1)
    _Documentation = u'The valign-image type is used to indicate vertical alignment for images and graphics, so it does not include a baseline value. Defaults are implementation-dependent.'
valign_image._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=valign_image, enum_prefix=None)
valign_image.top = valign_image._CF_enumeration.addEnumeration(unicode_value=u'top', tag=u'top')
valign_image.middle = valign_image._CF_enumeration.addEnumeration(unicode_value=u'middle', tag=u'middle')
valign_image.bottom = valign_image._CF_enumeration.addEnumeration(unicode_value=u'bottom', tag=u'bottom')
valign_image._InitializeFacetMap(valign_image._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'valign-image', valign_image)

# Atomic simple type: yes-no
class yes_no (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The yes-no type is used for boolean-like attributes. We cannot use W3C XML Schema booleans due to their restrictions on expression of boolean values."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'yes-no')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 539, 1)
    _Documentation = u'The yes-no type is used for boolean-like attributes. We cannot use W3C XML Schema booleans due to their restrictions on expression of boolean values.'
yes_no._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=yes_no, enum_prefix=None)
yes_no.yes = yes_no._CF_enumeration.addEnumeration(unicode_value=u'yes', tag=u'yes')
yes_no.no = yes_no._CF_enumeration.addEnumeration(unicode_value=u'no', tag=u'no')
yes_no._InitializeFacetMap(yes_no._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'yes-no', yes_no)

# Atomic simple type: yyyy-mm-dd
class yyyy_mm_dd (pyxb.binding.datatypes.date):

    """Calendar dates are represented yyyy-mm-dd format, following ISO 8601. This is a W3C XML Schema date type, but without the optional timezone data."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'yyyy-mm-dd')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 556, 1)
    _Documentation = u'Calendar dates are represented yyyy-mm-dd format, following ISO 8601. This is a W3C XML Schema date type, but without the optional timezone data.'
yyyy_mm_dd._CF_pattern = pyxb.binding.facets.CF_pattern()
yyyy_mm_dd._CF_pattern.addPattern(pattern=u'[^:Z]*')
yyyy_mm_dd._InitializeFacetMap(yyyy_mm_dd._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'yyyy-mm-dd', yyyy_mm_dd)

# Atomic simple type: cancel-location
class cancel_location (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The cancel-location type is used to indicate where a key signature cancellation appears relative to a new key signature: to the left, to the right, or before the barline and to the left. It is left by default. For mid-measure key elements, a cancel-location of before-barline should be treated like a cancel-location of left."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cancel-location')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 567, 1)
    _Documentation = u'The cancel-location type is used to indicate where a key signature cancellation appears relative to a new key signature: to the left, to the right, or before the barline and to the left. It is left by default. For mid-measure key elements, a cancel-location of before-barline should be treated like a cancel-location of left.'
cancel_location._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cancel_location, enum_prefix=None)
cancel_location.left = cancel_location._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
cancel_location.right = cancel_location._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
cancel_location.before_barline = cancel_location._CF_enumeration.addEnumeration(unicode_value=u'before-barline', tag=u'before_barline')
cancel_location._InitializeFacetMap(cancel_location._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'cancel-location', cancel_location)

# Atomic simple type: clef-sign
class clef_sign (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The clef-sign element represents the different clef symbols. The jianpu sign indicates that the music that follows should be in jianpu numbered notation, just as the TAB sign indicates that the music that follows should be in tablature notation. Unlike TAB, a jianpu sign does not correspond to a visual clef notation."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'clef-sign')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 578, 1)
    _Documentation = u'The clef-sign element represents the different clef symbols. The jianpu sign indicates that the music that follows should be in jianpu numbered notation, just as the TAB sign indicates that the music that follows should be in tablature notation. Unlike TAB, a jianpu sign does not correspond to a visual clef notation.'
clef_sign._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=clef_sign, enum_prefix=None)
clef_sign.G = clef_sign._CF_enumeration.addEnumeration(unicode_value=u'G', tag=u'G')
clef_sign.F = clef_sign._CF_enumeration.addEnumeration(unicode_value=u'F', tag=u'F')
clef_sign.C = clef_sign._CF_enumeration.addEnumeration(unicode_value=u'C', tag=u'C')
clef_sign.percussion = clef_sign._CF_enumeration.addEnumeration(unicode_value=u'percussion', tag=u'percussion')
clef_sign.TAB = clef_sign._CF_enumeration.addEnumeration(unicode_value=u'TAB', tag=u'TAB')
clef_sign.jianpu = clef_sign._CF_enumeration.addEnumeration(unicode_value=u'jianpu', tag=u'jianpu')
clef_sign.none = clef_sign._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
clef_sign._InitializeFacetMap(clef_sign._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'clef-sign', clef_sign)

# Atomic simple type: fifths
class fifths (pyxb.binding.datatypes.integer):

    """The fifths type represents the number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths (hence the type name)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fifths')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 593, 1)
    _Documentation = u"The fifths type represents the number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths (hence the type name)."
fifths._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'fifths', fifths)

# Atomic simple type: mode
class mode (pyxb.binding.datatypes.string):

    """The mode type is used to specify major/minor and other mode distinctions. Valid mode values include major, minor, dorian, phrygian, lydian, mixolydian, aeolian, ionian, locrian, and none."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'mode')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 600, 1)
    _Documentation = u'The mode type is used to specify major/minor and other mode distinctions. Valid mode values include major, minor, dorian, phrygian, lydian, mixolydian, aeolian, ionian, locrian, and none.'
mode._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'mode', mode)

# Atomic simple type: show-frets
class show_frets (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The show-frets type indicates whether to show tablature frets as numbers (0, 1, 2) or letters (a, b, c). The default choice is numbers."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'show-frets')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 607, 1)
    _Documentation = u'The show-frets type indicates whether to show tablature frets as numbers (0, 1, 2) or letters (a, b, c). The default choice is numbers.'
show_frets._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=show_frets, enum_prefix=None)
show_frets.numbers = show_frets._CF_enumeration.addEnumeration(unicode_value=u'numbers', tag=u'numbers')
show_frets.letters = show_frets._CF_enumeration.addEnumeration(unicode_value=u'letters', tag=u'letters')
show_frets._InitializeFacetMap(show_frets._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'show-frets', show_frets)

# Atomic simple type: staff-line
class staff_line (pyxb.binding.datatypes.integer):

    """The staff-line type indicates the line on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. Staff line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'staff-line')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 617, 1)
    _Documentation = u'The staff-line type indicates the line on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. Staff line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.'
staff_line._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'staff-line', staff_line)

# Atomic simple type: staff-number
class staff_number (pyxb.binding.datatypes.positiveInteger):

    """The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'staff-number')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 624, 1)
    _Documentation = u'The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.'
staff_number._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'staff-number', staff_number)

# Atomic simple type: staff-type
class staff_type (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The staff-type value can be ossia, cue, editorial, regular, or alternate. An alternate staff indicates one that shares the same musical data as the prior staff, but displayed differently (e.g., treble and bass clef, standard notation and tab)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'staff-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 631, 1)
    _Documentation = u'The staff-type value can be ossia, cue, editorial, regular, or alternate. An alternate staff indicates one that shares the same musical data as the prior staff, but displayed differently (e.g., treble and bass clef, standard notation and tab).'
staff_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=staff_type, enum_prefix=None)
staff_type.ossia = staff_type._CF_enumeration.addEnumeration(unicode_value=u'ossia', tag=u'ossia')
staff_type.cue = staff_type._CF_enumeration.addEnumeration(unicode_value=u'cue', tag=u'cue')
staff_type.editorial = staff_type._CF_enumeration.addEnumeration(unicode_value=u'editorial', tag=u'editorial')
staff_type.regular = staff_type._CF_enumeration.addEnumeration(unicode_value=u'regular', tag=u'regular')
staff_type.alternate = staff_type._CF_enumeration.addEnumeration(unicode_value=u'alternate', tag=u'alternate')
staff_type._InitializeFacetMap(staff_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'staff-type', staff_type)

# Atomic simple type: time-relation
class time_relation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The time-relation type indicates the symbol used to represent the interchangeable aspect of dual time signatures."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'time-relation')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 644, 1)
    _Documentation = u'The time-relation type indicates the symbol used to represent the interchangeable aspect of dual time signatures.'
time_relation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=time_relation, enum_prefix=None)
time_relation.parentheses = time_relation._CF_enumeration.addEnumeration(unicode_value=u'parentheses', tag=u'parentheses')
time_relation.bracket = time_relation._CF_enumeration.addEnumeration(unicode_value=u'bracket', tag=u'bracket')
time_relation.equals = time_relation._CF_enumeration.addEnumeration(unicode_value=u'equals', tag=u'equals')
time_relation.slash = time_relation._CF_enumeration.addEnumeration(unicode_value=u'slash', tag=u'slash')
time_relation.space = time_relation._CF_enumeration.addEnumeration(unicode_value=u'space', tag=u'space')
time_relation.hyphen = time_relation._CF_enumeration.addEnumeration(unicode_value=u'hyphen', tag=u'hyphen')
time_relation._InitializeFacetMap(time_relation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'time-relation', time_relation)

# Atomic simple type: time-separator
class time_separator (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The time-separator type indicates how to display the arrangement between the beats and beat-type values in a time signature. The default value is none. The horizontal, diagonal, and vertical values represent horizontal, diagonal lower-left to upper-right, and vertical lines respectively. For these values, the beats and beat-type values are arranged on either side of the separator line. The none value represents no separator with the beats and beat-type arranged vertically. The adjacent value represents no separator with the beats and beat-type arranged horizontally."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'time-separator')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 658, 1)
    _Documentation = u'The time-separator type indicates how to display the arrangement between the beats and beat-type values in a time signature. The default value is none. The horizontal, diagonal, and vertical values represent horizontal, diagonal lower-left to upper-right, and vertical lines respectively. For these values, the beats and beat-type values are arranged on either side of the separator line. The none value represents no separator with the beats and beat-type arranged vertically. The adjacent value represents no separator with the beats and beat-type arranged horizontally.'
time_separator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=time_separator, enum_prefix=None)
time_separator.none = time_separator._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
time_separator.horizontal = time_separator._CF_enumeration.addEnumeration(unicode_value=u'horizontal', tag=u'horizontal')
time_separator.diagonal = time_separator._CF_enumeration.addEnumeration(unicode_value=u'diagonal', tag=u'diagonal')
time_separator.vertical = time_separator._CF_enumeration.addEnumeration(unicode_value=u'vertical', tag=u'vertical')
time_separator.adjacent = time_separator._CF_enumeration.addEnumeration(unicode_value=u'adjacent', tag=u'adjacent')
time_separator._InitializeFacetMap(time_separator._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'time-separator', time_separator)

# Atomic simple type: time-symbol
class time_symbol (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The time-symbol type indicates how to display a time signature. The normal value is the usual fractional display, and is the implied symbol type if none is specified. Other options are the common and cut time symbols, as well as a single number with an implied denominator. The note symbol indicates that the beat-type should be represented with the corresponding downstem note rather than a number. The dotted-note symbol indicates that the beat-type should be represented with a dotted downstem note that corresponds to three times the beat-type value, and a numerator that is one third the beats value."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'time-symbol')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 671, 1)
    _Documentation = u'The time-symbol type indicates how to display a time signature. The normal value is the usual fractional display, and is the implied symbol type if none is specified. Other options are the common and cut time symbols, as well as a single number with an implied denominator. The note symbol indicates that the beat-type should be represented with the corresponding downstem note rather than a number. The dotted-note symbol indicates that the beat-type should be represented with a dotted downstem note that corresponds to three times the beat-type value, and a numerator that is one third the beats value.'
time_symbol._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=time_symbol, enum_prefix=None)
time_symbol.common = time_symbol._CF_enumeration.addEnumeration(unicode_value=u'common', tag=u'common')
time_symbol.cut = time_symbol._CF_enumeration.addEnumeration(unicode_value=u'cut', tag=u'cut')
time_symbol.single_number = time_symbol._CF_enumeration.addEnumeration(unicode_value=u'single-number', tag=u'single_number')
time_symbol.note = time_symbol._CF_enumeration.addEnumeration(unicode_value=u'note', tag=u'note')
time_symbol.dotted_note = time_symbol._CF_enumeration.addEnumeration(unicode_value=u'dotted-note', tag=u'dotted_note')
time_symbol.normal = time_symbol._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
time_symbol._InitializeFacetMap(time_symbol._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'time-symbol', time_symbol)

# Atomic simple type: backward-forward
class backward_forward (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The backward-forward type is used to specify repeat directions. The start of the repeat has a forward direction while the end of the repeat has a backward direction."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'backward-forward')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 687, 1)
    _Documentation = u'The backward-forward type is used to specify repeat directions. The start of the repeat has a forward direction while the end of the repeat has a backward direction.'
backward_forward._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=backward_forward, enum_prefix=None)
backward_forward.backward = backward_forward._CF_enumeration.addEnumeration(unicode_value=u'backward', tag=u'backward')
backward_forward.forward = backward_forward._CF_enumeration.addEnumeration(unicode_value=u'forward', tag=u'forward')
backward_forward._InitializeFacetMap(backward_forward._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'backward-forward', backward_forward)

# Atomic simple type: bar-style
class bar_style (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The bar-style type represents barline style information. Choices are regular, dotted, dashed, heavy, light-light, light-heavy, heavy-light, heavy-heavy, tick (a short stroke through the top line), short (a partial barline between the 2nd and 4th lines), and none."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bar-style')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 697, 1)
    _Documentation = u'The bar-style type represents barline style information. Choices are regular, dotted, dashed, heavy, light-light, light-heavy, heavy-light, heavy-heavy, tick (a short stroke through the top line), short (a partial barline between the 2nd and 4th lines), and none.'
bar_style._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=bar_style, enum_prefix=None)
bar_style.regular = bar_style._CF_enumeration.addEnumeration(unicode_value=u'regular', tag=u'regular')
bar_style.dotted = bar_style._CF_enumeration.addEnumeration(unicode_value=u'dotted', tag=u'dotted')
bar_style.dashed = bar_style._CF_enumeration.addEnumeration(unicode_value=u'dashed', tag=u'dashed')
bar_style.heavy = bar_style._CF_enumeration.addEnumeration(unicode_value=u'heavy', tag=u'heavy')
bar_style.light_light = bar_style._CF_enumeration.addEnumeration(unicode_value=u'light-light', tag=u'light_light')
bar_style.light_heavy = bar_style._CF_enumeration.addEnumeration(unicode_value=u'light-heavy', tag=u'light_heavy')
bar_style.heavy_light = bar_style._CF_enumeration.addEnumeration(unicode_value=u'heavy-light', tag=u'heavy_light')
bar_style.heavy_heavy = bar_style._CF_enumeration.addEnumeration(unicode_value=u'heavy-heavy', tag=u'heavy_heavy')
bar_style.tick = bar_style._CF_enumeration.addEnumeration(unicode_value=u'tick', tag=u'tick')
bar_style.short = bar_style._CF_enumeration.addEnumeration(unicode_value=u'short', tag=u'short')
bar_style.none = bar_style._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
bar_style._InitializeFacetMap(bar_style._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'bar-style', bar_style)

# Atomic simple type: ending-number
class ending_number (pyxb.binding.datatypes.token):

    """The ending-number type is used to specify either a comma-separated list of positive integers without leading zeros, or a string of zero or more spaces. It is used for the number attribute of the ending element. The zero or more spaces version is used when software knows that an ending is present, but cannot determine the type of the ending."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ending-number')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 716, 1)
    _Documentation = u'The ending-number type is used to specify either a comma-separated list of positive integers without leading zeros, or a string of zero or more spaces. It is used for the number attribute of the ending element. The zero or more spaces version is used when software knows that an ending is present, but cannot determine the type of the ending.'
ending_number._CF_pattern = pyxb.binding.facets.CF_pattern()
ending_number._CF_pattern.addPattern(pattern=u'([ ]*)|([1-9][0-9]*(, ?[1-9][0-9]*)*)')
ending_number._InitializeFacetMap(ending_number._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'ending-number', ending_number)

# Atomic simple type: right-left-middle
class right_left_middle (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The right-left-middle type is used to specify barline location."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'right-left-middle')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 725, 1)
    _Documentation = u'The right-left-middle type is used to specify barline location.'
right_left_middle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=right_left_middle, enum_prefix=None)
right_left_middle.right = right_left_middle._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
right_left_middle.left = right_left_middle._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
right_left_middle.middle = right_left_middle._CF_enumeration.addEnumeration(unicode_value=u'middle', tag=u'middle')
right_left_middle._InitializeFacetMap(right_left_middle._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'right-left-middle', right_left_middle)

# Atomic simple type: start-stop-discontinue
class start_stop_discontinue (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The start-stop-discontinue type is used to specify ending types. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'start-stop-discontinue')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 736, 1)
    _Documentation = u'The start-stop-discontinue type is used to specify ending types. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece.'
start_stop_discontinue._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=start_stop_discontinue, enum_prefix=None)
start_stop_discontinue.start = start_stop_discontinue._CF_enumeration.addEnumeration(unicode_value=u'start', tag=u'start')
start_stop_discontinue.stop = start_stop_discontinue._CF_enumeration.addEnumeration(unicode_value=u'stop', tag=u'stop')
start_stop_discontinue.discontinue = start_stop_discontinue._CF_enumeration.addEnumeration(unicode_value=u'discontinue', tag=u'discontinue')
start_stop_discontinue._InitializeFacetMap(start_stop_discontinue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'start-stop-discontinue', start_stop_discontinue)

# Atomic simple type: winged
class winged (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The winged attribute indicates whether the repeat has winged extensions that appear above and below the barline. The straight and curved values represent single wings, while the double-straight and double-curved values represent double wings. The none value indicates no wings and is the default."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'winged')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 747, 1)
    _Documentation = u'The winged attribute indicates whether the repeat has winged extensions that appear above and below the barline. The straight and curved values represent single wings, while the double-straight and double-curved values represent double wings. The none value indicates no wings and is the default.'
winged._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=winged, enum_prefix=None)
winged.none = winged._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
winged.straight = winged._CF_enumeration.addEnumeration(unicode_value=u'straight', tag=u'straight')
winged.curved = winged._CF_enumeration.addEnumeration(unicode_value=u'curved', tag=u'curved')
winged.double_straight = winged._CF_enumeration.addEnumeration(unicode_value=u'double-straight', tag=u'double_straight')
winged.double_curved = winged._CF_enumeration.addEnumeration(unicode_value=u'double-curved', tag=u'double_curved')
winged._InitializeFacetMap(winged._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'winged', winged)

# Atomic simple type: accordion-middle
class accordion_middle (pyxb.binding.datatypes.positiveInteger):

    """The accordion-middle type may have values of 1, 2, or 3, corresponding to having 1 to 3 dots in the middle section of the accordion registration symbol."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accordion-middle')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 762, 1)
    _Documentation = u'The accordion-middle type may have values of 1, 2, or 3, corresponding to having 1 to 3 dots in the middle section of the accordion registration symbol.'
accordion_middle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=accordion_middle, value=pyxb.binding.datatypes.positiveInteger(3L))
accordion_middle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=accordion_middle, value=pyxb.binding.datatypes.positiveInteger(1L))
accordion_middle._InitializeFacetMap(accordion_middle._CF_maxInclusive,
   accordion_middle._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'accordion-middle', accordion_middle)

# Atomic simple type: beater-value
class beater_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The beater-value type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram. The finger and hammer values are in addition to Stone's list."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'beater-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 772, 1)
    _Documentation = u"The beater-value type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram. The finger and hammer values are in addition to Stone's list."
beater_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=beater_value, enum_prefix=None)
beater_value.bow = beater_value._CF_enumeration.addEnumeration(unicode_value=u'bow', tag=u'bow')
beater_value.chime_hammer = beater_value._CF_enumeration.addEnumeration(unicode_value=u'chime hammer', tag=u'chime_hammer')
beater_value.coin = beater_value._CF_enumeration.addEnumeration(unicode_value=u'coin', tag=u'coin')
beater_value.finger = beater_value._CF_enumeration.addEnumeration(unicode_value=u'finger', tag=u'finger')
beater_value.fingernail = beater_value._CF_enumeration.addEnumeration(unicode_value=u'fingernail', tag=u'fingernail')
beater_value.fist = beater_value._CF_enumeration.addEnumeration(unicode_value=u'fist', tag=u'fist')
beater_value.guiro_scraper = beater_value._CF_enumeration.addEnumeration(unicode_value=u'guiro scraper', tag=u'guiro_scraper')
beater_value.hammer = beater_value._CF_enumeration.addEnumeration(unicode_value=u'hammer', tag=u'hammer')
beater_value.hand = beater_value._CF_enumeration.addEnumeration(unicode_value=u'hand', tag=u'hand')
beater_value.jazz_stick = beater_value._CF_enumeration.addEnumeration(unicode_value=u'jazz stick', tag=u'jazz_stick')
beater_value.knitting_needle = beater_value._CF_enumeration.addEnumeration(unicode_value=u'knitting needle', tag=u'knitting_needle')
beater_value.metal_hammer = beater_value._CF_enumeration.addEnumeration(unicode_value=u'metal hammer', tag=u'metal_hammer')
beater_value.snare_stick = beater_value._CF_enumeration.addEnumeration(unicode_value=u'snare stick', tag=u'snare_stick')
beater_value.spoon_mallet = beater_value._CF_enumeration.addEnumeration(unicode_value=u'spoon mallet', tag=u'spoon_mallet')
beater_value.triangle_beater = beater_value._CF_enumeration.addEnumeration(unicode_value=u'triangle beater', tag=u'triangle_beater')
beater_value.triangle_beater_plain = beater_value._CF_enumeration.addEnumeration(unicode_value=u'triangle beater plain', tag=u'triangle_beater_plain')
beater_value.wire_brush = beater_value._CF_enumeration.addEnumeration(unicode_value=u'wire brush', tag=u'wire_brush')
beater_value._InitializeFacetMap(beater_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'beater-value', beater_value)

# Atomic simple type: degree-symbol-value
class degree_symbol_value (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The degree-symbol-value type indicates indicates that a symbol should be used in specifying the degree."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'degree-symbol-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 797, 1)
    _Documentation = u'The degree-symbol-value type indicates indicates that a symbol should be used in specifying the degree.'
degree_symbol_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=degree_symbol_value, enum_prefix=None)
degree_symbol_value.major = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'major', tag=u'major')
degree_symbol_value.minor = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'minor', tag=u'minor')
degree_symbol_value.augmented = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'augmented', tag=u'augmented')
degree_symbol_value.diminished = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'diminished', tag=u'diminished')
degree_symbol_value.half_diminished = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'half-diminished', tag=u'half_diminished')
degree_symbol_value._InitializeFacetMap(degree_symbol_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'degree-symbol-value', degree_symbol_value)

# Atomic simple type: degree-type-value
class degree_type_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The degree-type-value type indicates whether the current degree element is an addition, alteration, or subtraction to the kind of the current chord in the harmony element."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'degree-type-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 810, 1)
    _Documentation = u'The degree-type-value type indicates whether the current degree element is an addition, alteration, or subtraction to the kind of the current chord in the harmony element.'
degree_type_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=degree_type_value, enum_prefix=None)
degree_type_value.add = degree_type_value._CF_enumeration.addEnumeration(unicode_value=u'add', tag=u'add')
degree_type_value.alter = degree_type_value._CF_enumeration.addEnumeration(unicode_value=u'alter', tag=u'alter')
degree_type_value.subtract = degree_type_value._CF_enumeration.addEnumeration(unicode_value=u'subtract', tag=u'subtract')
degree_type_value._InitializeFacetMap(degree_type_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'degree-type-value', degree_type_value)

# Atomic simple type: effect
class effect (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The effect type represents pictograms for sound effect percussion instruments. The cannon value is in addition to Stone's list."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'effect')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 821, 1)
    _Documentation = u"The effect type represents pictograms for sound effect percussion instruments. The cannon value is in addition to Stone's list."
effect._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=effect, enum_prefix=None)
effect.anvil = effect._CF_enumeration.addEnumeration(unicode_value=u'anvil', tag=u'anvil')
effect.auto_horn = effect._CF_enumeration.addEnumeration(unicode_value=u'auto horn', tag=u'auto_horn')
effect.bird_whistle = effect._CF_enumeration.addEnumeration(unicode_value=u'bird whistle', tag=u'bird_whistle')
effect.cannon = effect._CF_enumeration.addEnumeration(unicode_value=u'cannon', tag=u'cannon')
effect.duck_call = effect._CF_enumeration.addEnumeration(unicode_value=u'duck call', tag=u'duck_call')
effect.gun_shot = effect._CF_enumeration.addEnumeration(unicode_value=u'gun shot', tag=u'gun_shot')
effect.klaxon_horn = effect._CF_enumeration.addEnumeration(unicode_value=u'klaxon horn', tag=u'klaxon_horn')
effect.lions_roar = effect._CF_enumeration.addEnumeration(unicode_value=u'lions roar', tag=u'lions_roar')
effect.police_whistle = effect._CF_enumeration.addEnumeration(unicode_value=u'police whistle', tag=u'police_whistle')
effect.siren = effect._CF_enumeration.addEnumeration(unicode_value=u'siren', tag=u'siren')
effect.slide_whistle = effect._CF_enumeration.addEnumeration(unicode_value=u'slide whistle', tag=u'slide_whistle')
effect.thunder_sheet = effect._CF_enumeration.addEnumeration(unicode_value=u'thunder sheet', tag=u'thunder_sheet')
effect.wind_machine = effect._CF_enumeration.addEnumeration(unicode_value=u'wind machine', tag=u'wind_machine')
effect.wind_whistle = effect._CF_enumeration.addEnumeration(unicode_value=u'wind whistle', tag=u'wind_whistle')
effect._InitializeFacetMap(effect._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'effect', effect)

# Atomic simple type: glass
class glass (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The glass type represents pictograms for glass percussion instruments."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'glass')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 843, 1)
    _Documentation = u'The glass type represents pictograms for glass percussion instruments.'
glass._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=glass, enum_prefix=None)
glass.wind_chimes = glass._CF_enumeration.addEnumeration(unicode_value=u'wind chimes', tag=u'wind_chimes')
glass._InitializeFacetMap(glass._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'glass', glass)

# Atomic simple type: harmony-type
class harmony_type (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The harmony-type type differentiates different types of harmonies when alternate harmonies are possible. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'harmony-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 852, 1)
    _Documentation = u'The harmony-type type differentiates different types of harmonies when alternate harmonies are possible. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses.'
harmony_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=harmony_type, enum_prefix=None)
harmony_type.explicit = harmony_type._CF_enumeration.addEnumeration(unicode_value=u'explicit', tag=u'explicit')
harmony_type.implied = harmony_type._CF_enumeration.addEnumeration(unicode_value=u'implied', tag=u'implied')
harmony_type.alternate = harmony_type._CF_enumeration.addEnumeration(unicode_value=u'alternate', tag=u'alternate')
harmony_type._InitializeFacetMap(harmony_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'harmony-type', harmony_type)

# Atomic simple type: kind-value
class kind_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """A kind-value indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points. Values include:
	
Triads:
	major (major third, perfect fifth)
	minor (minor third, perfect fifth)
	augmented (major third, augmented fifth)
	diminished (minor third, diminished fifth)
Sevenths:
	dominant (major triad, minor seventh)
	major-seventh (major triad, major seventh)
	minor-seventh (minor triad, minor seventh)
	diminished-seventh (diminished triad, diminished seventh)
	augmented-seventh (augmented triad, minor seventh)
	half-diminished (diminished triad, minor seventh)
	major-minor (minor triad, major seventh)
Sixths:
	major-sixth (major triad, added sixth)
	minor-sixth (minor triad, added sixth)
Ninths:
	dominant-ninth (dominant-seventh, major ninth)
	major-ninth (major-seventh, major ninth)
	minor-ninth (minor-seventh, major ninth)
11ths (usually as the basis for alteration):
	dominant-11th (dominant-ninth, perfect 11th)
	major-11th (major-ninth, perfect 11th)
	minor-11th (minor-ninth, perfect 11th)
13ths (usually as the basis for alteration):
	dominant-13th (dominant-11th, major 13th)
	major-13th (major-11th, major 13th)
	minor-13th (minor-11th, major 13th)
Suspended:
	suspended-second (major second, perfect fifth)
	suspended-fourth (perfect fourth, perfect fifth)
Functional sixths:
	Neapolitan
	Italian
	French
	German
Other:
	pedal (pedal-point bass)
	power (perfect fifth)
	Tristan
	
The "other" kind is used when the harmony is entirely composed of add elements. The "none" kind is used to explicitly encode absence of chords or functional harmony."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'kind-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 863, 1)
    _Documentation = u'A kind-value indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points. Values include:\n\t\nTriads:\n\tmajor (major third, perfect fifth)\n\tminor (minor third, perfect fifth)\n\taugmented (major third, augmented fifth)\n\tdiminished (minor third, diminished fifth)\nSevenths:\n\tdominant (major triad, minor seventh)\n\tmajor-seventh (major triad, major seventh)\n\tminor-seventh (minor triad, minor seventh)\n\tdiminished-seventh (diminished triad, diminished seventh)\n\taugmented-seventh (augmented triad, minor seventh)\n\thalf-diminished (diminished triad, minor seventh)\n\tmajor-minor (minor triad, major seventh)\nSixths:\n\tmajor-sixth (major triad, added sixth)\n\tminor-sixth (minor triad, added sixth)\nNinths:\n\tdominant-ninth (dominant-seventh, major ninth)\n\tmajor-ninth (major-seventh, major ninth)\n\tminor-ninth (minor-seventh, major ninth)\n11ths (usually as the basis for alteration):\n\tdominant-11th (dominant-ninth, perfect 11th)\n\tmajor-11th (major-ninth, perfect 11th)\n\tminor-11th (minor-ninth, perfect 11th)\n13ths (usually as the basis for alteration):\n\tdominant-13th (dominant-11th, major 13th)\n\tmajor-13th (major-11th, major 13th)\n\tminor-13th (minor-11th, major 13th)\nSuspended:\n\tsuspended-second (major second, perfect fifth)\n\tsuspended-fourth (perfect fourth, perfect fifth)\nFunctional sixths:\n\tNeapolitan\n\tItalian\n\tFrench\n\tGerman\nOther:\n\tpedal (pedal-point bass)\n\tpower (perfect fifth)\n\tTristan\n\t\nThe "other" kind is used when the harmony is entirely composed of add elements. The "none" kind is used to explicitly encode absence of chords or functional harmony.'
kind_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=kind_value, enum_prefix=None)
kind_value.major = kind_value._CF_enumeration.addEnumeration(unicode_value=u'major', tag=u'major')
kind_value.minor = kind_value._CF_enumeration.addEnumeration(unicode_value=u'minor', tag=u'minor')
kind_value.augmented = kind_value._CF_enumeration.addEnumeration(unicode_value=u'augmented', tag=u'augmented')
kind_value.diminished = kind_value._CF_enumeration.addEnumeration(unicode_value=u'diminished', tag=u'diminished')
kind_value.dominant = kind_value._CF_enumeration.addEnumeration(unicode_value=u'dominant', tag=u'dominant')
kind_value.major_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value=u'major-seventh', tag=u'major_seventh')
kind_value.minor_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value=u'minor-seventh', tag=u'minor_seventh')
kind_value.diminished_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value=u'diminished-seventh', tag=u'diminished_seventh')
kind_value.augmented_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value=u'augmented-seventh', tag=u'augmented_seventh')
kind_value.half_diminished = kind_value._CF_enumeration.addEnumeration(unicode_value=u'half-diminished', tag=u'half_diminished')
kind_value.major_minor = kind_value._CF_enumeration.addEnumeration(unicode_value=u'major-minor', tag=u'major_minor')
kind_value.major_sixth = kind_value._CF_enumeration.addEnumeration(unicode_value=u'major-sixth', tag=u'major_sixth')
kind_value.minor_sixth = kind_value._CF_enumeration.addEnumeration(unicode_value=u'minor-sixth', tag=u'minor_sixth')
kind_value.dominant_ninth = kind_value._CF_enumeration.addEnumeration(unicode_value=u'dominant-ninth', tag=u'dominant_ninth')
kind_value.major_ninth = kind_value._CF_enumeration.addEnumeration(unicode_value=u'major-ninth', tag=u'major_ninth')
kind_value.minor_ninth = kind_value._CF_enumeration.addEnumeration(unicode_value=u'minor-ninth', tag=u'minor_ninth')
kind_value.dominant_11th = kind_value._CF_enumeration.addEnumeration(unicode_value=u'dominant-11th', tag=u'dominant_11th')
kind_value.major_11th = kind_value._CF_enumeration.addEnumeration(unicode_value=u'major-11th', tag=u'major_11th')
kind_value.minor_11th = kind_value._CF_enumeration.addEnumeration(unicode_value=u'minor-11th', tag=u'minor_11th')
kind_value.dominant_13th = kind_value._CF_enumeration.addEnumeration(unicode_value=u'dominant-13th', tag=u'dominant_13th')
kind_value.major_13th = kind_value._CF_enumeration.addEnumeration(unicode_value=u'major-13th', tag=u'major_13th')
kind_value.minor_13th = kind_value._CF_enumeration.addEnumeration(unicode_value=u'minor-13th', tag=u'minor_13th')
kind_value.suspended_second = kind_value._CF_enumeration.addEnumeration(unicode_value=u'suspended-second', tag=u'suspended_second')
kind_value.suspended_fourth = kind_value._CF_enumeration.addEnumeration(unicode_value=u'suspended-fourth', tag=u'suspended_fourth')
kind_value.Neapolitan = kind_value._CF_enumeration.addEnumeration(unicode_value=u'Neapolitan', tag=u'Neapolitan')
kind_value.Italian = kind_value._CF_enumeration.addEnumeration(unicode_value=u'Italian', tag=u'Italian')
kind_value.French = kind_value._CF_enumeration.addEnumeration(unicode_value=u'French', tag=u'French')
kind_value.German = kind_value._CF_enumeration.addEnumeration(unicode_value=u'German', tag=u'German')
kind_value.pedal = kind_value._CF_enumeration.addEnumeration(unicode_value=u'pedal', tag=u'pedal')
kind_value.power = kind_value._CF_enumeration.addEnumeration(unicode_value=u'power', tag=u'power')
kind_value.Tristan = kind_value._CF_enumeration.addEnumeration(unicode_value=u'Tristan', tag=u'Tristan')
kind_value.other = kind_value._CF_enumeration.addEnumeration(unicode_value=u'other', tag=u'other')
kind_value.none = kind_value._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
kind_value._InitializeFacetMap(kind_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'kind-value', kind_value)

# Atomic simple type: line-end
class line_end (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The line-end type specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of a bracket."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'line-end')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 947, 1)
    _Documentation = u'The line-end type specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of a bracket.'
line_end._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=line_end, enum_prefix=None)
line_end.up = line_end._CF_enumeration.addEnumeration(unicode_value=u'up', tag=u'up')
line_end.down = line_end._CF_enumeration.addEnumeration(unicode_value=u'down', tag=u'down')
line_end.both = line_end._CF_enumeration.addEnumeration(unicode_value=u'both', tag=u'both')
line_end.arrow = line_end._CF_enumeration.addEnumeration(unicode_value=u'arrow', tag=u'arrow')
line_end.none = line_end._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
line_end._InitializeFacetMap(line_end._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'line-end', line_end)

# Atomic simple type: measure-numbering-value
class measure_numbering_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The measure-numbering-value type describes how measure numbers are displayed on this part: no numbers, numbers every measure, or numbers every system."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'measure-numbering-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 960, 1)
    _Documentation = u'The measure-numbering-value type describes how measure numbers are displayed on this part: no numbers, numbers every measure, or numbers every system.'
measure_numbering_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=measure_numbering_value, enum_prefix=None)
measure_numbering_value.none = measure_numbering_value._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
measure_numbering_value.measure = measure_numbering_value._CF_enumeration.addEnumeration(unicode_value=u'measure', tag=u'measure')
measure_numbering_value.system = measure_numbering_value._CF_enumeration.addEnumeration(unicode_value=u'system', tag=u'system')
measure_numbering_value._InitializeFacetMap(measure_numbering_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'measure-numbering-value', measure_numbering_value)

# Atomic simple type: membrane
class membrane (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The membrane type represents pictograms for membrane percussion instruments. The goblet drum value is in addition to Stone's list."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'membrane')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 971, 1)
    _Documentation = u"The membrane type represents pictograms for membrane percussion instruments. The goblet drum value is in addition to Stone's list."
membrane._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=membrane, enum_prefix=None)
membrane.bass_drum = membrane._CF_enumeration.addEnumeration(unicode_value=u'bass drum', tag=u'bass_drum')
membrane.bass_drum_on_side = membrane._CF_enumeration.addEnumeration(unicode_value=u'bass drum on side', tag=u'bass_drum_on_side')
membrane.bongos = membrane._CF_enumeration.addEnumeration(unicode_value=u'bongos', tag=u'bongos')
membrane.conga_drum = membrane._CF_enumeration.addEnumeration(unicode_value=u'conga drum', tag=u'conga_drum')
membrane.goblet_drum = membrane._CF_enumeration.addEnumeration(unicode_value=u'goblet drum', tag=u'goblet_drum')
membrane.military_drum = membrane._CF_enumeration.addEnumeration(unicode_value=u'military drum', tag=u'military_drum')
membrane.snare_drum = membrane._CF_enumeration.addEnumeration(unicode_value=u'snare drum', tag=u'snare_drum')
membrane.snare_drum_snares_off = membrane._CF_enumeration.addEnumeration(unicode_value=u'snare drum snares off', tag=u'snare_drum_snares_off')
membrane.tambourine = membrane._CF_enumeration.addEnumeration(unicode_value=u'tambourine', tag=u'tambourine')
membrane.tenor_drum = membrane._CF_enumeration.addEnumeration(unicode_value=u'tenor drum', tag=u'tenor_drum')
membrane.timbales = membrane._CF_enumeration.addEnumeration(unicode_value=u'timbales', tag=u'timbales')
membrane.tomtom = membrane._CF_enumeration.addEnumeration(unicode_value=u'tomtom', tag=u'tomtom')
membrane._InitializeFacetMap(membrane._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'membrane', membrane)

# Atomic simple type: metal
class metal (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The metal type represents pictograms for metal percussion instruments. The hi-hat value refers to a pictogram like Stone's high-hat cymbals but without the long vertical line at the bottom."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'metal')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 991, 1)
    _Documentation = u"The metal type represents pictograms for metal percussion instruments. The hi-hat value refers to a pictogram like Stone's high-hat cymbals but without the long vertical line at the bottom."
metal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=metal, enum_prefix=None)
metal.almglocken = metal._CF_enumeration.addEnumeration(unicode_value=u'almglocken', tag=u'almglocken')
metal.bell = metal._CF_enumeration.addEnumeration(unicode_value=u'bell', tag=u'bell')
metal.bell_plate = metal._CF_enumeration.addEnumeration(unicode_value=u'bell plate', tag=u'bell_plate')
metal.brake_drum = metal._CF_enumeration.addEnumeration(unicode_value=u'brake drum', tag=u'brake_drum')
metal.Chinese_cymbal = metal._CF_enumeration.addEnumeration(unicode_value=u'Chinese cymbal', tag=u'Chinese_cymbal')
metal.cowbell = metal._CF_enumeration.addEnumeration(unicode_value=u'cowbell', tag=u'cowbell')
metal.crash_cymbals = metal._CF_enumeration.addEnumeration(unicode_value=u'crash cymbals', tag=u'crash_cymbals')
metal.crotale = metal._CF_enumeration.addEnumeration(unicode_value=u'crotale', tag=u'crotale')
metal.cymbal_tongs = metal._CF_enumeration.addEnumeration(unicode_value=u'cymbal tongs', tag=u'cymbal_tongs')
metal.domed_gong = metal._CF_enumeration.addEnumeration(unicode_value=u'domed gong', tag=u'domed_gong')
metal.finger_cymbals = metal._CF_enumeration.addEnumeration(unicode_value=u'finger cymbals', tag=u'finger_cymbals')
metal.flexatone = metal._CF_enumeration.addEnumeration(unicode_value=u'flexatone', tag=u'flexatone')
metal.gong = metal._CF_enumeration.addEnumeration(unicode_value=u'gong', tag=u'gong')
metal.hi_hat = metal._CF_enumeration.addEnumeration(unicode_value=u'hi-hat', tag=u'hi_hat')
metal.high_hat_cymbals = metal._CF_enumeration.addEnumeration(unicode_value=u'high-hat cymbals', tag=u'high_hat_cymbals')
metal.handbell = metal._CF_enumeration.addEnumeration(unicode_value=u'handbell', tag=u'handbell')
metal.sistrum = metal._CF_enumeration.addEnumeration(unicode_value=u'sistrum', tag=u'sistrum')
metal.sizzle_cymbal = metal._CF_enumeration.addEnumeration(unicode_value=u'sizzle cymbal', tag=u'sizzle_cymbal')
metal.sleigh_bells = metal._CF_enumeration.addEnumeration(unicode_value=u'sleigh bells', tag=u'sleigh_bells')
metal.suspended_cymbal = metal._CF_enumeration.addEnumeration(unicode_value=u'suspended cymbal', tag=u'suspended_cymbal')
metal.tam_tam = metal._CF_enumeration.addEnumeration(unicode_value=u'tam tam', tag=u'tam_tam')
metal.triangle = metal._CF_enumeration.addEnumeration(unicode_value=u'triangle', tag=u'triangle')
metal.Vietnamese_hat = metal._CF_enumeration.addEnumeration(unicode_value=u'Vietnamese hat', tag=u'Vietnamese_hat')
metal._InitializeFacetMap(metal._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'metal', metal)

# Atomic simple type: on-off
class on_off (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The on-off type is used for notation elements such as string mutes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'on-off')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1022, 1)
    _Documentation = u'The on-off type is used for notation elements such as string mutes.'
on_off._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=on_off, enum_prefix=None)
on_off.on = on_off._CF_enumeration.addEnumeration(unicode_value=u'on', tag=u'on')
on_off.off = on_off._CF_enumeration.addEnumeration(unicode_value=u'off', tag=u'off')
on_off._InitializeFacetMap(on_off._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'on-off', on_off)

# Atomic simple type: pitched
class pitched (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The pitched type represents pictograms for pitched percussion instruments. The chimes and tubular chimes values distinguish the single-line and double-line versions of the pictogram. The mallet value is in addition to Stone's list."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pitched')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1032, 1)
    _Documentation = u"The pitched type represents pictograms for pitched percussion instruments. The chimes and tubular chimes values distinguish the single-line and double-line versions of the pictogram. The mallet value is in addition to Stone's list."
pitched._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=pitched, enum_prefix=None)
pitched.chimes = pitched._CF_enumeration.addEnumeration(unicode_value=u'chimes', tag=u'chimes')
pitched.glockenspiel = pitched._CF_enumeration.addEnumeration(unicode_value=u'glockenspiel', tag=u'glockenspiel')
pitched.mallet = pitched._CF_enumeration.addEnumeration(unicode_value=u'mallet', tag=u'mallet')
pitched.marimba = pitched._CF_enumeration.addEnumeration(unicode_value=u'marimba', tag=u'marimba')
pitched.tubular_chimes = pitched._CF_enumeration.addEnumeration(unicode_value=u'tubular chimes', tag=u'tubular_chimes')
pitched.vibraphone = pitched._CF_enumeration.addEnumeration(unicode_value=u'vibraphone', tag=u'vibraphone')
pitched.xylophone = pitched._CF_enumeration.addEnumeration(unicode_value=u'xylophone', tag=u'xylophone')
pitched._InitializeFacetMap(pitched._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'pitched', pitched)

# Atomic simple type: principal-voice-symbol
class principal_voice_symbol (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The principal-voice-symbol type represents the type of symbol used to indicate the start of a principal or secondary voice. The "plain" value represents a plain square bracket. The value of "none" is used for analysis markup when the principal-voice element does not have a corresponding appearance in the score."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'principal-voice-symbol')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1047, 1)
    _Documentation = u'The principal-voice-symbol type represents the type of symbol used to indicate the start of a principal or secondary voice. The "plain" value represents a plain square bracket. The value of "none" is used for analysis markup when the principal-voice element does not have a corresponding appearance in the score.'
principal_voice_symbol._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=principal_voice_symbol, enum_prefix=None)
principal_voice_symbol.Hauptstimme = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value=u'Hauptstimme', tag=u'Hauptstimme')
principal_voice_symbol.Nebenstimme = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value=u'Nebenstimme', tag=u'Nebenstimme')
principal_voice_symbol.plain = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value=u'plain', tag=u'plain')
principal_voice_symbol.none = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
principal_voice_symbol._InitializeFacetMap(principal_voice_symbol._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'principal-voice-symbol', principal_voice_symbol)

# Atomic simple type: start-stop-change-continue
class start_stop_change_continue (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The start-stop-change-continue type is used to distinguish types of pedal directions."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'start-stop-change-continue')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1059, 1)
    _Documentation = u'The start-stop-change-continue type is used to distinguish types of pedal directions.'
start_stop_change_continue._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=start_stop_change_continue, enum_prefix=None)
start_stop_change_continue.start = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value=u'start', tag=u'start')
start_stop_change_continue.stop = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value=u'stop', tag=u'stop')
start_stop_change_continue.change = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value=u'change', tag=u'change')
start_stop_change_continue.continue_ = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value=u'continue', tag=u'continue_')
start_stop_change_continue._InitializeFacetMap(start_stop_change_continue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'start-stop-change-continue', start_stop_change_continue)

# Atomic simple type: tip-direction
class tip_direction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The tip-direction type represents the direction in which the tip of a stick or beater points, using Unicode arrow terminology."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tip-direction')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1071, 1)
    _Documentation = u'The tip-direction type represents the direction in which the tip of a stick or beater points, using Unicode arrow terminology.'
tip_direction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=tip_direction, enum_prefix=None)
tip_direction.up = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'up', tag=u'up')
tip_direction.down = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'down', tag=u'down')
tip_direction.left = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
tip_direction.right = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
tip_direction.northwest = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'northwest', tag=u'northwest')
tip_direction.northeast = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'northeast', tag=u'northeast')
tip_direction.southeast = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'southeast', tag=u'southeast')
tip_direction.southwest = tip_direction._CF_enumeration.addEnumeration(unicode_value=u'southwest', tag=u'southwest')
tip_direction._InitializeFacetMap(tip_direction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'tip-direction', tip_direction)

# Atomic simple type: stick-location
class stick_location (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The stick-location type represents pictograms for the location of sticks, beaters, or mallets on cymbals, gongs, drums, and other instruments."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stick-location')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1087, 1)
    _Documentation = u'The stick-location type represents pictograms for the location of sticks, beaters, or mallets on cymbals, gongs, drums, and other instruments.'
stick_location._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stick_location, enum_prefix=None)
stick_location.center = stick_location._CF_enumeration.addEnumeration(unicode_value=u'center', tag=u'center')
stick_location.rim = stick_location._CF_enumeration.addEnumeration(unicode_value=u'rim', tag=u'rim')
stick_location.cymbal_bell = stick_location._CF_enumeration.addEnumeration(unicode_value=u'cymbal bell', tag=u'cymbal_bell')
stick_location.cymbal_edge = stick_location._CF_enumeration.addEnumeration(unicode_value=u'cymbal edge', tag=u'cymbal_edge')
stick_location._InitializeFacetMap(stick_location._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'stick-location', stick_location)

# Atomic simple type: stick-material
class stick_material (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The stick-material type represents the material being displayed in a stick pictogram."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stick-material')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1099, 1)
    _Documentation = u'The stick-material type represents the material being displayed in a stick pictogram.'
stick_material._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stick_material, enum_prefix=None)
stick_material.soft = stick_material._CF_enumeration.addEnumeration(unicode_value=u'soft', tag=u'soft')
stick_material.medium = stick_material._CF_enumeration.addEnumeration(unicode_value=u'medium', tag=u'medium')
stick_material.hard = stick_material._CF_enumeration.addEnumeration(unicode_value=u'hard', tag=u'hard')
stick_material.shaded = stick_material._CF_enumeration.addEnumeration(unicode_value=u'shaded', tag=u'shaded')
stick_material.x = stick_material._CF_enumeration.addEnumeration(unicode_value=u'x', tag=u'x')
stick_material._InitializeFacetMap(stick_material._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'stick-material', stick_material)

# Atomic simple type: stick-type
class stick_type (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The stick-type type represents the shape of pictograms where the material
	in the stick, mallet, or beater is represented in the pictogram."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stick-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1112, 1)
    _Documentation = u'The stick-type type represents the shape of pictograms where the material\n\tin the stick, mallet, or beater is represented in the pictogram.'
stick_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stick_type, enum_prefix=None)
stick_type.bass_drum = stick_type._CF_enumeration.addEnumeration(unicode_value=u'bass drum', tag=u'bass_drum')
stick_type.double_bass_drum = stick_type._CF_enumeration.addEnumeration(unicode_value=u'double bass drum', tag=u'double_bass_drum')
stick_type.timpani = stick_type._CF_enumeration.addEnumeration(unicode_value=u'timpani', tag=u'timpani')
stick_type.xylophone = stick_type._CF_enumeration.addEnumeration(unicode_value=u'xylophone', tag=u'xylophone')
stick_type.yarn = stick_type._CF_enumeration.addEnumeration(unicode_value=u'yarn', tag=u'yarn')
stick_type._InitializeFacetMap(stick_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'stick-type', stick_type)

# Atomic simple type: up-down-stop-continue
class up_down_stop_continue (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The up-down-stop-continue type is used for octave-shift elements, indicating the direction of the shift from their true pitched values because of printing difficulty."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'up-down-stop-continue')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1126, 1)
    _Documentation = u'The up-down-stop-continue type is used for octave-shift elements, indicating the direction of the shift from their true pitched values because of printing difficulty.'
up_down_stop_continue._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=up_down_stop_continue, enum_prefix=None)
up_down_stop_continue.up = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value=u'up', tag=u'up')
up_down_stop_continue.down = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value=u'down', tag=u'down')
up_down_stop_continue.stop = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value=u'stop', tag=u'stop')
up_down_stop_continue.continue_ = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value=u'continue', tag=u'continue_')
up_down_stop_continue._InitializeFacetMap(up_down_stop_continue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'up-down-stop-continue', up_down_stop_continue)

# Atomic simple type: wedge-type
class wedge_type (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The wedge type is crescendo for the start of a wedge that is closed at the left side, diminuendo for the start of a wedge that is closed on the right side, and stop for the end of a wedge. The continue type is used for formatting wedges over a system break, or for other situations where a single wedge is divided into multiple segments."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'wedge-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1138, 1)
    _Documentation = u'The wedge type is crescendo for the start of a wedge that is closed at the left side, diminuendo for the start of a wedge that is closed on the right side, and stop for the end of a wedge. The continue type is used for formatting wedges over a system break, or for other situations where a single wedge is divided into multiple segments.'
wedge_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=wedge_type, enum_prefix=None)
wedge_type.crescendo = wedge_type._CF_enumeration.addEnumeration(unicode_value=u'crescendo', tag=u'crescendo')
wedge_type.diminuendo = wedge_type._CF_enumeration.addEnumeration(unicode_value=u'diminuendo', tag=u'diminuendo')
wedge_type.stop = wedge_type._CF_enumeration.addEnumeration(unicode_value=u'stop', tag=u'stop')
wedge_type.continue_ = wedge_type._CF_enumeration.addEnumeration(unicode_value=u'continue', tag=u'continue_')
wedge_type._InitializeFacetMap(wedge_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'wedge-type', wedge_type)

# Atomic simple type: wood
class wood (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The wood type represents pictograms for wood percussion instruments. The maraca and maracas values distinguish the one- and two-maraca versions of the pictogram. The vibraslap and castanets values are in addition to Stone's list."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'wood')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1150, 1)
    _Documentation = u"The wood type represents pictograms for wood percussion instruments. The maraca and maracas values distinguish the one- and two-maraca versions of the pictogram. The vibraslap and castanets values are in addition to Stone's list."
wood._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=wood, enum_prefix=None)
wood.board_clapper = wood._CF_enumeration.addEnumeration(unicode_value=u'board clapper', tag=u'board_clapper')
wood.cabasa = wood._CF_enumeration.addEnumeration(unicode_value=u'cabasa', tag=u'cabasa')
wood.castanets = wood._CF_enumeration.addEnumeration(unicode_value=u'castanets', tag=u'castanets')
wood.claves = wood._CF_enumeration.addEnumeration(unicode_value=u'claves', tag=u'claves')
wood.guiro = wood._CF_enumeration.addEnumeration(unicode_value=u'guiro', tag=u'guiro')
wood.log_drum = wood._CF_enumeration.addEnumeration(unicode_value=u'log drum', tag=u'log_drum')
wood.maraca = wood._CF_enumeration.addEnumeration(unicode_value=u'maraca', tag=u'maraca')
wood.maracas = wood._CF_enumeration.addEnumeration(unicode_value=u'maracas', tag=u'maracas')
wood.ratchet = wood._CF_enumeration.addEnumeration(unicode_value=u'ratchet', tag=u'ratchet')
wood.sandpaper_blocks = wood._CF_enumeration.addEnumeration(unicode_value=u'sandpaper blocks', tag=u'sandpaper_blocks')
wood.slit_drum = wood._CF_enumeration.addEnumeration(unicode_value=u'slit drum', tag=u'slit_drum')
wood.temple_block = wood._CF_enumeration.addEnumeration(unicode_value=u'temple block', tag=u'temple_block')
wood.vibraslap = wood._CF_enumeration.addEnumeration(unicode_value=u'vibraslap', tag=u'vibraslap')
wood.wood_block = wood._CF_enumeration.addEnumeration(unicode_value=u'wood block', tag=u'wood_block')
wood._InitializeFacetMap(wood._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'wood', wood)

# Atomic simple type: distance-type
class distance_type (pyxb.binding.datatypes.token):

    """The distance-type defines what type of distance is being defined in a distance element. Values include beam and hyphen. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'distance-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1174, 1)
    _Documentation = u'The distance-type defines what type of distance is being defined in a distance element. Values include beam and hyphen. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.'
distance_type._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'distance-type', distance_type)

# Atomic simple type: line-width-type
class line_width_type (pyxb.binding.datatypes.token):

    """The line-width-type defines what type of line is being defined in a line-width element. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'line-width-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1181, 1)
    _Documentation = u'The line-width-type defines what type of line is being defined in a line-width element. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.'
line_width_type._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'line-width-type', line_width_type)

# Atomic simple type: margin-type
class margin_type (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The margin-type type specifies whether margins apply to even page, odd pages, or both."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'margin-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1188, 1)
    _Documentation = u'The margin-type type specifies whether margins apply to even page, odd pages, or both.'
margin_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=margin_type, enum_prefix=None)
margin_type.odd = margin_type._CF_enumeration.addEnumeration(unicode_value=u'odd', tag=u'odd')
margin_type.even = margin_type._CF_enumeration.addEnumeration(unicode_value=u'even', tag=u'even')
margin_type.both = margin_type._CF_enumeration.addEnumeration(unicode_value=u'both', tag=u'both')
margin_type._InitializeFacetMap(margin_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'margin-type', margin_type)

# Atomic simple type: millimeters
class millimeters (pyxb.binding.datatypes.decimal):

    """The millimeters type is a number representing millimeters. This is used in the scaling element to provide a default scaling from tenths to physical units."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'millimeters')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1199, 1)
    _Documentation = u'The millimeters type is a number representing millimeters. This is used in the scaling element to provide a default scaling from tenths to physical units.'
millimeters._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'millimeters', millimeters)

# Atomic simple type: note-size-type
class note_size_type (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The note-size-type type indicates the type of note being defined by a note-size element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'note-size-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1206, 1)
    _Documentation = u'The note-size-type type indicates the type of note being defined by a note-size element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size.'
note_size_type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=note_size_type, enum_prefix=None)
note_size_type.cue = note_size_type._CF_enumeration.addEnumeration(unicode_value=u'cue', tag=u'cue')
note_size_type.grace = note_size_type._CF_enumeration.addEnumeration(unicode_value=u'grace', tag=u'grace')
note_size_type.large = note_size_type._CF_enumeration.addEnumeration(unicode_value=u'large', tag=u'large')
note_size_type._InitializeFacetMap(note_size_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'note-size-type', note_size_type)

# Atomic simple type: accidental-value
class accidental_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The accidental-value type represents notated accidentals supported by MusicXML. In the MusicXML 2.0 DTD this was a string with values that could be included. The XSD strengthens the data typing to an enumerated list. The quarter- and three-quarters- accidentals are Tartini-style quarter-tone accidentals. The -down and -up accidentals are quarter-tone accidentals that include arrows pointing down or up. The slash- accidentals are used in Turkish classical music. The numbered sharp and flat accidentals are superscripted versions of the accidental signs, used in Turkish folk music. The sori and koron accidentals are microtonal sharp and flat accidentals used in Iranian and Persian music."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accidental-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1219, 1)
    _Documentation = u'The accidental-value type represents notated accidentals supported by MusicXML. In the MusicXML 2.0 DTD this was a string with values that could be included. The XSD strengthens the data typing to an enumerated list. The quarter- and three-quarters- accidentals are Tartini-style quarter-tone accidentals. The -down and -up accidentals are quarter-tone accidentals that include arrows pointing down or up. The slash- accidentals are used in Turkish classical music. The numbered sharp and flat accidentals are superscripted versions of the accidental signs, used in Turkish folk music. The sori and koron accidentals are microtonal sharp and flat accidentals used in Iranian and Persian music.'
accidental_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=accidental_value, enum_prefix=None)
accidental_value.sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp', tag=u'sharp')
accidental_value.natural = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'natural', tag=u'natural')
accidental_value.flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat', tag=u'flat')
accidental_value.double_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'double-sharp', tag=u'double_sharp')
accidental_value.sharp_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp-sharp', tag=u'sharp_sharp')
accidental_value.flat_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat-flat', tag=u'flat_flat')
accidental_value.natural_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'natural-sharp', tag=u'natural_sharp')
accidental_value.natural_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'natural-flat', tag=u'natural_flat')
accidental_value.quarter_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'quarter-flat', tag=u'quarter_flat')
accidental_value.quarter_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'quarter-sharp', tag=u'quarter_sharp')
accidental_value.three_quarters_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'three-quarters-flat', tag=u'three_quarters_flat')
accidental_value.three_quarters_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'three-quarters-sharp', tag=u'three_quarters_sharp')
accidental_value.sharp_down = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp-down', tag=u'sharp_down')
accidental_value.sharp_up = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp-up', tag=u'sharp_up')
accidental_value.natural_down = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'natural-down', tag=u'natural_down')
accidental_value.natural_up = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'natural-up', tag=u'natural_up')
accidental_value.flat_down = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat-down', tag=u'flat_down')
accidental_value.flat_up = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat-up', tag=u'flat_up')
accidental_value.triple_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'triple-sharp', tag=u'triple_sharp')
accidental_value.triple_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'triple-flat', tag=u'triple_flat')
accidental_value.slash_quarter_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'slash-quarter-sharp', tag=u'slash_quarter_sharp')
accidental_value.slash_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'slash-sharp', tag=u'slash_sharp')
accidental_value.slash_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'slash-flat', tag=u'slash_flat')
accidental_value.double_slash_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'double-slash-flat', tag=u'double_slash_flat')
accidental_value.sharp_1 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp-1', tag=u'sharp_1')
accidental_value.sharp_2 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp-2', tag=u'sharp_2')
accidental_value.sharp_3 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp-3', tag=u'sharp_3')
accidental_value.sharp_5 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sharp-5', tag=u'sharp_5')
accidental_value.flat_1 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat-1', tag=u'flat_1')
accidental_value.flat_2 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat-2', tag=u'flat_2')
accidental_value.flat_3 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat-3', tag=u'flat_3')
accidental_value.flat_4 = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'flat-4', tag=u'flat_4')
accidental_value.sori = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'sori', tag=u'sori')
accidental_value.koron = accidental_value._CF_enumeration.addEnumeration(unicode_value=u'koron', tag=u'koron')
accidental_value._InitializeFacetMap(accidental_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'accidental-value', accidental_value)

# Atomic simple type: arrow-direction
class arrow_direction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The arrow-direction type represents the direction in which an arrow points, using Unicode arrow terminology."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'arrow-direction')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1261, 1)
    _Documentation = u'The arrow-direction type represents the direction in which an arrow points, using Unicode arrow terminology.'
arrow_direction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=arrow_direction, enum_prefix=None)
arrow_direction.left = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
arrow_direction.up = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'up', tag=u'up')
arrow_direction.right = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
arrow_direction.down = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'down', tag=u'down')
arrow_direction.northwest = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'northwest', tag=u'northwest')
arrow_direction.northeast = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'northeast', tag=u'northeast')
arrow_direction.southeast = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'southeast', tag=u'southeast')
arrow_direction.southwest = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'southwest', tag=u'southwest')
arrow_direction.left_right = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'left right', tag=u'left_right')
arrow_direction.up_down = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'up down', tag=u'up_down')
arrow_direction.northwest_southeast = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'northwest southeast', tag=u'northwest_southeast')
arrow_direction.northeast_southwest = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'northeast southwest', tag=u'northeast_southwest')
arrow_direction.other = arrow_direction._CF_enumeration.addEnumeration(unicode_value=u'other', tag=u'other')
arrow_direction._InitializeFacetMap(arrow_direction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'arrow-direction', arrow_direction)

# Atomic simple type: arrow-style
class arrow_style (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The arrow-style type represents the style of an arrow, using Unicode arrow terminology. Filled and hollow arrows indicate polygonal single arrows. Paired arrows are duplicate single arrows in the same direction. Combined arrows apply to double direction arrows like left right, indicating that an arrow in one direction should be combined with an arrow in the other direction."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'arrow-style')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1282, 1)
    _Documentation = u'The arrow-style type represents the style of an arrow, using Unicode arrow terminology. Filled and hollow arrows indicate polygonal single arrows. Paired arrows are duplicate single arrows in the same direction. Combined arrows apply to double direction arrows like left right, indicating that an arrow in one direction should be combined with an arrow in the other direction.'
arrow_style._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=arrow_style, enum_prefix=None)
arrow_style.single = arrow_style._CF_enumeration.addEnumeration(unicode_value=u'single', tag=u'single')
arrow_style.double = arrow_style._CF_enumeration.addEnumeration(unicode_value=u'double', tag=u'double')
arrow_style.filled = arrow_style._CF_enumeration.addEnumeration(unicode_value=u'filled', tag=u'filled')
arrow_style.hollow = arrow_style._CF_enumeration.addEnumeration(unicode_value=u'hollow', tag=u'hollow')
arrow_style.paired = arrow_style._CF_enumeration.addEnumeration(unicode_value=u'paired', tag=u'paired')
arrow_style.combined = arrow_style._CF_enumeration.addEnumeration(unicode_value=u'combined', tag=u'combined')
arrow_style.other = arrow_style._CF_enumeration.addEnumeration(unicode_value=u'other', tag=u'other')
arrow_style._InitializeFacetMap(arrow_style._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'arrow-style', arrow_style)

# Atomic simple type: beam-value
class beam_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The beam-value type represents the type of beam associated with each of 8 beam levels (up to 1024th notes) available for each note."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'beam-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1297, 1)
    _Documentation = u'The beam-value type represents the type of beam associated with each of 8 beam levels (up to 1024th notes) available for each note.'
beam_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=beam_value, enum_prefix=None)
beam_value.begin = beam_value._CF_enumeration.addEnumeration(unicode_value=u'begin', tag=u'begin')
beam_value.continue_ = beam_value._CF_enumeration.addEnumeration(unicode_value=u'continue', tag=u'continue_')
beam_value.end = beam_value._CF_enumeration.addEnumeration(unicode_value=u'end', tag=u'end')
beam_value.forward_hook = beam_value._CF_enumeration.addEnumeration(unicode_value=u'forward hook', tag=u'forward_hook')
beam_value.backward_hook = beam_value._CF_enumeration.addEnumeration(unicode_value=u'backward hook', tag=u'backward_hook')
beam_value._InitializeFacetMap(beam_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'beam-value', beam_value)

# Atomic simple type: breath-mark-value
class breath_mark_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The breath-mark-value type represents the symbol used for a breath mark."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'breath-mark-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1310, 1)
    _Documentation = u'The breath-mark-value type represents the symbol used for a breath mark.'
breath_mark_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=breath_mark_value, enum_prefix=None)
breath_mark_value.emptyString = breath_mark_value._CF_enumeration.addEnumeration(unicode_value=u'', tag='emptyString')
breath_mark_value.comma = breath_mark_value._CF_enumeration.addEnumeration(unicode_value=u'comma', tag=u'comma')
breath_mark_value.tick = breath_mark_value._CF_enumeration.addEnumeration(unicode_value=u'tick', tag=u'tick')
breath_mark_value._InitializeFacetMap(breath_mark_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'breath-mark-value', breath_mark_value)

# Atomic simple type: circular-arrow
class circular_arrow (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The circular-arrow type represents the direction in which a circular arrow points, using Unicode arrow terminology."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'circular-arrow')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1321, 1)
    _Documentation = u'The circular-arrow type represents the direction in which a circular arrow points, using Unicode arrow terminology.'
circular_arrow._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=circular_arrow, enum_prefix=None)
circular_arrow.clockwise = circular_arrow._CF_enumeration.addEnumeration(unicode_value=u'clockwise', tag=u'clockwise')
circular_arrow.anticlockwise = circular_arrow._CF_enumeration.addEnumeration(unicode_value=u'anticlockwise', tag=u'anticlockwise')
circular_arrow._InitializeFacetMap(circular_arrow._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'circular-arrow', circular_arrow)

# Atomic simple type: fan
class fan (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The fan type represents the type of beam fanning present on a note, used to represent accelerandos and ritardandos."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fan')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1331, 1)
    _Documentation = u'The fan type represents the type of beam fanning present on a note, used to represent accelerandos and ritardandos.'
fan._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=fan, enum_prefix=None)
fan.accel = fan._CF_enumeration.addEnumeration(unicode_value=u'accel', tag=u'accel')
fan.rit = fan._CF_enumeration.addEnumeration(unicode_value=u'rit', tag=u'rit')
fan.none = fan._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
fan._InitializeFacetMap(fan._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'fan', fan)

# Atomic simple type: handbell-value
class handbell_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The handbell-value type represents the type of handbell technique being notated."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'handbell-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1342, 1)
    _Documentation = u'The handbell-value type represents the type of handbell technique being notated.'
handbell_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=handbell_value, enum_prefix=None)
handbell_value.damp = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'damp', tag=u'damp')
handbell_value.echo = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'echo', tag=u'echo')
handbell_value.gyro = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'gyro', tag=u'gyro')
handbell_value.hand_martellato = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'hand martellato', tag=u'hand_martellato')
handbell_value.mallet_lift = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'mallet lift', tag=u'mallet_lift')
handbell_value.mallet_table = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'mallet table', tag=u'mallet_table')
handbell_value.martellato = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'martellato', tag=u'martellato')
handbell_value.martellato_lift = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'martellato lift', tag=u'martellato_lift')
handbell_value.muted_martellato = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'muted martellato', tag=u'muted_martellato')
handbell_value.pluck_lift = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'pluck lift', tag=u'pluck_lift')
handbell_value.swing = handbell_value._CF_enumeration.addEnumeration(unicode_value=u'swing', tag=u'swing')
handbell_value._InitializeFacetMap(handbell_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'handbell-value', handbell_value)

# Atomic simple type: hole-closed-location
class hole_closed_location (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The hole-closed-location type indicates which portion of the hole is filled in when the corresponding hole-closed-value is half."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'hole-closed-location')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1361, 1)
    _Documentation = u'The hole-closed-location type indicates which portion of the hole is filled in when the corresponding hole-closed-value is half.'
hole_closed_location._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=hole_closed_location, enum_prefix=None)
hole_closed_location.right = hole_closed_location._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
hole_closed_location.bottom = hole_closed_location._CF_enumeration.addEnumeration(unicode_value=u'bottom', tag=u'bottom')
hole_closed_location.left = hole_closed_location._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
hole_closed_location.top = hole_closed_location._CF_enumeration.addEnumeration(unicode_value=u'top', tag=u'top')
hole_closed_location._InitializeFacetMap(hole_closed_location._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'hole-closed-location', hole_closed_location)

# Atomic simple type: hole-closed-value
class hole_closed_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The hole-closed-value type represents whether the hole is closed, open, or half-open."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'hole-closed-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1373, 1)
    _Documentation = u'The hole-closed-value type represents whether the hole is closed, open, or half-open.'
hole_closed_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=hole_closed_value, enum_prefix=None)
hole_closed_value.yes = hole_closed_value._CF_enumeration.addEnumeration(unicode_value=u'yes', tag=u'yes')
hole_closed_value.no = hole_closed_value._CF_enumeration.addEnumeration(unicode_value=u'no', tag=u'no')
hole_closed_value.half = hole_closed_value._CF_enumeration.addEnumeration(unicode_value=u'half', tag=u'half')
hole_closed_value._InitializeFacetMap(hole_closed_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'hole-closed-value', hole_closed_value)

# Atomic simple type: note-type-value
class note_type_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The note-type type is used for the MusicXML type element and represents the graphic note type, from 1024th (shortest) to maxima (longest)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'note-type-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1384, 1)
    _Documentation = u'The note-type type is used for the MusicXML type element and represents the graphic note type, from 1024th (shortest) to maxima (longest).'
note_type_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=note_type_value, enum_prefix=None)
note_type_value.n1024th = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'1024th', tag=u'n1024th')
note_type_value.n512th = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'512th', tag=u'n512th')
note_type_value.n256th = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'256th', tag=u'n256th')
note_type_value.n128th = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'128th', tag=u'n128th')
note_type_value.n64th = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'64th', tag=u'n64th')
note_type_value.n32nd = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'32nd', tag=u'n32nd')
note_type_value.n16th = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'16th', tag=u'n16th')
note_type_value.eighth = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'eighth', tag=u'eighth')
note_type_value.quarter = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'quarter', tag=u'quarter')
note_type_value.half = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'half', tag=u'half')
note_type_value.whole = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'whole', tag=u'whole')
note_type_value.breve = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'breve', tag=u'breve')
note_type_value.long = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'long', tag=u'long')
note_type_value.maxima = note_type_value._CF_enumeration.addEnumeration(unicode_value=u'maxima', tag=u'maxima')
note_type_value._InitializeFacetMap(note_type_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'note-type-value', note_type_value)

# Atomic simple type: notehead-value
class notehead_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
The notehead type indicates shapes other than the open and closed ovals associated with note durations. The values do, re, mi, fa, fa up, so, la, and ti correspond to Aikin's 7-shape system.  The fa up shape is typically used with upstems; the fa shape is typically used with downstems or no stems.

The arrow shapes differ from triangle and inverted triangle by being centered on the stem. Slashed and back slashed notes include both the normal notehead and a slash. The triangle shape has the tip of the triangle pointing up; the inverted triangle shape has the tip of the triangle pointing down. The left triangle shape is a right triangle with the hypotenuse facing up and to the left."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'notehead-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1406, 1)
    _Documentation = u"\nThe notehead type indicates shapes other than the open and closed ovals associated with note durations. The values do, re, mi, fa, fa up, so, la, and ti correspond to Aikin's 7-shape system.  The fa up shape is typically used with upstems; the fa shape is typically used with downstems or no stems.\n\nThe arrow shapes differ from triangle and inverted triangle by being centered on the stem. Slashed and back slashed notes include both the normal notehead and a slash. The triangle shape has the tip of the triangle pointing up; the inverted triangle shape has the tip of the triangle pointing down. The left triangle shape is a right triangle with the hypotenuse facing up and to the left."
notehead_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=notehead_value, enum_prefix=None)
notehead_value.slash = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'slash', tag=u'slash')
notehead_value.triangle = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'triangle', tag=u'triangle')
notehead_value.diamond = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'diamond', tag=u'diamond')
notehead_value.square = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'square', tag=u'square')
notehead_value.cross = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'cross', tag=u'cross')
notehead_value.x = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'x', tag=u'x')
notehead_value.circle_x = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'circle-x', tag=u'circle_x')
notehead_value.inverted_triangle = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'inverted triangle', tag=u'inverted_triangle')
notehead_value.arrow_down = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'arrow down', tag=u'arrow_down')
notehead_value.arrow_up = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'arrow up', tag=u'arrow_up')
notehead_value.slashed = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'slashed', tag=u'slashed')
notehead_value.back_slashed = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'back slashed', tag=u'back_slashed')
notehead_value.normal = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
notehead_value.cluster = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'cluster', tag=u'cluster')
notehead_value.circle_dot = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'circle dot', tag=u'circle_dot')
notehead_value.left_triangle = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'left triangle', tag=u'left_triangle')
notehead_value.rectangle = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'rectangle', tag=u'rectangle')
notehead_value.none = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
notehead_value.do = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'do', tag=u'do')
notehead_value.re = notehead_value._CF_enumeration.addEnumeration(unicode_value=u're', tag=u're')
notehead_value.mi = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'mi', tag=u'mi')
notehead_value.fa = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'fa', tag=u'fa')
notehead_value.fa_up = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'fa up', tag=u'fa_up')
notehead_value.so = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'so', tag=u'so')
notehead_value.la = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'la', tag=u'la')
notehead_value.ti = notehead_value._CF_enumeration.addEnumeration(unicode_value=u'ti', tag=u'ti')
notehead_value._InitializeFacetMap(notehead_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'notehead-value', notehead_value)

# Atomic simple type: octave
class octave (pyxb.binding.datatypes.integer):

    """Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'octave')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1443, 1)
    _Documentation = u'Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.'
octave._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=octave, value=pyxb.binding.datatypes.integer(9L))
octave._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=octave, value=pyxb.binding.datatypes.integer(0L))
octave._InitializeFacetMap(octave._CF_maxInclusive,
   octave._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'octave', octave)

# Atomic simple type: semitones
class semitones (pyxb.binding.datatypes.decimal):

    """The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'semitones')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1453, 1)
    _Documentation = u'The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.'
semitones._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'semitones', semitones)

# Atomic simple type: show-tuplet
class show_tuplet (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The show-tuplet type indicates whether to show a part of a tuplet relating to the tuplet-actual element, both the tuplet-actual and tuplet-normal elements, or neither."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'show-tuplet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1460, 1)
    _Documentation = u'The show-tuplet type indicates whether to show a part of a tuplet relating to the tuplet-actual element, both the tuplet-actual and tuplet-normal elements, or neither.'
show_tuplet._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=show_tuplet, enum_prefix=None)
show_tuplet.actual = show_tuplet._CF_enumeration.addEnumeration(unicode_value=u'actual', tag=u'actual')
show_tuplet.both = show_tuplet._CF_enumeration.addEnumeration(unicode_value=u'both', tag=u'both')
show_tuplet.none = show_tuplet._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
show_tuplet._InitializeFacetMap(show_tuplet._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'show-tuplet', show_tuplet)

# Atomic simple type: stem-value
class stem_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The stem type represents the notated stem direction."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stem-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1471, 1)
    _Documentation = u'The stem type represents the notated stem direction.'
stem_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stem_value, enum_prefix=None)
stem_value.down = stem_value._CF_enumeration.addEnumeration(unicode_value=u'down', tag=u'down')
stem_value.up = stem_value._CF_enumeration.addEnumeration(unicode_value=u'up', tag=u'up')
stem_value.double = stem_value._CF_enumeration.addEnumeration(unicode_value=u'double', tag=u'double')
stem_value.none = stem_value._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
stem_value._InitializeFacetMap(stem_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'stem-value', stem_value)

# Atomic simple type: step
class step (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The step type represents a step of the diatonic scale, represented using the English letters A through G."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'step')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1483, 1)
    _Documentation = u'The step type represents a step of the diatonic scale, represented using the English letters A through G.'
step._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=step, enum_prefix=None)
step.A = step._CF_enumeration.addEnumeration(unicode_value=u'A', tag=u'A')
step.B = step._CF_enumeration.addEnumeration(unicode_value=u'B', tag=u'B')
step.C = step._CF_enumeration.addEnumeration(unicode_value=u'C', tag=u'C')
step.D = step._CF_enumeration.addEnumeration(unicode_value=u'D', tag=u'D')
step.E = step._CF_enumeration.addEnumeration(unicode_value=u'E', tag=u'E')
step.F = step._CF_enumeration.addEnumeration(unicode_value=u'F', tag=u'F')
step.G = step._CF_enumeration.addEnumeration(unicode_value=u'G', tag=u'G')
step._InitializeFacetMap(step._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'step', step)

# Atomic simple type: syllabic
class syllabic (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Lyric hyphenation is indicated by the syllabic type. The single, begin, end, and middle values represent single-syllable words, word-beginning syllables, word-ending syllables, and mid-word syllables, respectively."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'syllabic')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1498, 1)
    _Documentation = u'Lyric hyphenation is indicated by the syllabic type. The single, begin, end, and middle values represent single-syllable words, word-beginning syllables, word-ending syllables, and mid-word syllables, respectively.'
syllabic._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=syllabic, enum_prefix=None)
syllabic.single = syllabic._CF_enumeration.addEnumeration(unicode_value=u'single', tag=u'single')
syllabic.begin = syllabic._CF_enumeration.addEnumeration(unicode_value=u'begin', tag=u'begin')
syllabic.end = syllabic._CF_enumeration.addEnumeration(unicode_value=u'end', tag=u'end')
syllabic.middle = syllabic._CF_enumeration.addEnumeration(unicode_value=u'middle', tag=u'middle')
syllabic._InitializeFacetMap(syllabic._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'syllabic', syllabic)

# Atomic simple type: tremolo-marks
class tremolo_marks (pyxb.binding.datatypes.integer):

    """The number of tremolo marks is represented by a number from 0 to 8: the same as beam-level with 0 added."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tremolo-marks')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1510, 1)
    _Documentation = u'The number of tremolo marks is represented by a number from 0 to 8: the same as beam-level with 0 added.'
tremolo_marks._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=tremolo_marks, value=pyxb.binding.datatypes.integer(8L))
tremolo_marks._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=tremolo_marks, value=pyxb.binding.datatypes.integer(0L))
tremolo_marks._InitializeFacetMap(tremolo_marks._CF_maxInclusive,
   tremolo_marks._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'tremolo-marks', tremolo_marks)

# Atomic simple type: group-barline-value
class group_barline_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The group-barline-value type indicates if the group should have common barlines."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'group-barline-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1522, 1)
    _Documentation = u'The group-barline-value type indicates if the group should have common barlines.'
group_barline_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=group_barline_value, enum_prefix=None)
group_barline_value.yes = group_barline_value._CF_enumeration.addEnumeration(unicode_value=u'yes', tag=u'yes')
group_barline_value.no = group_barline_value._CF_enumeration.addEnumeration(unicode_value=u'no', tag=u'no')
group_barline_value.Mensurstrich = group_barline_value._CF_enumeration.addEnumeration(unicode_value=u'Mensurstrich', tag=u'Mensurstrich')
group_barline_value._InitializeFacetMap(group_barline_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'group-barline-value', group_barline_value)

# Atomic simple type: group-symbol-value
class group_symbol_value (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The group-symbol-value type indicates how the symbol for a group is indicated in the score. The default value is none."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'group-symbol-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1533, 1)
    _Documentation = u'The group-symbol-value type indicates how the symbol for a group is indicated in the score. The default value is none.'
group_symbol_value._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=group_symbol_value, enum_prefix=None)
group_symbol_value.none = group_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
group_symbol_value.brace = group_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'brace', tag=u'brace')
group_symbol_value.line = group_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'line', tag=u'line')
group_symbol_value.bracket = group_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'bracket', tag=u'bracket')
group_symbol_value.square = group_symbol_value._CF_enumeration.addEnumeration(unicode_value=u'square', tag=u'square')
group_symbol_value._InitializeFacetMap(group_symbol_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'group-symbol-value', group_symbol_value)

# Union simple type: font-size
# superclasses pyxb.binding.datatypes.anySimpleType
class font_size (pyxb.binding.basis.STD_union):

    """The font-size can be one of the CSS font sizes or a numeric point size."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'font-size')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 120, 1)
    _Documentation = u'The font-size can be one of the CSS font sizes or a numeric point size.'

    _MemberTypes = ( pyxb.binding.datatypes.decimal, css_font_size, )
font_size._CF_pattern = pyxb.binding.facets.CF_pattern()
font_size._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=font_size)
font_size.xx_small = u'xx-small'                  # originally css_font_size.xx_small
font_size.x_small = u'x-small'                    # originally css_font_size.x_small
font_size.small = u'small'                        # originally css_font_size.small
font_size.medium = u'medium'                      # originally css_font_size.medium
font_size.large = u'large'                        # originally css_font_size.large
font_size.x_large = u'x-large'                    # originally css_font_size.x_large
font_size.xx_large = u'xx-large'                  # originally css_font_size.xx_large
font_size._InitializeFacetMap(font_size._CF_pattern,
   font_size._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'font-size', font_size)

# Union simple type: number-or-normal
# superclasses pyxb.binding.datatypes.anySimpleType
class number_or_normal (pyxb.binding.basis.STD_union):

    """The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'number-or-normal')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 272, 1)
    _Documentation = u'The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.'

    _MemberTypes = ( pyxb.binding.datatypes.decimal, STD_ANON, )
number_or_normal._CF_pattern = pyxb.binding.facets.CF_pattern()
number_or_normal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=number_or_normal)
number_or_normal.normal = u'normal'               # originally STD_ANON.normal
number_or_normal._InitializeFacetMap(number_or_normal._CF_pattern,
   number_or_normal._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'number-or-normal', number_or_normal)

# Atomic simple type: positive-divisions
class positive_divisions (divisions):

    """The positive-divisions type restricts divisions values to positive numbers."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'positive-divisions')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 314, 1)
    _Documentation = u'The positive-divisions type restricts divisions values to positive numbers.'
positive_divisions._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=divisions, value=pyxb.binding.datatypes.anySimpleType(u'0'))
positive_divisions._InitializeFacetMap(positive_divisions._CF_minExclusive)
Namespace.addCategoryObject('typeBinding', u'positive-divisions', positive_divisions)

# Union simple type: positive-integer-or-empty
# superclasses pyxb.binding.datatypes.anySimpleType
class positive_integer_or_empty (pyxb.binding.basis.STD_union):

    """The positive-integer-or-empty values can be either a positive integer or an empty string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'positive-integer-or-empty')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 323, 1)
    _Documentation = u'The positive-integer-or-empty values can be either a positive integer or an empty string.'

    _MemberTypes = ( pyxb.binding.datatypes.positiveInteger, STD_ANON_, )
positive_integer_or_empty._CF_pattern = pyxb.binding.facets.CF_pattern()
positive_integer_or_empty._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=positive_integer_or_empty)
positive_integer_or_empty.emptyString = u''       # originally STD_ANON_.emptyString
positive_integer_or_empty._InitializeFacetMap(positive_integer_or_empty._CF_pattern,
   positive_integer_or_empty._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'positive-integer-or-empty', positive_integer_or_empty)

# Union simple type: yes-no-number
# superclasses pyxb.binding.datatypes.anySimpleType
class yes_no_number (pyxb.binding.basis.STD_union):

    """The yes-no-number type is used for attributes that can be either boolean or numeric values."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'yes-no-number')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 549, 1)
    _Documentation = u'The yes-no-number type is used for attributes that can be either boolean or numeric values.'

    _MemberTypes = ( yes_no, pyxb.binding.datatypes.decimal, )
yes_no_number._CF_pattern = pyxb.binding.facets.CF_pattern()
yes_no_number._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=yes_no_number)
yes_no_number.yes = u'yes'                        # originally yes_no.yes
yes_no_number.no = u'no'                          # originally yes_no.no
yes_no_number._InitializeFacetMap(yes_no_number._CF_pattern,
   yes_no_number._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'yes-no-number', yes_no_number)

# Complex type empty with content type EMPTY
class empty (pyxb.binding.basis.complexTypeDefinition):
    """The empty type represents an empty element with no attributes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2029, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'empty', empty)


# Complex type midi-instrument with content type ELEMENT_ONLY
class midi_instrument (pyxb.binding.basis.complexTypeDefinition):
    """The midi-instrument type defines MIDI 1.0 instrument playback. The midi-instrument element can be a part of either the score-instrument element at the start of a part, or the sound element within a part. The id attribute refers to the score-instrument affected by the change."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'midi-instrument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2157, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element midi-channel uses Python identifier midi_channel
    __midi_channel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-channel'), 'midi_channel', '__AbsentNamespace0_midi_instrument_midi_channel', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2162, 3), )

    
    midi_channel = property(__midi_channel.value, __midi_channel.set, None, u'The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 16.')

    
    # Element midi-name uses Python identifier midi_name
    __midi_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-name'), 'midi_name', '__AbsentNamespace0_midi_instrument_midi_name', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2167, 3), )

    
    midi_name = property(__midi_name.value, __midi_name.set, None, u'The midi-name element corresponds to a ProgramName meta-event within a Standard MIDI File.')

    
    # Element midi-bank uses Python identifier midi_bank
    __midi_bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-bank'), 'midi_bank', '__AbsentNamespace0_midi_instrument_midi_bank', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2172, 3), )

    
    midi_bank = property(__midi_bank.value, __midi_bank.set, None, u'The midi-bank element specified a MIDI 1.0 bank number ranging from 1 to 16,384.')

    
    # Element midi-program uses Python identifier midi_program
    __midi_program = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-program'), 'midi_program', '__AbsentNamespace0_midi_instrument_midi_program', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2177, 3), )

    
    midi_program = property(__midi_program.value, __midi_program.set, None, u'The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 128.')

    
    # Element midi-unpitched uses Python identifier midi_unpitched
    __midi_unpitched = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-unpitched'), 'midi_unpitched', '__AbsentNamespace0_midi_instrument_midi_unpitched', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2182, 3), )

    
    midi_unpitched = property(__midi_unpitched.value, __midi_unpitched.set, None, u'For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion. Note that MIDI 1.0 note numbers are generally specified from 0 to 127 rather than the 1 to 128 numbering used in this element.')

    
    # Element volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'volume'), 'volume', '__AbsentNamespace0_midi_instrument_volume', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2187, 3), )

    
    volume = property(__volume.value, __volume.set, None, u'The volume element value is a percentage of the maximum ranging from 0 to 100, with decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 channel volume controller.')

    
    # Element pan uses Python identifier pan
    __pan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pan'), 'pan', '__AbsentNamespace0_midi_instrument_pan', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2192, 3), )

    
    pan = property(__pan.value, __pan.set, None, u'The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener.')

    
    # Element elevation uses Python identifier elevation
    __elevation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'elevation'), 'elevation', '__AbsentNamespace0_midi_instrument_elevation', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2197, 3), )

    
    elevation = property(__elevation.value, __elevation.set, None, u'The elevation and pan elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For elevation, 0 is level with the listener, 90 is directly above, and -90 is directly below.')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_midi_instrument_id', pyxb.binding.datatypes.IDREF, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2203, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2203, 2)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __midi_channel.name() : __midi_channel,
        __midi_name.name() : __midi_name,
        __midi_bank.name() : __midi_bank,
        __midi_program.name() : __midi_program,
        __midi_unpitched.name() : __midi_unpitched,
        __volume.name() : __volume,
        __pan.name() : __pan,
        __elevation.name() : __elevation
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'midi-instrument', midi_instrument)


# Complex type other-play with content type SIMPLE
class other_play (pyxb.binding.basis.complexTypeDefinition):
    """The other-play element represents other types of playback. The required type attribute indicates the type of playback to which the element content applies."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'other-play')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2219, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_other_play_type', pyxb.binding.datatypes.token, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2225, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2225, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'other-play', other_play)


# Complex type play with content type ELEMENT_ONLY
class play (pyxb.binding.basis.complexTypeDefinition):
    """The play type, new in Version 3.0, specifies playback techniques to be used in conjunction with the instrument-sound element. When used as part of a sound element, it applies to all notes going forward in score order. In multi-instrument parts, the affected instrument should be specified using the id attribute. When used as part of a note element, it applies to the current note only."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'play')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2230, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ipa uses Python identifier ipa
    __ipa = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ipa'), 'ipa', '__AbsentNamespace0_play_ipa', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2236, 4), )

    
    ipa = property(__ipa.value, __ipa.set, None, u'The ipa element represents International Phonetic Alphabet (IPA) sounds for vocal music. String content is limited to IPA 2005 symbols represented in Unicode 6.0.')

    
    # Element mute uses Python identifier mute
    __mute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mute'), 'mute', '__AbsentNamespace0_play_mute', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2241, 4), )

    
    mute = property(__mute.value, __mute.set, None, None)

    
    # Element semi-pitched uses Python identifier semi_pitched
    __semi_pitched = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'semi-pitched'), 'semi_pitched', '__AbsentNamespace0_play_semi_pitched', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2242, 4), )

    
    semi_pitched = property(__semi_pitched.value, __semi_pitched.set, None, None)

    
    # Element other-play uses Python identifier other_play
    __other_play = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-play'), 'other_play', '__AbsentNamespace0_play_other_play', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2243, 4), )

    
    other_play = property(__other_play.value, __other_play.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_play_id', pyxb.binding.datatypes.IDREF)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2246, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2246, 2)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __ipa.name() : __ipa,
        __mute.name() : __mute,
        __semi_pitched.name() : __semi_pitched,
        __other_play.name() : __other_play
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'play', play)


# Complex type typed-text with content type SIMPLE
class typed_text (pyxb.binding.basis.complexTypeDefinition):
    """The typed-text type represents a text element with a type attributes."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'typed-text')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2261, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_typed_text_type', pyxb.binding.datatypes.token)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2267, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2267, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'typed-text', typed_text)


# Complex type attributes with content type ELEMENT_ONLY
class attributes (pyxb.binding.basis.complexTypeDefinition):
    """The attributes element contains musical information that typically changes on measure boundaries. This includes key and time signatures, clefs, transpositions, and staving. When attributes are changed mid-measure, it affects the music in score order, not in MusicXML document order."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attributes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2286, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element divisions uses Python identifier divisions
    __divisions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'divisions'), 'divisions', '__AbsentNamespace0_attributes_divisions', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2293, 3), )

    
    divisions = property(__divisions.value, __divisions.set, None, u"Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.")

    
    # Element key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'key'), 'key', '__AbsentNamespace0_attributes_key', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2299, 3), )

    
    key = property(__key.value, __key.set, None, u'The key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.')

    
    # Element time uses Python identifier time
    __time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'time'), 'time', '__AbsentNamespace0_attributes_time', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2305, 3), )

    
    time = property(__time.value, __time.set, None, u'Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.')

    
    # Element staves uses Python identifier staves
    __staves = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staves'), 'staves', '__AbsentNamespace0_attributes_staves', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2311, 3), )

    
    staves = property(__staves.value, __staves.set, None, u'The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.')

    
    # Element part-symbol uses Python identifier part_symbol
    __part_symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-symbol'), 'part_symbol', '__AbsentNamespace0_attributes_part_symbol', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2317, 3), )

    
    part_symbol = property(__part_symbol.value, __part_symbol.set, None, u'The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score.')

    
    # Element instruments uses Python identifier instruments
    __instruments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'instruments'), 'instruments', '__AbsentNamespace0_attributes_instruments', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2323, 3), )

    
    instruments = property(__instruments.value, __instruments.set, None, u'The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed.')

    
    # Element clef uses Python identifier clef
    __clef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'clef'), 'clef', '__AbsentNamespace0_attributes_clef', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2329, 3), )

    
    clef = property(__clef.value, __clef.set, None, u'Clefs are represented by a combination of sign, line, and clef-octave-change elements.')

    
    # Element staff-details uses Python identifier staff_details
    __staff_details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-details'), 'staff_details', '__AbsentNamespace0_attributes_staff_details', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2335, 3), )

    
    staff_details = property(__staff_details.value, __staff_details.set, None, u'The staff-details element is used to indicate different types of staves.')

    
    # Element transpose uses Python identifier transpose
    __transpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'transpose'), 'transpose', '__AbsentNamespace0_attributes_transpose', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2341, 3), )

    
    transpose = property(__transpose.value, __transpose.set, None, u'If the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type.')

    
    # Element directive uses Python identifier directive
    __directive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'directive'), 'directive', '__AbsentNamespace0_attributes_directive', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2347, 3), )

    
    directive = property(__directive.value, __directive.set, None, u'Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element has been deprecated in Version 2.0 in favor of the directive attribute for direction elements. Language names come from ISO 639, with optional country subcodes from ISO 3166.')

    
    # Element measure-style uses Python identifier measure_style
    __measure_style = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'measure-style'), 'measure_style', '__AbsentNamespace0_attributes_measure_style', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2361, 3), )

    
    measure_style = property(__measure_style.value, __measure_style.set, None, u'A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.')

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_attributes_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_attributes_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    _ElementMap.update({
        __divisions.name() : __divisions,
        __key.name() : __key,
        __time.name() : __time,
        __staves.name() : __staves,
        __part_symbol.name() : __part_symbol,
        __instruments.name() : __instruments,
        __clef.name() : __clef,
        __staff_details.name() : __staff_details,
        __transpose.name() : __transpose,
        __directive.name() : __directive,
        __measure_style.name() : __measure_style,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'attributes', attributes)


# Complex type bass with content type ELEMENT_ONLY
class bass (pyxb.binding.basis.complexTypeDefinition):
    """The bass type is used to indicate a bass note in popular music chord symbols, e.g. G/C. It is generally not used in functional harmony, as inversion is generally not used in pop chord symbols. As with root, it is divided into step and alter elements, similar to pitches."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bass')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2733, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element bass-step uses Python identifier bass_step
    __bass_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bass-step'), 'bass_step', '__AbsentNamespace0_bass_bass_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2738, 3), )

    
    bass_step = property(__bass_step.value, __bass_step.set, None, None)

    
    # Element bass-alter uses Python identifier bass_alter
    __bass_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bass-alter'), 'bass_alter', '__AbsentNamespace0_bass_bass_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2739, 3), )

    
    bass_alter = property(__bass_alter.value, __bass_alter.set, None, None)

    _ElementMap.update({
        __bass_step.name() : __bass_step,
        __bass_alter.name() : __bass_alter
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'bass', bass)


# Complex type direction-type with content type ELEMENT_ONLY
class direction_type (pyxb.binding.basis.complexTypeDefinition):
    """Textual direction types may have more than 1 component due to multiple fonts. The dynamics element may also be used in the notations element. Attribute groups related to print suggestions apply to the individual direction-type, not to the overall direction."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'direction-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2872, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element rehearsal uses Python identifier rehearsal
    __rehearsal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'rehearsal'), 'rehearsal', '__AbsentNamespace0_direction_type_rehearsal', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2877, 3), )

    
    rehearsal = property(__rehearsal.value, __rehearsal.set, None, u'The rehearsal type specifies a rehearsal mark. Language is Italian ("it") by default. Enclosure is square by default. Left justification is assumed if not specified.')

    
    # Element segno uses Python identifier segno
    __segno = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'segno'), 'segno', '__AbsentNamespace0_direction_type_segno', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2882, 3), )

    
    segno = property(__segno.value, __segno.set, None, u'The segno element is the visual indicator of a segno sign. A sound element is needed to guide playback applications reliably.')

    
    # Element words uses Python identifier words
    __words = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'words'), 'words', '__AbsentNamespace0_direction_type_words', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2887, 3), )

    
    words = property(__words.value, __words.set, None, u'The words element specifies a standard text direction. Left justification is assumed if not specified. Language is Italian ("it") by default. Enclosure is none by default.')

    
    # Element coda uses Python identifier coda
    __coda = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'coda'), 'coda', '__AbsentNamespace0_direction_type_coda', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2892, 3), )

    
    coda = property(__coda.value, __coda.set, None, u'The coda element is the visual indicator of a coda sign. A sound element is needed to guide playback applications reliably.')

    
    # Element wedge uses Python identifier wedge
    __wedge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'wedge'), 'wedge', '__AbsentNamespace0_direction_type_wedge', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2897, 3), )

    
    wedge = property(__wedge.value, __wedge.set, None, None)

    
    # Element dynamics uses Python identifier dynamics
    __dynamics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'dynamics'), 'dynamics', '__AbsentNamespace0_direction_type_dynamics', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2898, 3), )

    
    dynamics = property(__dynamics.value, __dynamics.set, None, None)

    
    # Element dashes uses Python identifier dashes
    __dashes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'dashes'), 'dashes', '__AbsentNamespace0_direction_type_dashes', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2899, 3), )

    
    dashes = property(__dashes.value, __dashes.set, None, None)

    
    # Element bracket uses Python identifier bracket
    __bracket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bracket'), 'bracket', '__AbsentNamespace0_direction_type_bracket', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2900, 3), )

    
    bracket = property(__bracket.value, __bracket.set, None, None)

    
    # Element pedal uses Python identifier pedal
    __pedal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pedal'), 'pedal', '__AbsentNamespace0_direction_type_pedal', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2901, 3), )

    
    pedal = property(__pedal.value, __pedal.set, None, None)

    
    # Element metronome uses Python identifier metronome
    __metronome = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metronome'), 'metronome', '__AbsentNamespace0_direction_type_metronome', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2902, 3), )

    
    metronome = property(__metronome.value, __metronome.set, None, None)

    
    # Element octave-shift uses Python identifier octave_shift
    __octave_shift = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'octave-shift'), 'octave_shift', '__AbsentNamespace0_direction_type_octave_shift', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2903, 3), )

    
    octave_shift = property(__octave_shift.value, __octave_shift.set, None, None)

    
    # Element harp-pedals uses Python identifier harp_pedals
    __harp_pedals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'harp-pedals'), 'harp_pedals', '__AbsentNamespace0_direction_type_harp_pedals', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2904, 3), )

    
    harp_pedals = property(__harp_pedals.value, __harp_pedals.set, None, None)

    
    # Element damp uses Python identifier damp
    __damp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'damp'), 'damp', '__AbsentNamespace0_direction_type_damp', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2905, 3), )

    
    damp = property(__damp.value, __damp.set, None, u'The damp element specifies a harp damping mark.')

    
    # Element damp-all uses Python identifier damp_all
    __damp_all = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'damp-all'), 'damp_all', '__AbsentNamespace0_direction_type_damp_all', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2910, 3), )

    
    damp_all = property(__damp_all.value, __damp_all.set, None, u'The damp-all element specifies a harp damping mark for all strings.')

    
    # Element eyeglasses uses Python identifier eyeglasses
    __eyeglasses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eyeglasses'), 'eyeglasses', '__AbsentNamespace0_direction_type_eyeglasses', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2915, 3), )

    
    eyeglasses = property(__eyeglasses.value, __eyeglasses.set, None, u'The eyeglasses element specifies the eyeglasses symbol, common in commercial music.')

    
    # Element string-mute uses Python identifier string_mute
    __string_mute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'string-mute'), 'string_mute', '__AbsentNamespace0_direction_type_string_mute', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2920, 3), )

    
    string_mute = property(__string_mute.value, __string_mute.set, None, None)

    
    # Element scordatura uses Python identifier scordatura
    __scordatura = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'scordatura'), 'scordatura', '__AbsentNamespace0_direction_type_scordatura', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2921, 3), )

    
    scordatura = property(__scordatura.value, __scordatura.set, None, None)

    
    # Element image uses Python identifier image
    __image = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'image'), 'image', '__AbsentNamespace0_direction_type_image', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2922, 3), )

    
    image = property(__image.value, __image.set, None, None)

    
    # Element principal-voice uses Python identifier principal_voice
    __principal_voice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'principal-voice'), 'principal_voice', '__AbsentNamespace0_direction_type_principal_voice', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2923, 3), )

    
    principal_voice = property(__principal_voice.value, __principal_voice.set, None, None)

    
    # Element accordion-registration uses Python identifier accordion_registration
    __accordion_registration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accordion-registration'), 'accordion_registration', '__AbsentNamespace0_direction_type_accordion_registration', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2924, 3), )

    
    accordion_registration = property(__accordion_registration.value, __accordion_registration.set, None, None)

    
    # Element percussion uses Python identifier percussion
    __percussion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'percussion'), 'percussion', '__AbsentNamespace0_direction_type_percussion', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2925, 3), )

    
    percussion = property(__percussion.value, __percussion.set, None, None)

    
    # Element other-direction uses Python identifier other_direction
    __other_direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-direction'), 'other_direction', '__AbsentNamespace0_direction_type_other_direction', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2926, 3), )

    
    other_direction = property(__other_direction.value, __other_direction.set, None, None)

    _ElementMap.update({
        __rehearsal.name() : __rehearsal,
        __segno.name() : __segno,
        __words.name() : __words,
        __coda.name() : __coda,
        __wedge.name() : __wedge,
        __dynamics.name() : __dynamics,
        __dashes.name() : __dashes,
        __bracket.name() : __bracket,
        __pedal.name() : __pedal,
        __metronome.name() : __metronome,
        __octave_shift.name() : __octave_shift,
        __harp_pedals.name() : __harp_pedals,
        __damp.name() : __damp,
        __damp_all.name() : __damp_all,
        __eyeglasses.name() : __eyeglasses,
        __string_mute.name() : __string_mute,
        __scordatura.name() : __scordatura,
        __image.name() : __image,
        __principal_voice.name() : __principal_voice,
        __accordion_registration.name() : __accordion_registration,
        __percussion.name() : __percussion,
        __other_direction.name() : __other_direction
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'direction-type', direction_type)


# Complex type feature with content type SIMPLE
class feature (pyxb.binding.basis.complexTypeDefinition):
    """The feature type is a part of the grouping element used for musical analysis. The type attribute represents the type of the feature and the element content represents its value. This type is flexible to allow for different analyses."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'feature')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2930, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_feature_type', pyxb.binding.datatypes.token)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2936, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2936, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'feature', feature)


# Complex type frame-note with content type ELEMENT_ONLY
class frame_note (pyxb.binding.basis.complexTypeDefinition):
    """The frame-note type represents each note included in the frame. An open string will have a fret value of 0, while a muted string will not be associated with a frame-note element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'frame-note')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2980, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element string uses Python identifier string
    __string = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'string'), 'string', '__AbsentNamespace0_frame_note_string', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2985, 3), )

    
    string = property(__string.value, __string.set, None, None)

    
    # Element fret uses Python identifier fret
    __fret = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fret'), 'fret', '__AbsentNamespace0_frame_note_fret', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2986, 3), )

    
    fret = property(__fret.value, __fret.set, None, None)

    
    # Element fingering uses Python identifier fingering
    __fingering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fingering'), 'fingering', '__AbsentNamespace0_frame_note_fingering', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2987, 3), )

    
    fingering = property(__fingering.value, __fingering.set, None, None)

    
    # Element barre uses Python identifier barre
    __barre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'barre'), 'barre', '__AbsentNamespace0_frame_note_barre', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2988, 3), )

    
    barre = property(__barre.value, __barre.set, None, None)

    _ElementMap.update({
        __string.name() : __string,
        __fret.name() : __fret,
        __fingering.name() : __fingering,
        __barre.name() : __barre
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'frame-note', frame_note)


# Complex type metronome-note with content type ELEMENT_ONLY
class metronome_note (pyxb.binding.basis.complexTypeDefinition):
    """The metronome-note type defines the appearance of a note within a metric relationship mark."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'metronome-note')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3139, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element metronome-type uses Python identifier metronome_type
    __metronome_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metronome-type'), 'metronome_type', '__AbsentNamespace0_metronome_note_metronome_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3144, 3), )

    
    metronome_type = property(__metronome_type.value, __metronome_type.set, None, u'The metronome-type element works like the type element in defining metric relationships.')

    
    # Element metronome-dot uses Python identifier metronome_dot
    __metronome_dot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metronome-dot'), 'metronome_dot', '__AbsentNamespace0_metronome_note_metronome_dot', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3149, 3), )

    
    metronome_dot = property(__metronome_dot.value, __metronome_dot.set, None, u'The metronome-dot element works like the dot element in defining metric relationships.')

    
    # Element metronome-beam uses Python identifier metronome_beam
    __metronome_beam = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metronome-beam'), 'metronome_beam', '__AbsentNamespace0_metronome_note_metronome_beam', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3154, 3), )

    
    metronome_beam = property(__metronome_beam.value, __metronome_beam.set, None, None)

    
    # Element metronome-tuplet uses Python identifier metronome_tuplet
    __metronome_tuplet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metronome-tuplet'), 'metronome_tuplet', '__AbsentNamespace0_metronome_note_metronome_tuplet', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3155, 3), )

    
    metronome_tuplet = property(__metronome_tuplet.value, __metronome_tuplet.set, None, None)

    _ElementMap.update({
        __metronome_type.name() : __metronome_type,
        __metronome_dot.name() : __metronome_dot,
        __metronome_beam.name() : __metronome_beam,
        __metronome_tuplet.name() : __metronome_tuplet
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'metronome-note', metronome_note)


# Complex type pedal-tuning with content type ELEMENT_ONLY
class pedal_tuning (pyxb.binding.basis.complexTypeDefinition):
    """The pedal-tuning type specifies the tuning of a single harp pedal."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pedal-tuning')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pedal-step uses Python identifier pedal_step
    __pedal_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pedal-step'), 'pedal_step', '__AbsentNamespace0_pedal_tuning_pedal_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3221, 3), )

    
    pedal_step = property(__pedal_step.value, __pedal_step.set, None, u'The pedal-step element defines the pitch step for a single harp pedal.')

    
    # Element pedal-alter uses Python identifier pedal_alter
    __pedal_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pedal-alter'), 'pedal_alter', '__AbsentNamespace0_pedal_tuning_pedal_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3226, 3), )

    
    pedal_alter = property(__pedal_alter.value, __pedal_alter.set, None, u'The pedal-alter element defines the chromatic alteration for a single harp pedal.')

    _ElementMap.update({
        __pedal_step.name() : __pedal_step,
        __pedal_alter.name() : __pedal_alter
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'pedal-tuning', pedal_tuning)


# Complex type root with content type ELEMENT_ONLY
class root (pyxb.binding.basis.complexTypeDefinition):
    """The root type indicates a pitch like C, D, E vs. a function indication like I, II, III. It is used with chord symbols in popular music. The root element has a root-step and optional root-alter element similar to the step and alter elements, but renamed to distinguish the different musical meanings."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'root')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3295, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element root-step uses Python identifier root_step
    __root_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'root-step'), 'root_step', '__AbsentNamespace0_root_root_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3300, 3), )

    
    root_step = property(__root_step.value, __root_step.set, None, None)

    
    # Element root-alter uses Python identifier root_alter
    __root_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'root-alter'), 'root_alter', '__AbsentNamespace0_root_root_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3301, 3), )

    
    root_alter = property(__root_alter.value, __root_alter.set, None, None)

    _ElementMap.update({
        __root_step.name() : __root_step,
        __root_alter.name() : __root_alter
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'root', root)


# Complex type scordatura with content type ELEMENT_ONLY
class scordatura (pyxb.binding.basis.complexTypeDefinition):
    """Scordatura string tunings are represented by a series of accord elements, similar to the staff-tuning elements. Strings are numbered from high to low."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'scordatura')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3330, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accord uses Python identifier accord
    __accord = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accord'), 'accord', '__AbsentNamespace0_scordatura_accord', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3335, 3), )

    
    accord = property(__accord.value, __accord.set, None, None)

    _ElementMap.update({
        __accord.name() : __accord
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'scordatura', scordatura)


# Complex type encoding with content type ELEMENT_ONLY
class encoding (pyxb.binding.basis.complexTypeDefinition):
    """The encoding element contains information about who did the digital encoding, when, with what software, and in what aspects. Standard type values for the encoder element are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple encoder elements."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'encoding')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3431, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element encoding-date uses Python identifier encoding_date
    __encoding_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'encoding-date'), 'encoding_date', '__AbsentNamespace0_encoding_encoding_date', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3436, 3), )

    
    encoding_date = property(__encoding_date.value, __encoding_date.set, None, None)

    
    # Element encoder uses Python identifier encoder
    __encoder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'encoder'), 'encoder', '__AbsentNamespace0_encoding_encoder', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3437, 3), )

    
    encoder = property(__encoder.value, __encoder.set, None, None)

    
    # Element software uses Python identifier software
    __software = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'software'), 'software', '__AbsentNamespace0_encoding_software', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3438, 3), )

    
    software = property(__software.value, __software.set, None, None)

    
    # Element encoding-description uses Python identifier encoding_description
    __encoding_description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'encoding-description'), 'encoding_description', '__AbsentNamespace0_encoding_encoding_description', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3439, 3), )

    
    encoding_description = property(__encoding_description.value, __encoding_description.set, None, None)

    
    # Element supports uses Python identifier supports
    __supports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'supports'), 'supports', '__AbsentNamespace0_encoding_supports', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3440, 3), )

    
    supports = property(__supports.value, __supports.set, None, None)

    _ElementMap.update({
        __encoding_date.name() : __encoding_date,
        __encoder.name() : __encoder,
        __software.name() : __software,
        __encoding_description.name() : __encoding_description,
        __supports.name() : __supports
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'encoding', encoding)


# Complex type identification with content type ELEMENT_ONLY
class identification (pyxb.binding.basis.complexTypeDefinition):
    """Identification contains basic metadata about the score. It includes the information in MuseData headers that may apply at a score-wide, movement-wide, or part-wide level. The creator, rights, source, and relation elements are based on Dublin Core."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'identification')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3444, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__AbsentNamespace0_identification_creator', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3449, 3), )

    
    creator = property(__creator.value, __creator.set, None, u'The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.')

    
    # Element rights uses Python identifier rights
    __rights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'rights'), 'rights', '__AbsentNamespace0_identification_rights', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3454, 3), )

    
    rights = property(__rights.value, __rights.set, None, u'The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights tags with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.')

    
    # Element encoding uses Python identifier encoding
    __encoding = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'encoding'), 'encoding', '__AbsentNamespace0_identification_encoding', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3459, 3), )

    
    encoding = property(__encoding.value, __encoding.set, None, None)

    
    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'source'), 'source', '__AbsentNamespace0_identification_source', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3460, 3), )

    
    source = property(__source.value, __source.set, None, u'The source for the music that is encoded. This is similar to the Dublin Core source element.')

    
    # Element relation uses Python identifier relation
    __relation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'relation'), 'relation', '__AbsentNamespace0_identification_relation', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3465, 3), )

    
    relation = property(__relation.value, __relation.set, None, u'A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used.')

    
    # Element miscellaneous uses Python identifier miscellaneous
    __miscellaneous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'miscellaneous'), 'miscellaneous', '__AbsentNamespace0_identification_miscellaneous', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3470, 3), )

    
    miscellaneous = property(__miscellaneous.value, __miscellaneous.set, None, None)

    _ElementMap.update({
        __creator.name() : __creator,
        __rights.name() : __rights,
        __encoding.name() : __encoding,
        __source.name() : __source,
        __relation.name() : __relation,
        __miscellaneous.name() : __miscellaneous
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'identification', identification)


# Complex type miscellaneous with content type ELEMENT_ONLY
class miscellaneous (pyxb.binding.basis.complexTypeDefinition):
    """If a program has other metadata not yet supported in the MusicXML format, it can go in the miscellaneous element. The miscellaneous type puts each separate part of metadata into its own miscellaneous-field type."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'miscellaneous')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3474, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element miscellaneous-field uses Python identifier miscellaneous_field
    __miscellaneous_field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'miscellaneous-field'), 'miscellaneous_field', '__AbsentNamespace0_miscellaneous_miscellaneous_field', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3479, 3), )

    
    miscellaneous_field = property(__miscellaneous_field.value, __miscellaneous_field.set, None, None)

    _ElementMap.update({
        __miscellaneous_field.name() : __miscellaneous_field
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'miscellaneous', miscellaneous)


# Complex type miscellaneous-field with content type SIMPLE
class miscellaneous_field (pyxb.binding.basis.complexTypeDefinition):
    """If a program has other metadata not yet supported in the MusicXML format, each type of metadata can go in a miscellaneous-field element. The required name attribute indicates the type of metadata the element content represents."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'miscellaneous-field')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3483, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__AbsentNamespace0_miscellaneous_field_name', pyxb.binding.datatypes.token, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3489, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3489, 4)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name
    })
Namespace.addCategoryObject('typeBinding', u'miscellaneous-field', miscellaneous_field)


# Complex type appearance with content type ELEMENT_ONLY
class appearance (pyxb.binding.basis.complexTypeDefinition):
    """The appearance type controls general graphical settings for the music's final form appearance on a printed page of display. This includes support for line widths, definitions for note sizes, and standard distances between notation elements, plus an extension element for other aspects of appearance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'appearance')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3506, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element line-width uses Python identifier line_width
    __line_width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'line-width'), 'line_width', '__AbsentNamespace0_appearance_line_width', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3511, 3), )

    
    line_width = property(__line_width.value, __line_width.set, None, None)

    
    # Element note-size uses Python identifier note_size
    __note_size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'note-size'), 'note_size', '__AbsentNamespace0_appearance_note_size', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3512, 3), )

    
    note_size = property(__note_size.value, __note_size.set, None, None)

    
    # Element distance uses Python identifier distance
    __distance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'distance'), 'distance', '__AbsentNamespace0_appearance_distance', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3513, 3), )

    
    distance = property(__distance.value, __distance.set, None, None)

    
    # Element other-appearance uses Python identifier other_appearance
    __other_appearance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-appearance'), 'other_appearance', '__AbsentNamespace0_appearance_other_appearance', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3514, 3), )

    
    other_appearance = property(__other_appearance.value, __other_appearance.set, None, None)

    _ElementMap.update({
        __line_width.name() : __line_width,
        __note_size.name() : __note_size,
        __distance.name() : __distance,
        __other_appearance.name() : __other_appearance
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'appearance', appearance)


# Complex type measure-layout with content type ELEMENT_ONLY
class measure_layout (pyxb.binding.basis.complexTypeDefinition):
    """The measure-layout type includes the horizontal distance from the previous measure."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'measure-layout')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3540, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element measure-distance uses Python identifier measure_distance
    __measure_distance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'measure-distance'), 'measure_distance', '__AbsentNamespace0_measure_layout_measure_distance', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3545, 3), )

    
    measure_distance = property(__measure_distance.value, __measure_distance.set, None, u'The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element.')

    _ElementMap.update({
        __measure_distance.name() : __measure_distance
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'measure-layout', measure_layout)


# Complex type other-appearance with content type SIMPLE
class other_appearance (pyxb.binding.basis.complexTypeDefinition):
    """The other-appearance type is used to define any graphical settings not yet in the current version of the MusicXML format. This allows extended representation, though without application interoperability."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'other-appearance')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3564, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_other_appearance_type', pyxb.binding.datatypes.token, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3570, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3570, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'other-appearance', other_appearance)


# Complex type page-layout with content type ELEMENT_ONLY
class page_layout (pyxb.binding.basis.complexTypeDefinition):
    """Page layout can be defined both in score-wide defaults and in the print element. Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type is not needed when used as part of a print element. If omitted when used in the defaults element, "both" is the default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'page-layout')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3575, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element page-height uses Python identifier page_height
    __page_height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'page-height'), 'page_height', '__AbsentNamespace0_page_layout_page_height', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3581, 4), )

    
    page_height = property(__page_height.value, __page_height.set, None, None)

    
    # Element page-width uses Python identifier page_width
    __page_width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'page-width'), 'page_width', '__AbsentNamespace0_page_layout_page_width', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3582, 4), )

    
    page_width = property(__page_width.value, __page_width.set, None, None)

    
    # Element page-margins uses Python identifier page_margins
    __page_margins = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'page-margins'), 'page_margins', '__AbsentNamespace0_page_layout_page_margins', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3584, 3), )

    
    page_margins = property(__page_margins.value, __page_margins.set, None, None)

    _ElementMap.update({
        __page_height.name() : __page_height,
        __page_width.name() : __page_width,
        __page_margins.name() : __page_margins
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'page-layout', page_layout)


# Complex type scaling with content type ELEMENT_ONLY
class scaling (pyxb.binding.basis.complexTypeDefinition):
    """Margins, page sizes, and distances are all measured in tenths to keep MusicXML data in a consistent coordinate system as much as possible. The translation to absolute units is done with the scaling type, which specifies how many millimeters are equal to how many tenths. For a staff height of 7 mm, millimeters would be set to 7 while tenths is set to 40. The ability to set a formula rather than a single scaling factor helps avoid roundoff errors."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'scaling')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3596, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element millimeters uses Python identifier millimeters
    __millimeters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'millimeters'), 'millimeters', '__AbsentNamespace0_scaling_millimeters', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3601, 3), )

    
    millimeters = property(__millimeters.value, __millimeters.set, None, None)

    
    # Element tenths uses Python identifier tenths
    __tenths = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tenths'), 'tenths', '__AbsentNamespace0_scaling_tenths', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3602, 3), )

    
    tenths = property(__tenths.value, __tenths.set, None, None)

    _ElementMap.update({
        __millimeters.name() : __millimeters,
        __tenths.name() : __tenths
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'scaling', scaling)


# Complex type system-dividers with content type ELEMENT_ONLY
class system_dividers (pyxb.binding.basis.complexTypeDefinition):
    """The system-dividers element indicates the presence or absence of system dividers (also known as system separation marks) between systems displayed on the same page. Dividers on the left and right side of the page are controlled by the left-divider and right-divider elements respectively. The default vertical position is half the system-distance value from the top of the system that is below the divider. The default horizontal position is the left and right system margin, respectively.

When used in the print element, the system-dividers element affects the dividers that would appear between the current system and the previous system."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'system-dividers')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3616, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element left-divider uses Python identifier left_divider
    __left_divider = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'left-divider'), 'left_divider', '__AbsentNamespace0_system_dividers_left_divider', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3623, 3), )

    
    left_divider = property(__left_divider.value, __left_divider.set, None, None)

    
    # Element right-divider uses Python identifier right_divider
    __right_divider = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'right-divider'), 'right_divider', '__AbsentNamespace0_system_dividers_right_divider', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3624, 3), )

    
    right_divider = property(__right_divider.value, __right_divider.set, None, None)

    _ElementMap.update({
        __left_divider.name() : __left_divider,
        __right_divider.name() : __right_divider
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'system-dividers', system_dividers)


# Complex type system-layout with content type ELEMENT_ONLY
class system_layout (pyxb.binding.basis.complexTypeDefinition):
    """A system is a group of staves that are read and played simultaneously. System layout includes left and right margins and the vertical distance from the previous system. The system distance is measured from the bottom line of the previous system to the top line of the current system. It is ignored for the first system on a page. The top system distance is measured from the page's top margin to the top line of the first system. It is ignored for all but the first system on a page.
	
Sometimes the sum of measure widths in a system may not equal the system width specified by the layout elements due to roundoff or other errors. The behavior when reading MusicXML files in these cases is application-dependent. For instance, applications may find that the system layout data is more reliable than the sum of the measure widths, and adjust the measure widths accordingly."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'system-layout')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3628, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element system-margins uses Python identifier system_margins
    __system_margins = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'system-margins'), 'system_margins', '__AbsentNamespace0_system_layout_system_margins', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3635, 3), )

    
    system_margins = property(__system_margins.value, __system_margins.set, None, None)

    
    # Element system-distance uses Python identifier system_distance
    __system_distance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'system-distance'), 'system_distance', '__AbsentNamespace0_system_layout_system_distance', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3636, 3), )

    
    system_distance = property(__system_distance.value, __system_distance.set, None, None)

    
    # Element top-system-distance uses Python identifier top_system_distance
    __top_system_distance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'top-system-distance'), 'top_system_distance', '__AbsentNamespace0_system_layout_top_system_distance', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3637, 3), )

    
    top_system_distance = property(__top_system_distance.value, __top_system_distance.set, None, None)

    
    # Element system-dividers uses Python identifier system_dividers
    __system_dividers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'system-dividers'), 'system_dividers', '__AbsentNamespace0_system_layout_system_dividers', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3638, 3), )

    
    system_dividers = property(__system_dividers.value, __system_dividers.set, None, None)

    _ElementMap.update({
        __system_margins.name() : __system_margins,
        __system_distance.name() : __system_distance,
        __top_system_distance.name() : __top_system_distance,
        __system_dividers.name() : __system_dividers
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'system-layout', system_layout)


# Complex type system-margins with content type ELEMENT_ONLY
class system_margins (pyxb.binding.basis.complexTypeDefinition):
    """System margins are relative to the page margins. Positive values indent and negative values reduce the margin size."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'system-margins')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3642, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element left-margin uses Python identifier left_margin
    __left_margin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'left-margin'), 'left_margin', '__AbsentNamespace0_system_margins_left_margin', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5255, 3), )

    
    left_margin = property(__left_margin.value, __left_margin.set, None, None)

    
    # Element right-margin uses Python identifier right_margin
    __right_margin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'right-margin'), 'right_margin', '__AbsentNamespace0_system_margins_right_margin', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5256, 3), )

    
    right_margin = property(__right_margin.value, __right_margin.set, None, None)

    _ElementMap.update({
        __left_margin.name() : __left_margin,
        __right_margin.name() : __right_margin
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'system-margins', system_margins)


# Complex type bookmark with content type EMPTY
class bookmark (pyxb.binding.basis.complexTypeDefinition):
    """The bookmark type serves as a well-defined target for an incoming simple XLink."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bookmark')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3651, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'element'), 'element', '__AbsentNamespace0_bookmark_element', pyxb.binding.datatypes.NMTOKEN)
    __element._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1917, 2)
    __element._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1917, 2)
    
    element = property(__element.value, __element.set, None, None)

    
    # Attribute position uses Python identifier position
    __position = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'position'), 'position', '__AbsentNamespace0_bookmark_position', pyxb.binding.datatypes.positiveInteger)
    __position._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1918, 2)
    __position._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1918, 2)
    
    position = property(__position.value, __position.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_bookmark_id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3655, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3655, 2)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__AbsentNamespace0_bookmark_name', pyxb.binding.datatypes.token)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3656, 2)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3656, 2)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __element.name() : __element,
        __position.name() : __position,
        __id.name() : __id,
        __name.name() : __name
    })
Namespace.addCategoryObject('typeBinding', u'bookmark', bookmark)


# Complex type articulations with content type ELEMENT_ONLY
class articulations (pyxb.binding.basis.complexTypeDefinition):
    """Articulations and accents are grouped together here."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'articulations')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3709, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accent uses Python identifier accent
    __accent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accent'), 'accent', '__AbsentNamespace0_articulations_accent', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3714, 3), )

    
    accent = property(__accent.value, __accent.set, None, u'The accent element indicates a regular horizontal accent mark.')

    
    # Element strong-accent uses Python identifier strong_accent
    __strong_accent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'strong-accent'), 'strong_accent', '__AbsentNamespace0_articulations_strong_accent', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3719, 3), )

    
    strong_accent = property(__strong_accent.value, __strong_accent.set, None, u'The strong-accent element indicates a vertical accent mark.')

    
    # Element staccato uses Python identifier staccato
    __staccato = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staccato'), 'staccato', '__AbsentNamespace0_articulations_staccato', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3724, 3), )

    
    staccato = property(__staccato.value, __staccato.set, None, u'The staccato element is used for a dot articulation, as opposed to a stroke or a wedge.')

    
    # Element tenuto uses Python identifier tenuto
    __tenuto = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tenuto'), 'tenuto', '__AbsentNamespace0_articulations_tenuto', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3729, 3), )

    
    tenuto = property(__tenuto.value, __tenuto.set, None, u'The tenuto element indicates a tenuto line symbol.')

    
    # Element detached-legato uses Python identifier detached_legato
    __detached_legato = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'detached-legato'), 'detached_legato', '__AbsentNamespace0_articulations_detached_legato', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3734, 3), )

    
    detached_legato = property(__detached_legato.value, __detached_legato.set, None, u'The detached-legato element indicates the combination of a tenuto line and staccato dot symbol.')

    
    # Element staccatissimo uses Python identifier staccatissimo
    __staccatissimo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staccatissimo'), 'staccatissimo', '__AbsentNamespace0_articulations_staccatissimo', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3739, 3), )

    
    staccatissimo = property(__staccatissimo.value, __staccatissimo.set, None, u'The staccatissimo element is used for a wedge articulation, as opposed to a dot or a stroke.')

    
    # Element spiccato uses Python identifier spiccato
    __spiccato = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'spiccato'), 'spiccato', '__AbsentNamespace0_articulations_spiccato', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3744, 3), )

    
    spiccato = property(__spiccato.value, __spiccato.set, None, u'The spiccato element is used for a stroke articulation, as opposed to a dot or a wedge.')

    
    # Element scoop uses Python identifier scoop
    __scoop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'scoop'), 'scoop', '__AbsentNamespace0_articulations_scoop', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3749, 3), )

    
    scoop = property(__scoop.value, __scoop.set, None, u'The scoop element is an indeterminate slide attached to a single note. The scoop element appears before the main note and comes from below the main pitch.')

    
    # Element plop uses Python identifier plop
    __plop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'plop'), 'plop', '__AbsentNamespace0_articulations_plop', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3754, 3), )

    
    plop = property(__plop.value, __plop.set, None, u'The plop element is an indeterminate slide attached to a single note. The plop element appears before the main note and comes from above the main pitch.')

    
    # Element doit uses Python identifier doit
    __doit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'doit'), 'doit', '__AbsentNamespace0_articulations_doit', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3759, 3), )

    
    doit = property(__doit.value, __doit.set, None, u'The doit element is an indeterminate slide attached to a single note. The doit element appears after the main note and goes above the main pitch.')

    
    # Element falloff uses Python identifier falloff
    __falloff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'falloff'), 'falloff', '__AbsentNamespace0_articulations_falloff', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3764, 3), )

    
    falloff = property(__falloff.value, __falloff.set, None, u'The falloff element is an indeterminate slide attached to a single note. The falloff element appears before the main note and goes below the main pitch.')

    
    # Element breath-mark uses Python identifier breath_mark
    __breath_mark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'breath-mark'), 'breath_mark', '__AbsentNamespace0_articulations_breath_mark', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3769, 3), )

    
    breath_mark = property(__breath_mark.value, __breath_mark.set, None, None)

    
    # Element caesura uses Python identifier caesura
    __caesura = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'caesura'), 'caesura', '__AbsentNamespace0_articulations_caesura', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3770, 3), )

    
    caesura = property(__caesura.value, __caesura.set, None, u'The caesura element indicates a slight pause. It is notated using a "railroad tracks" symbol.')

    
    # Element stress uses Python identifier stress
    __stress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stress'), 'stress', '__AbsentNamespace0_articulations_stress', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3775, 3), )

    
    stress = property(__stress.value, __stress.set, None, u'The stress element indicates a stressed note.')

    
    # Element unstress uses Python identifier unstress
    __unstress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'unstress'), 'unstress', '__AbsentNamespace0_articulations_unstress', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3780, 3), )

    
    unstress = property(__unstress.value, __unstress.set, None, u'The unstress element indicates an unstressed note. It is often notated using a u-shaped symbol.')

    
    # Element other-articulation uses Python identifier other_articulation
    __other_articulation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-articulation'), 'other_articulation', '__AbsentNamespace0_articulations_other_articulation', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3785, 3), )

    
    other_articulation = property(__other_articulation.value, __other_articulation.set, None, u'The other-articulation element is used to define any articulations not yet in the MusicXML format. This allows extended representation, though without application interoperability.')

    _ElementMap.update({
        __accent.name() : __accent,
        __strong_accent.name() : __strong_accent,
        __staccato.name() : __staccato,
        __tenuto.name() : __tenuto,
        __detached_legato.name() : __detached_legato,
        __staccatissimo.name() : __staccatissimo,
        __spiccato.name() : __spiccato,
        __scoop.name() : __scoop,
        __plop.name() : __plop,
        __doit.name() : __doit,
        __falloff.name() : __falloff,
        __breath_mark.name() : __breath_mark,
        __caesura.name() : __caesura,
        __stress.name() : __stress,
        __unstress.name() : __unstress,
        __other_articulation.name() : __other_articulation
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'articulations', articulations)


# Complex type backup with content type ELEMENT_ONLY
class backup (pyxb.binding.basis.complexTypeDefinition):
    """The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The backup type is generally used to move between voices and staves. Thus the backup element does not include voice or staff elements. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'backup')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3808, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_backup_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_backup_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Element duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'duration'), 'duration', '__AbsentNamespace0_backup_duration', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3), )

    
    duration = property(__duration.value, __duration.set, None, u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")

    _ElementMap.update({
        __footnote.name() : __footnote,
        __level.name() : __level,
        __duration.name() : __duration
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'backup', backup)


# Complex type figure with content type ELEMENT_ONLY
class figure (pyxb.binding.basis.complexTypeDefinition):
    """The figure type represents a single figure within a figured-bass element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'figure')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3901, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element prefix uses Python identifier prefix
    __prefix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'prefix'), 'prefix', '__AbsentNamespace0_figure_prefix', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3906, 3), )

    
    prefix = property(__prefix.value, __prefix.set, None, u'Values for the prefix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may contain additional values for symbols specific to particular figured bass styles.')

    
    # Element figure-number uses Python identifier figure_number
    __figure_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'figure-number'), 'figure_number', '__AbsentNamespace0_figure_figure_number', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3911, 3), )

    
    figure_number = property(__figure_number.value, __figure_number.set, None, u'A figure-number is a number. Overstrikes of the figure number are represented in the suffix element.')

    
    # Element suffix uses Python identifier suffix
    __suffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'suffix'), 'suffix', '__AbsentNamespace0_figure_suffix', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3916, 3), )

    
    suffix = property(__suffix.value, __suffix.set, None, u'Values for the suffix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix value slash is used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles.')

    
    # Element extend uses Python identifier extend_
    __extend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'extend'), 'extend_', '__AbsentNamespace0_figure_extend', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3921, 3), )

    
    extend_ = property(__extend.value, __extend.set, None, None)

    _ElementMap.update({
        __prefix.name() : __prefix,
        __figure_number.name() : __figure_number,
        __suffix.name() : __suffix,
        __extend.name() : __extend
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'figure', figure)


# Complex type forward with content type ELEMENT_ONLY
class forward (pyxb.binding.basis.complexTypeDefinition):
    """The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The forward element is generally used within voices and staves. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'forward')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3941, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_forward_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_forward_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Element staff uses Python identifier staff
    __staff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff'), 'staff', '__AbsentNamespace0_forward_staff', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3), )

    
    staff = property(__staff.value, __staff.set, None, u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')

    
    # Element voice uses Python identifier voice
    __voice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'voice'), 'voice', '__AbsentNamespace0_forward_voice', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3), )

    
    voice = property(__voice.value, __voice.set, None, None)

    
    # Element duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'duration'), 'duration', '__AbsentNamespace0_forward_duration', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3), )

    
    duration = property(__duration.value, __duration.set, None, u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")

    _ElementMap.update({
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __voice.name() : __voice,
        __duration.name() : __duration
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'forward', forward)


# Complex type instrument with content type EMPTY
class instrument (pyxb.binding.basis.complexTypeDefinition):
    """The instrument type distinguishes between score-instrument elements in a score-part. The id attribute is an IDREF back to the score-instrument ID. If multiple score-instruments are specified on a score-part, there should be an instrument element for each note in the part."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'instrument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4086, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_instrument_id', pyxb.binding.datatypes.IDREF, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4090, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4090, 2)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'instrument', instrument)


# Complex type notehead-text with content type ELEMENT_ONLY
class notehead_text (pyxb.binding.basis.complexTypeDefinition):
    """The notehead-text type represents text that is displayed inside a notehead, as is done in some educational music. It is not needed for the numbers used in tablature or jianpu notation. The presence of a TAB or jianpu clefs is sufficient to indicate that numbers are used. The display-text and accidental-text elements allow display of fully formatted text and accidentals."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'notehead-text')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4282, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element display-text uses Python identifier display_text
    __display_text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'display-text'), 'display_text', '__AbsentNamespace0_notehead_text_display_text', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4288, 4), )

    
    display_text = property(__display_text.value, __display_text.set, None, None)

    
    # Element accidental-text uses Python identifier accidental_text
    __accidental_text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accidental-text'), 'accidental_text', '__AbsentNamespace0_notehead_text_accidental_text', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4289, 4), )

    
    accidental_text = property(__accidental_text.value, __accidental_text.set, None, None)

    _ElementMap.update({
        __display_text.name() : __display_text,
        __accidental_text.name() : __accidental_text
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'notehead-text', notehead_text)


# Complex type ornaments with content type ELEMENT_ONLY
class ornaments (pyxb.binding.basis.complexTypeDefinition):
    """Ornaments can be any of several types, followed optionally by accidentals. The accidental-mark element's content is represented the same as an accidental element, but with a different name to reflect the different musical meaning."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ornaments')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element trill-mark uses Python identifier trill_mark
    __trill_mark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'trill-mark'), 'trill_mark', '__AbsentNamespace0_ornaments_trill_mark', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4300, 4), )

    
    trill_mark = property(__trill_mark.value, __trill_mark.set, None, u'The trill-mark element represents the trill-mark symbol.')

    
    # Element turn uses Python identifier turn
    __turn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'turn'), 'turn', '__AbsentNamespace0_ornaments_turn', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4305, 4), )

    
    turn = property(__turn.value, __turn.set, None, u'The turn element is the normal turn shape which goes up then down.')

    
    # Element delayed-turn uses Python identifier delayed_turn
    __delayed_turn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'delayed-turn'), 'delayed_turn', '__AbsentNamespace0_ornaments_delayed_turn', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4310, 4), )

    
    delayed_turn = property(__delayed_turn.value, __delayed_turn.set, None, u'The delayed-turn element indicates a normal turn that is delayed until the end of the current note.')

    
    # Element inverted-turn uses Python identifier inverted_turn
    __inverted_turn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'inverted-turn'), 'inverted_turn', '__AbsentNamespace0_ornaments_inverted_turn', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4315, 4), )

    
    inverted_turn = property(__inverted_turn.value, __inverted_turn.set, None, u'The inverted-turn element has the shape which goes down and then up.')

    
    # Element delayed-inverted-turn uses Python identifier delayed_inverted_turn
    __delayed_inverted_turn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'delayed-inverted-turn'), 'delayed_inverted_turn', '__AbsentNamespace0_ornaments_delayed_inverted_turn', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4320, 4), )

    
    delayed_inverted_turn = property(__delayed_inverted_turn.value, __delayed_inverted_turn.set, None, u'The delayed-inverted-turn element indicates an inverted turn that is delayed until the end of the current note.')

    
    # Element vertical-turn uses Python identifier vertical_turn
    __vertical_turn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'vertical-turn'), 'vertical_turn', '__AbsentNamespace0_ornaments_vertical_turn', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4325, 4), )

    
    vertical_turn = property(__vertical_turn.value, __vertical_turn.set, None, u'The vertical-turn element has the turn symbol shape arranged vertically going from upper left to lower right.')

    
    # Element shake uses Python identifier shake
    __shake = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'shake'), 'shake', '__AbsentNamespace0_ornaments_shake', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4330, 4), )

    
    shake = property(__shake.value, __shake.set, None, u'The shake element has a similar appearance to an inverted-mordent element.')

    
    # Element wavy-line uses Python identifier wavy_line
    __wavy_line = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'wavy-line'), 'wavy_line', '__AbsentNamespace0_ornaments_wavy_line', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4335, 4), )

    
    wavy_line = property(__wavy_line.value, __wavy_line.set, None, None)

    
    # Element mordent uses Python identifier mordent
    __mordent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mordent'), 'mordent', '__AbsentNamespace0_ornaments_mordent', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4336, 4), )

    
    mordent = property(__mordent.value, __mordent.set, None, u'The mordent element represents the sign with the vertical line. The long attribute is "no" by default.')

    
    # Element inverted-mordent uses Python identifier inverted_mordent
    __inverted_mordent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'inverted-mordent'), 'inverted_mordent', '__AbsentNamespace0_ornaments_inverted_mordent', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4341, 4), )

    
    inverted_mordent = property(__inverted_mordent.value, __inverted_mordent.set, None, u'The inverted-mordent element represents the sign without the vertical line. The long attribute is "no" by default.')

    
    # Element schleifer uses Python identifier schleifer
    __schleifer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'schleifer'), 'schleifer', '__AbsentNamespace0_ornaments_schleifer', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4346, 4), )

    
    schleifer = property(__schleifer.value, __schleifer.set, None, u'The name for this ornament is based on the German, to avoid confusion with the more common slide element defined earlier.')

    
    # Element tremolo uses Python identifier tremolo
    __tremolo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tremolo'), 'tremolo', '__AbsentNamespace0_ornaments_tremolo', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4351, 4), )

    
    tremolo = property(__tremolo.value, __tremolo.set, None, None)

    
    # Element other-ornament uses Python identifier other_ornament
    __other_ornament = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-ornament'), 'other_ornament', '__AbsentNamespace0_ornaments_other_ornament', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4352, 4), )

    
    other_ornament = property(__other_ornament.value, __other_ornament.set, None, u'The other-ornament element is used to define any ornaments not yet in the MusicXML format. This allows extended representation, though without application interoperability.')

    
    # Element accidental-mark uses Python identifier accidental_mark
    __accidental_mark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accidental-mark'), 'accidental_mark', '__AbsentNamespace0_ornaments_accidental_mark', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4358, 3), )

    
    accidental_mark = property(__accidental_mark.value, __accidental_mark.set, None, None)

    _ElementMap.update({
        __trill_mark.name() : __trill_mark,
        __turn.name() : __turn,
        __delayed_turn.name() : __delayed_turn,
        __inverted_turn.name() : __inverted_turn,
        __delayed_inverted_turn.name() : __delayed_inverted_turn,
        __vertical_turn.name() : __vertical_turn,
        __shake.name() : __shake,
        __wavy_line.name() : __wavy_line,
        __mordent.name() : __mordent,
        __inverted_mordent.name() : __inverted_mordent,
        __schleifer.name() : __schleifer,
        __tremolo.name() : __tremolo,
        __other_ornament.name() : __other_ornament,
        __accidental_mark.name() : __accidental_mark
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ornaments', ornaments)


# Complex type pitch with content type ELEMENT_ONLY
class pitch (pyxb.binding.basis.complexTypeDefinition):
    """Pitch is represented as a combination of the step of the diatonic scale, the chromatic alteration, and the octave."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pitch')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4377, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element step uses Python identifier step
    __step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'step'), 'step', '__AbsentNamespace0_pitch_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4382, 3), )

    
    step = property(__step.value, __step.set, None, None)

    
    # Element alter uses Python identifier alter
    __alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'alter'), 'alter', '__AbsentNamespace0_pitch_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4383, 3), )

    
    alter = property(__alter.value, __alter.set, None, None)

    
    # Element octave uses Python identifier octave
    __octave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'octave'), 'octave', '__AbsentNamespace0_pitch_octave', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4384, 3), )

    
    octave = property(__octave.value, __octave.set, None, None)

    _ElementMap.update({
        __step.name() : __step,
        __alter.name() : __alter,
        __octave.name() : __octave
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'pitch', pitch)


# Complex type technical with content type ELEMENT_ONLY
class technical (pyxb.binding.basis.complexTypeDefinition):
    """Technical indications give performance information for individual instruments."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'technical')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4475, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element up-bow uses Python identifier up_bow
    __up_bow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'up-bow'), 'up_bow', '__AbsentNamespace0_technical_up_bow', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4480, 3), )

    
    up_bow = property(__up_bow.value, __up_bow.set, None, u'The up-bow element represents the symbol that is used both for up-bowing on bowed instruments, and up-stroke on plucked instruments.')

    
    # Element down-bow uses Python identifier down_bow
    __down_bow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'down-bow'), 'down_bow', '__AbsentNamespace0_technical_down_bow', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4485, 3), )

    
    down_bow = property(__down_bow.value, __down_bow.set, None, u'The down-bow element represents the symbol that is used both for down-bowing on bowed instruments, and down-stroke on plucked instruments.')

    
    # Element harmonic uses Python identifier harmonic
    __harmonic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'harmonic'), 'harmonic', '__AbsentNamespace0_technical_harmonic', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4490, 3), )

    
    harmonic = property(__harmonic.value, __harmonic.set, None, None)

    
    # Element open-string uses Python identifier open_string
    __open_string = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'open-string'), 'open_string', '__AbsentNamespace0_technical_open_string', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4491, 3), )

    
    open_string = property(__open_string.value, __open_string.set, None, u'The open-string element represents the zero-shaped open string symbol.')

    
    # Element thumb-position uses Python identifier thumb_position
    __thumb_position = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'thumb-position'), 'thumb_position', '__AbsentNamespace0_technical_thumb_position', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4496, 3), )

    
    thumb_position = property(__thumb_position.value, __thumb_position.set, None, u'The thumb-position element represents the thumb position symbol. This is a circle with a line, where the line does not come within the circle. It is distinct from the snap pizzicato symbol, where the line comes inside the circle.')

    
    # Element fingering uses Python identifier fingering
    __fingering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fingering'), 'fingering', '__AbsentNamespace0_technical_fingering', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4501, 3), )

    
    fingering = property(__fingering.value, __fingering.set, None, None)

    
    # Element pluck uses Python identifier pluck
    __pluck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pluck'), 'pluck', '__AbsentNamespace0_technical_pluck', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4502, 3), )

    
    pluck = property(__pluck.value, __pluck.set, None, u'The pluck element is used to specify the plucking fingering on a fretted instrument, where the fingering element refers to the fretting fingering. Typical values are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring fingers.')

    
    # Element double-tongue uses Python identifier double_tongue
    __double_tongue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'double-tongue'), 'double_tongue', '__AbsentNamespace0_technical_double_tongue', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4507, 3), )

    
    double_tongue = property(__double_tongue.value, __double_tongue.set, None, u'The double-tongue element represents the double tongue symbol (two dots arranged horizontally).')

    
    # Element triple-tongue uses Python identifier triple_tongue
    __triple_tongue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'triple-tongue'), 'triple_tongue', '__AbsentNamespace0_technical_triple_tongue', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4512, 3), )

    
    triple_tongue = property(__triple_tongue.value, __triple_tongue.set, None, u'The triple-tongue element represents the triple tongue symbol (three dots arranged horizontally).')

    
    # Element stopped uses Python identifier stopped
    __stopped = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stopped'), 'stopped', '__AbsentNamespace0_technical_stopped', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4517, 3), )

    
    stopped = property(__stopped.value, __stopped.set, None, u'The stopped element represents the stopped symbol, which looks like a plus sign.')

    
    # Element snap-pizzicato uses Python identifier snap_pizzicato
    __snap_pizzicato = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'snap-pizzicato'), 'snap_pizzicato', '__AbsentNamespace0_technical_snap_pizzicato', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4522, 3), )

    
    snap_pizzicato = property(__snap_pizzicato.value, __snap_pizzicato.set, None, u'\tThe snap-pizzicato element represents the snap pizzicato symbol. This is a circle with a line, where the line comes inside the circle. It is distinct from the thumb-position symbol, where the line does not come inside the circle.')

    
    # Element fret uses Python identifier fret
    __fret = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fret'), 'fret', '__AbsentNamespace0_technical_fret', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4527, 3), )

    
    fret = property(__fret.value, __fret.set, None, None)

    
    # Element string uses Python identifier string
    __string = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'string'), 'string', '__AbsentNamespace0_technical_string', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4528, 3), )

    
    string = property(__string.value, __string.set, None, None)

    
    # Element hammer-on uses Python identifier hammer_on
    __hammer_on = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hammer-on'), 'hammer_on', '__AbsentNamespace0_technical_hammer_on', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4529, 3), )

    
    hammer_on = property(__hammer_on.value, __hammer_on.set, None, None)

    
    # Element pull-off uses Python identifier pull_off
    __pull_off = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pull-off'), 'pull_off', '__AbsentNamespace0_technical_pull_off', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4530, 3), )

    
    pull_off = property(__pull_off.value, __pull_off.set, None, None)

    
    # Element bend uses Python identifier bend
    __bend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bend'), 'bend', '__AbsentNamespace0_technical_bend', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4531, 3), )

    
    bend = property(__bend.value, __bend.set, None, None)

    
    # Element tap uses Python identifier tap
    __tap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tap'), 'tap', '__AbsentNamespace0_technical_tap', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4532, 3), )

    
    tap = property(__tap.value, __tap.set, None, u'The tap element indicates a tap on the fretboard. The element content allows specification of the notation; + and T are common choices. If empty, the display is application-specific.')

    
    # Element heel uses Python identifier heel
    __heel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'heel'), 'heel', '__AbsentNamespace0_technical_heel', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4537, 3), )

    
    heel = property(__heel.value, __heel.set, None, None)

    
    # Element toe uses Python identifier toe
    __toe = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'toe'), 'toe', '__AbsentNamespace0_technical_toe', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4538, 3), )

    
    toe = property(__toe.value, __toe.set, None, None)

    
    # Element fingernails uses Python identifier fingernails
    __fingernails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fingernails'), 'fingernails', '__AbsentNamespace0_technical_fingernails', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4539, 3), )

    
    fingernails = property(__fingernails.value, __fingernails.set, None, u'The fingernails element is used in notation for harp and other plucked string instruments.')

    
    # Element hole uses Python identifier hole
    __hole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hole'), 'hole', '__AbsentNamespace0_technical_hole', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4544, 3), )

    
    hole = property(__hole.value, __hole.set, None, None)

    
    # Element arrow uses Python identifier arrow
    __arrow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'arrow'), 'arrow', '__AbsentNamespace0_technical_arrow', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4545, 3), )

    
    arrow = property(__arrow.value, __arrow.set, None, None)

    
    # Element handbell uses Python identifier handbell
    __handbell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'handbell'), 'handbell', '__AbsentNamespace0_technical_handbell', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4546, 3), )

    
    handbell = property(__handbell.value, __handbell.set, None, None)

    
    # Element other-technical uses Python identifier other_technical
    __other_technical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-technical'), 'other_technical', '__AbsentNamespace0_technical_other_technical', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4547, 3), )

    
    other_technical = property(__other_technical.value, __other_technical.set, None, u'The other-technical element is used to define any technical indications not yet in the MusicXML format. This allows extended representation, though without application interoperability.')

    _ElementMap.update({
        __up_bow.name() : __up_bow,
        __down_bow.name() : __down_bow,
        __harmonic.name() : __harmonic,
        __open_string.name() : __open_string,
        __thumb_position.name() : __thumb_position,
        __fingering.name() : __fingering,
        __pluck.name() : __pluck,
        __double_tongue.name() : __double_tongue,
        __triple_tongue.name() : __triple_tongue,
        __stopped.name() : __stopped,
        __snap_pizzicato.name() : __snap_pizzicato,
        __fret.name() : __fret,
        __string.name() : __string,
        __hammer_on.name() : __hammer_on,
        __pull_off.name() : __pull_off,
        __bend.name() : __bend,
        __tap.name() : __tap,
        __heel.name() : __heel,
        __toe.name() : __toe,
        __fingernails.name() : __fingernails,
        __hole.name() : __hole,
        __arrow.name() : __arrow,
        __handbell.name() : __handbell,
        __other_technical.name() : __other_technical
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'technical', technical)


# Complex type time-modification with content type ELEMENT_ONLY
class time_modification (pyxb.binding.basis.complexTypeDefinition):
    """Time modification indicates tuplets, double-note tremolos, and other durational changes. A time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type represented by the type and dot elements. Nested tuplets and other notations that use more detailed information need both the time-modification and tuplet elements to be represented accurately."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'time-modification')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4614, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element actual-notes uses Python identifier actual_notes
    __actual_notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'actual-notes'), 'actual_notes', '__AbsentNamespace0_time_modification_actual_notes', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4619, 3), )

    
    actual_notes = property(__actual_notes.value, __actual_notes.set, None, u'The actual-notes element describes how many notes are played in the time usually occupied by the number in the normal-notes element.')

    
    # Element normal-notes uses Python identifier normal_notes
    __normal_notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'normal-notes'), 'normal_notes', '__AbsentNamespace0_time_modification_normal_notes', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4624, 3), )

    
    normal_notes = property(__normal_notes.value, __normal_notes.set, None, u'The normal-notes element describes how many notes are usually played in the time occupied by the number in the actual-notes element.')

    
    # Element normal-type uses Python identifier normal_type
    __normal_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'normal-type'), 'normal_type', '__AbsentNamespace0_time_modification_normal_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4630, 4), )

    
    normal_type = property(__normal_type.value, __normal_type.set, None, u'If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements.')

    
    # Element normal-dot uses Python identifier normal_dot
    __normal_dot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'normal-dot'), 'normal_dot', '__AbsentNamespace0_time_modification_normal_dot', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4635, 4), )

    
    normal_dot = property(__normal_dot.value, __normal_dot.set, None, u'The normal-dot element is used to specify dotted normal tuplet types.')

    _ElementMap.update({
        __actual_notes.name() : __actual_notes,
        __normal_notes.name() : __normal_notes,
        __normal_type.name() : __normal_type,
        __normal_dot.name() : __normal_dot
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'time-modification', time_modification)


# Complex type tuplet-portion with content type ELEMENT_ONLY
class tuplet_portion (pyxb.binding.basis.complexTypeDefinition):
    """The tuplet-portion type provides optional full control over tuplet specifications. It allows the number and note type (including dots) to be set for the actual and normal portions of a single tuplet. If any of these elements are absent, their values are based on the time-modification element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tuplet-portion')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4711, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element tuplet-number uses Python identifier tuplet_number
    __tuplet_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuplet-number'), 'tuplet_number', '__AbsentNamespace0_tuplet_portion_tuplet_number', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4716, 3), )

    
    tuplet_number = property(__tuplet_number.value, __tuplet_number.set, None, None)

    
    # Element tuplet-type uses Python identifier tuplet_type
    __tuplet_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuplet-type'), 'tuplet_type', '__AbsentNamespace0_tuplet_portion_tuplet_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4717, 3), )

    
    tuplet_type = property(__tuplet_type.value, __tuplet_type.set, None, None)

    
    # Element tuplet-dot uses Python identifier tuplet_dot
    __tuplet_dot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuplet-dot'), 'tuplet_dot', '__AbsentNamespace0_tuplet_portion_tuplet_dot', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4718, 3), )

    
    tuplet_dot = property(__tuplet_dot.value, __tuplet_dot.set, None, None)

    _ElementMap.update({
        __tuplet_number.name() : __tuplet_number,
        __tuplet_type.name() : __tuplet_type,
        __tuplet_dot.name() : __tuplet_dot
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'tuplet-portion', tuplet_portion)


# Complex type unpitched with content type ELEMENT_ONLY
class unpitched (pyxb.binding.basis.complexTypeDefinition):
    """The unpitched type represents musical elements that are notated on the staff but lack definite pitch, such as unpitched percussion and speaking voice."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'unpitched')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4734, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element display-step uses Python identifier display_step
    __display_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'display-step'), 'display_step', '__AbsentNamespace0_unpitched_display_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5280, 3), )

    
    display_step = property(__display_step.value, __display_step.set, None, None)

    
    # Element display-octave uses Python identifier display_octave
    __display_octave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'display-octave'), 'display_octave', '__AbsentNamespace0_unpitched_display_octave', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5281, 3), )

    
    display_octave = property(__display_octave.value, __display_octave.set, None, None)

    _ElementMap.update({
        __display_step.name() : __display_step,
        __display_octave.name() : __display_octave
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'unpitched', unpitched)


# Complex type credit with content type ELEMENT_ONLY
class credit (pyxb.binding.basis.complexTypeDefinition):
    """The credit type represents the appearance of the title, composer, arranger, lyricist, copyright, dedication, and other text and graphics that commonly appears on the first page of a score. The credit-words and credit-image elements are similar to the words and image elements for directions. However, since the credit is not part of a measure, the default-x and default-y attributes adjust the origin relative to the bottom left-hand corner of the first page. The enclosure for credit-words is none by default.
	
By default, a series of credit-words elements within a single credit element follow one another in sequence visually. Non-positional formatting attributes are carried over from the previous element by default.
	
The page attribute for the credit element, new in Version 2.0, specifies the page number where the credit should appear. This is an integer value that starts with 1 for the first page. Its value is 1 by default. Since credits occur before the music, these page numbers do not refer to the page numbering specified by the print element's page-number attribute.

The credit-type element, new in Version 3.0, indicates the purpose behind a credit. Multiple types of data may be combined in a single credit, so multiple elements may be used. Standard values include page number, title, subtitle, composer, arranger, lyricist, and rights.
"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'credit')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4745, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element credit-type uses Python identifier credit_type
    __credit_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'credit-type'), 'credit_type', '__AbsentNamespace0_credit_credit_type', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4757, 3), )

    
    credit_type = property(__credit_type.value, __credit_type.set, None, None)

    
    # Element link uses Python identifier link
    __link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'link'), 'link', '__AbsentNamespace0_credit_link', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4758, 3), )

    
    link = property(__link.value, __link.set, None, None)

    
    # Element bookmark uses Python identifier bookmark
    __bookmark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bookmark'), 'bookmark', '__AbsentNamespace0_credit_bookmark', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4759, 3), )

    
    bookmark = property(__bookmark.value, __bookmark.set, None, None)

    
    # Element credit-image uses Python identifier credit_image
    __credit_image = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'credit-image'), 'credit_image', '__AbsentNamespace0_credit_credit_image', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4761, 4), )

    
    credit_image = property(__credit_image.value, __credit_image.set, None, None)

    
    # Element credit-words uses Python identifier credit_words
    __credit_words = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'credit-words'), 'credit_words', '__AbsentNamespace0_credit_credit_words', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4763, 5), )

    
    credit_words = property(__credit_words.value, __credit_words.set, None, None)

    
    # Attribute page uses Python identifier page
    __page = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'page'), 'page', '__AbsentNamespace0_credit_page', pyxb.binding.datatypes.positiveInteger)
    __page._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4772, 2)
    __page._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4772, 2)
    
    page = property(__page.value, __page.set, None, None)

    _ElementMap.update({
        __credit_type.name() : __credit_type,
        __link.name() : __link,
        __bookmark.name() : __bookmark,
        __credit_image.name() : __credit_image,
        __credit_words.name() : __credit_words
    })
    _AttributeMap.update({
        __page.name() : __page
    })
Namespace.addCategoryObject('typeBinding', u'credit', credit)


# Complex type defaults with content type ELEMENT_ONLY
class defaults (pyxb.binding.basis.complexTypeDefinition):
    """The defaults type specifies score-wide defaults for scaling, layout, and appearance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'defaults')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4775, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element scaling uses Python identifier scaling
    __scaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'scaling'), 'scaling', '__AbsentNamespace0_defaults_scaling', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4780, 3), )

    
    scaling = property(__scaling.value, __scaling.set, None, None)

    
    # Element appearance uses Python identifier appearance
    __appearance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'appearance'), 'appearance', '__AbsentNamespace0_defaults_appearance', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4782, 3), )

    
    appearance = property(__appearance.value, __appearance.set, None, None)

    
    # Element music-font uses Python identifier music_font
    __music_font = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'music-font'), 'music_font', '__AbsentNamespace0_defaults_music_font', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4783, 3), )

    
    music_font = property(__music_font.value, __music_font.set, None, None)

    
    # Element word-font uses Python identifier word_font
    __word_font = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'word-font'), 'word_font', '__AbsentNamespace0_defaults_word_font', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4784, 3), )

    
    word_font = property(__word_font.value, __word_font.set, None, None)

    
    # Element lyric-font uses Python identifier lyric_font
    __lyric_font = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'lyric-font'), 'lyric_font', '__AbsentNamespace0_defaults_lyric_font', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4785, 3), )

    
    lyric_font = property(__lyric_font.value, __lyric_font.set, None, None)

    
    # Element lyric-language uses Python identifier lyric_language
    __lyric_language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'lyric-language'), 'lyric_language', '__AbsentNamespace0_defaults_lyric_language', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4786, 3), )

    
    lyric_language = property(__lyric_language.value, __lyric_language.set, None, None)

    
    # Element page-layout uses Python identifier page_layout
    __page_layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'page-layout'), 'page_layout', '__AbsentNamespace0_defaults_page_layout', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3), )

    
    page_layout = property(__page_layout.value, __page_layout.set, None, None)

    
    # Element system-layout uses Python identifier system_layout
    __system_layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'system-layout'), 'system_layout', '__AbsentNamespace0_defaults_system_layout', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3), )

    
    system_layout = property(__system_layout.value, __system_layout.set, None, None)

    
    # Element staff-layout uses Python identifier staff_layout
    __staff_layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-layout'), 'staff_layout', '__AbsentNamespace0_defaults_staff_layout', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3), )

    
    staff_layout = property(__staff_layout.value, __staff_layout.set, None, None)

    _ElementMap.update({
        __scaling.name() : __scaling,
        __appearance.name() : __appearance,
        __music_font.name() : __music_font,
        __word_font.name() : __word_font,
        __lyric_font.name() : __lyric_font,
        __lyric_language.name() : __lyric_language,
        __page_layout.name() : __page_layout,
        __system_layout.name() : __system_layout,
        __staff_layout.name() : __staff_layout
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'defaults', defaults)


# Complex type lyric-language with content type EMPTY
class lyric_language (pyxb.binding.basis.complexTypeDefinition):
    """The lyric-language type specifies the default language for a particular name and number of lyric."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'lyric-language')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4840, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_lyric_language_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang, required=True)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4846, 2)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_lyric_language_number', pyxb.binding.datatypes.NMTOKEN)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4844, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4844, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__AbsentNamespace0_lyric_language_name', pyxb.binding.datatypes.token)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4845, 2)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4845, 2)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __number.name() : __number,
        __name.name() : __name
    })
Namespace.addCategoryObject('typeBinding', u'lyric-language', lyric_language)


# Complex type part-list with content type ELEMENT_ONLY
class part_list (pyxb.binding.basis.complexTypeDefinition):
    """The part-list identifies the different musical parts in this movement. Each part has an ID that is used later within the musical data. Since parts may be encoded separately and combined later, identification elements are present at both the score and score-part levels. There must be at least one score-part, combined as desired with part-group elements that indicate braces and brackets. Parts are ordered from top to bottom in a score based on the order in which they appear in the part-list."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'part-list')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4890, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element part-group uses Python identifier part_group
    __part_group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-group'), 'part_group', '__AbsentNamespace0_part_list_part_group', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5333, 3), )

    
    part_group = property(__part_group.value, __part_group.set, None, None)

    
    # Element score-part uses Python identifier score_part
    __score_part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'score-part'), 'score_part', '__AbsentNamespace0_part_list_score_part', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5366, 3), )

    
    score_part = property(__score_part.value, __score_part.set, None, u'Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.')

    _ElementMap.update({
        __part_group.name() : __part_group,
        __score_part.name() : __score_part
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'part-list', part_list)


# Complex type score-instrument with content type ELEMENT_ONLY
class score_instrument (pyxb.binding.basis.complexTypeDefinition):
    """The score-instrument type represents a single instrument within a score-part. As with the score-part type, each score-instrument has a required ID attribute, a name, and an optional abbreviation.
	
A score-instrument type is also required if the score specifies MIDI 1.0 channels, banks, or programs. An initial midi-instrument assignment can also be made here. MusicXML software should be able to automatically assign reasonable channels and instruments without these elements in simple cases, such as where part names match General MIDI instrument names."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'score-instrument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4915, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element instrument-name uses Python identifier instrument_name
    __instrument_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'instrument-name'), 'instrument_name', '__AbsentNamespace0_score_instrument_instrument_name', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4922, 3), )

    
    instrument_name = property(__instrument_name.value, __instrument_name.set, None, u'The instrument-name element is typically used within a software application, rather than appearing on the printed page of a score.')

    
    # Element instrument-abbreviation uses Python identifier instrument_abbreviation
    __instrument_abbreviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'instrument-abbreviation'), 'instrument_abbreviation', '__AbsentNamespace0_score_instrument_instrument_abbreviation', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4927, 3), )

    
    instrument_abbreviation = property(__instrument_abbreviation.value, __instrument_abbreviation.set, None, u'The optional instrument-abbreviation element is typically used within a software application, rather than appearing on the printed page of a score.')

    
    # Element instrument-sound uses Python identifier instrument_sound
    __instrument_sound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'instrument-sound'), 'instrument_sound', '__AbsentNamespace0_score_instrument_instrument_sound', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4932, 3), )

    
    instrument_sound = property(__instrument_sound.value, __instrument_sound.set, None, u'The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries.')

    
    # Element solo uses Python identifier solo
    __solo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'solo'), 'solo', '__AbsentNamespace0_score_instrument_solo', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4938, 4), )

    
    solo = property(__solo.value, __solo.set, None, u'The solo element was added in Version 2.0. It is present if performance is intended by a solo instrument.')

    
    # Element ensemble uses Python identifier ensemble
    __ensemble = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ensemble'), 'ensemble', '__AbsentNamespace0_score_instrument_ensemble', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4943, 4), )

    
    ensemble = property(__ensemble.value, __ensemble.set, None, u'The ensemble element was added in Version 2.0. It is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.')

    
    # Element virtual-instrument uses Python identifier virtual_instrument
    __virtual_instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'virtual-instrument'), 'virtual_instrument', '__AbsentNamespace0_score_instrument_virtual_instrument', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4949, 3), )

    
    virtual_instrument = property(__virtual_instrument.value, __virtual_instrument.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_score_instrument_id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4951, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4951, 2)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __instrument_name.name() : __instrument_name,
        __instrument_abbreviation.name() : __instrument_abbreviation,
        __instrument_sound.name() : __instrument_sound,
        __solo.name() : __solo,
        __ensemble.name() : __ensemble,
        __virtual_instrument.name() : __virtual_instrument
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'score-instrument', score_instrument)


# Complex type score-part with content type ELEMENT_ONLY
class score_part (pyxb.binding.basis.complexTypeDefinition):
    """Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track or specific MIDI instruments. Initial midi-instrument assignments may be made here as well."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'score-part')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4954, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identification uses Python identifier identification
    __identification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'identification'), 'identification', '__AbsentNamespace0_score_part_identification', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4959, 3), )

    
    identification = property(__identification.value, __identification.set, None, None)

    
    # Element part-name uses Python identifier part_name
    __part_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-name'), 'part_name', '__AbsentNamespace0_score_part_part_name', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4960, 3), )

    
    part_name = property(__part_name.value, __part_name.set, None, None)

    
    # Element part-name-display uses Python identifier part_name_display
    __part_name_display = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-name-display'), 'part_name_display', '__AbsentNamespace0_score_part_part_name_display', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4961, 3), )

    
    part_name_display = property(__part_name_display.value, __part_name_display.set, None, None)

    
    # Element part-abbreviation uses Python identifier part_abbreviation
    __part_abbreviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-abbreviation'), 'part_abbreviation', '__AbsentNamespace0_score_part_part_abbreviation', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4962, 3), )

    
    part_abbreviation = property(__part_abbreviation.value, __part_abbreviation.set, None, None)

    
    # Element part-abbreviation-display uses Python identifier part_abbreviation_display
    __part_abbreviation_display = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-abbreviation-display'), 'part_abbreviation_display', '__AbsentNamespace0_score_part_part_abbreviation_display', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4963, 3), )

    
    part_abbreviation_display = property(__part_abbreviation_display.value, __part_abbreviation_display.set, None, None)

    
    # Element group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group'), 'group', '__AbsentNamespace0_score_part_group', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4964, 3), )

    
    group = property(__group.value, __group.set, None, u'The group element allows the use of different versions of the part for different purposes. Typical values include score, parts, sound, and data. Ordering information that is directly encoded in MuseData can be derived from the ordering within a MusicXML score or opus.')

    
    # Element score-instrument uses Python identifier score_instrument
    __score_instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'score-instrument'), 'score_instrument', '__AbsentNamespace0_score_part_score_instrument', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4969, 3), )

    
    score_instrument = property(__score_instrument.value, __score_instrument.set, None, None)

    
    # Element midi-device uses Python identifier midi_device
    __midi_device = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-device'), 'midi_device', '__AbsentNamespace0_score_part_midi_device', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4971, 4), )

    
    midi_device = property(__midi_device.value, __midi_device.set, None, None)

    
    # Element midi-instrument uses Python identifier midi_instrument
    __midi_instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-instrument'), 'midi_instrument', '__AbsentNamespace0_score_part_midi_instrument', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4972, 4), )

    
    midi_instrument = property(__midi_instrument.value, __midi_instrument.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_score_part_id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4975, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4975, 2)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __identification.name() : __identification,
        __part_name.name() : __part_name,
        __part_name_display.name() : __part_name_display,
        __part_abbreviation.name() : __part_abbreviation,
        __part_abbreviation_display.name() : __part_abbreviation_display,
        __group.name() : __group,
        __score_instrument.name() : __score_instrument,
        __midi_device.name() : __midi_device,
        __midi_instrument.name() : __midi_instrument
    })
    _AttributeMap.update({
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'score-part', score_part)


# Complex type virtual-instrument with content type ELEMENT_ONLY
class virtual_instrument (pyxb.binding.basis.complexTypeDefinition):
    """The virtual-instrument element defines a specific virtual instrument used for an instrument sound."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'virtual-instrument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4978, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element virtual-library uses Python identifier virtual_library
    __virtual_library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'virtual-library'), 'virtual_library', '__AbsentNamespace0_virtual_instrument_virtual_library', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4983, 3), )

    
    virtual_library = property(__virtual_library.value, __virtual_library.set, None, u'The virtual-library element indicates the virtual instrument library name.')

    
    # Element virtual-name uses Python identifier virtual_name
    __virtual_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'virtual-name'), 'virtual_name', '__AbsentNamespace0_virtual_instrument_virtual_name', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4988, 3), )

    
    virtual_name = property(__virtual_name.value, __virtual_name.set, None, u'The virtual-name element indicates the library-specific name for the virtual instrument.')

    _ElementMap.update({
        __virtual_library.name() : __virtual_library,
        __virtual_name.name() : __virtual_name
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'virtual-instrument', virtual_instrument)


# Complex type work with content type ELEMENT_ONLY
class work (pyxb.binding.basis.complexTypeDefinition):
    """Works are optionally identified by number and title. The work type also may indicate a link to the opus document that composes multiple scores into a collection."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'work')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4996, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element work-number uses Python identifier work_number
    __work_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'work-number'), 'work_number', '__AbsentNamespace0_work_work_number', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5001, 3), )

    
    work_number = property(__work_number.value, __work_number.set, None, u'The work-number element specifies the number of a work, such as its opus number.')

    
    # Element work-title uses Python identifier work_title
    __work_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'work-title'), 'work_title', '__AbsentNamespace0_work_work_title', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5006, 3), )

    
    work_title = property(__work_title.value, __work_title.set, None, u'The work-title element specifies the title of a work, not including its opus or other work number.')

    
    # Element opus uses Python identifier opus
    __opus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'opus'), 'opus', '__AbsentNamespace0_work_opus', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5011, 3), )

    
    opus = property(__opus.value, __opus.set, None, None)

    _ElementMap.update({
        __work_number.name() : __work_number,
        __work_title.name() : __work_title,
        __opus.name() : __opus
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'work', work)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """The score-partwise element is the root element for a partwise MusicXML score. It includes a score-header group followed by a series of parts with measures inside. The document-attributes attribute group includes the version attribute."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5382, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element work uses Python identifier work
    __work = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'work'), 'work', '__AbsentNamespace0_CTD_ANON_work', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3), )

    
    work = property(__work.value, __work.set, None, None)

    
    # Element movement-number uses Python identifier movement_number
    __movement_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'movement-number'), 'movement_number', '__AbsentNamespace0_CTD_ANON_movement_number', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3), )

    
    movement_number = property(__movement_number.value, __movement_number.set, None, u'The movement-number element specifies the number of a movement.')

    
    # Element movement-title uses Python identifier movement_title
    __movement_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'movement-title'), 'movement_title', '__AbsentNamespace0_CTD_ANON_movement_title', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3), )

    
    movement_title = property(__movement_title.value, __movement_title.set, None, u'The movement-title element specifies the title of a movement, not including its number.')

    
    # Element identification uses Python identifier identification
    __identification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'identification'), 'identification', '__AbsentNamespace0_CTD_ANON_identification', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3), )

    
    identification = property(__identification.value, __identification.set, None, None)

    
    # Element defaults uses Python identifier defaults
    __defaults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defaults'), 'defaults', '__AbsentNamespace0_CTD_ANON_defaults', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3), )

    
    defaults = property(__defaults.value, __defaults.set, None, None)

    
    # Element credit uses Python identifier credit
    __credit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'credit'), 'credit', '__AbsentNamespace0_CTD_ANON_credit', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3), )

    
    credit = property(__credit.value, __credit.set, None, None)

    
    # Element part-list uses Python identifier part_list
    __part_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-list'), 'part_list', '__AbsentNamespace0_CTD_ANON_part_list', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5357, 3), )

    
    part_list = property(__part_list.value, __part_list.set, None, None)

    
    # Element part uses Python identifier part
    __part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part'), 'part', '__AbsentNamespace0_CTD_ANON_part', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5385, 4), )

    
    part = property(__part.value, __part.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__AbsentNamespace0_CTD_ANON_version', pyxb.binding.datatypes.token, unicode_default=u'1.0')
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1609, 2)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1609, 2)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __work.name() : __work,
        __movement_number.name() : __movement_number,
        __movement_title.name() : __movement_title,
        __identification.name() : __identification,
        __defaults.name() : __defaults,
        __credit.name() : __credit,
        __part_list.name() : __part_list,
        __part.name() : __part
    })
    _AttributeMap.update({
        __version.name() : __version
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5386, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element measure uses Python identifier measure
    __measure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'measure'), 'measure', '__AbsentNamespace0_CTD_ANON__measure', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5388, 7), )

    
    measure = property(__measure.value, __measure.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_CTD_ANON__id', pyxb.binding.datatypes.IDREF, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1966, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1966, 2)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __measure.name() : __measure
    })
    _AttributeMap.update({
        __id.name() : __id
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """The score-timewise element is the root element for a timewise MusicXML score. It includes a score-header group followed by a series of measures with parts inside. The document-attributes attribute group includes the version attribute."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5407, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element work uses Python identifier work
    __work = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'work'), 'work', '__AbsentNamespace0_CTD_ANON_2_work', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3), )

    
    work = property(__work.value, __work.set, None, None)

    
    # Element movement-number uses Python identifier movement_number
    __movement_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'movement-number'), 'movement_number', '__AbsentNamespace0_CTD_ANON_2_movement_number', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3), )

    
    movement_number = property(__movement_number.value, __movement_number.set, None, u'The movement-number element specifies the number of a movement.')

    
    # Element movement-title uses Python identifier movement_title
    __movement_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'movement-title'), 'movement_title', '__AbsentNamespace0_CTD_ANON_2_movement_title', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3), )

    
    movement_title = property(__movement_title.value, __movement_title.set, None, u'The movement-title element specifies the title of a movement, not including its number.')

    
    # Element identification uses Python identifier identification
    __identification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'identification'), 'identification', '__AbsentNamespace0_CTD_ANON_2_identification', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3), )

    
    identification = property(__identification.value, __identification.set, None, None)

    
    # Element defaults uses Python identifier defaults
    __defaults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defaults'), 'defaults', '__AbsentNamespace0_CTD_ANON_2_defaults', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3), )

    
    defaults = property(__defaults.value, __defaults.set, None, None)

    
    # Element credit uses Python identifier credit
    __credit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'credit'), 'credit', '__AbsentNamespace0_CTD_ANON_2_credit', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3), )

    
    credit = property(__credit.value, __credit.set, None, None)

    
    # Element part-list uses Python identifier part_list
    __part_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-list'), 'part_list', '__AbsentNamespace0_CTD_ANON_2_part_list', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5357, 3), )

    
    part_list = property(__part_list.value, __part_list.set, None, None)

    
    # Element measure uses Python identifier measure
    __measure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'measure'), 'measure', '__AbsentNamespace0_CTD_ANON_2_measure', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5410, 4), )

    
    measure = property(__measure.value, __measure.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__AbsentNamespace0_CTD_ANON_2_version', pyxb.binding.datatypes.token, unicode_default=u'1.0')
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1609, 2)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1609, 2)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __work.name() : __work,
        __movement_number.name() : __movement_number,
        __movement_title.name() : __movement_title,
        __identification.name() : __identification,
        __defaults.name() : __defaults,
        __credit.name() : __credit,
        __part_list.name() : __part_list,
        __measure.name() : __measure
    })
    _AttributeMap.update({
        __version.name() : __version
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5414, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'note'), 'note', '__AbsentNamespace0_CTD_ANON_3_note', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5311, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element backup uses Python identifier backup
    __backup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'backup'), 'backup', '__AbsentNamespace0_CTD_ANON_3_backup', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5312, 4), )

    
    backup = property(__backup.value, __backup.set, None, None)

    
    # Element forward uses Python identifier forward
    __forward = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'forward'), 'forward', '__AbsentNamespace0_CTD_ANON_3_forward', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5313, 4), )

    
    forward = property(__forward.value, __forward.set, None, None)

    
    # Element direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'direction'), 'direction', '__AbsentNamespace0_CTD_ANON_3_direction', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5314, 4), )

    
    direction = property(__direction.value, __direction.set, None, None)

    
    # Element attributes uses Python identifier attributes
    __attributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'attributes'), 'attributes', '__AbsentNamespace0_CTD_ANON_3_attributes', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5315, 4), )

    
    attributes = property(__attributes.value, __attributes.set, None, None)

    
    # Element harmony uses Python identifier harmony
    __harmony = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'harmony'), 'harmony', '__AbsentNamespace0_CTD_ANON_3_harmony', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5316, 4), )

    
    harmony = property(__harmony.value, __harmony.set, None, None)

    
    # Element figured-bass uses Python identifier figured_bass
    __figured_bass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'figured-bass'), 'figured_bass', '__AbsentNamespace0_CTD_ANON_3_figured_bass', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5317, 4), )

    
    figured_bass = property(__figured_bass.value, __figured_bass.set, None, None)

    
    # Element print uses Python identifier print_
    __print = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'print'), 'print_', '__AbsentNamespace0_CTD_ANON_3_print', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5318, 4), )

    
    print_ = property(__print.value, __print.set, None, None)

    
    # Element sound uses Python identifier sound
    __sound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sound'), 'sound', '__AbsentNamespace0_CTD_ANON_3_sound', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5319, 4), )

    
    sound = property(__sound.value, __sound.set, None, None)

    
    # Element barline uses Python identifier barline
    __barline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'barline'), 'barline', '__AbsentNamespace0_CTD_ANON_3_barline', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5320, 4), )

    
    barline = property(__barline.value, __barline.set, None, None)

    
    # Element grouping uses Python identifier grouping
    __grouping = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'grouping'), 'grouping', '__AbsentNamespace0_CTD_ANON_3_grouping', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5321, 4), )

    
    grouping = property(__grouping.value, __grouping.set, None, None)

    
    # Element link uses Python identifier link
    __link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'link'), 'link', '__AbsentNamespace0_CTD_ANON_3_link', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5322, 4), )

    
    link = property(__link.value, __link.set, None, None)

    
    # Element bookmark uses Python identifier bookmark
    __bookmark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bookmark'), 'bookmark', '__AbsentNamespace0_CTD_ANON_3_bookmark', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5323, 4), )

    
    bookmark = property(__bookmark.value, __bookmark.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_CTD_ANON_3_id', pyxb.binding.datatypes.IDREF, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1966, 2)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1966, 2)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __note.name() : __note,
        __backup.name() : __backup,
        __forward.name() : __forward,
        __direction.name() : __direction,
        __attributes.name() : __attributes,
        __harmony.name() : __harmony,
        __figured_bass.name() : __figured_bass,
        __print.name() : __print,
        __sound.name() : __sound,
        __barline.name() : __barline,
        __grouping.name() : __grouping,
        __link.name() : __link,
        __bookmark.name() : __bookmark
    })
    _AttributeMap.update({
        __id.name() : __id
    })



# Complex type level with content type SIMPLE
class level (pyxb.binding.basis.complexTypeDefinition):
    """The level type is used to specify editorial information for different MusicXML elements. If the reference attribute for the level element is yes, this indicates editorial information that is for display only and should not affect playback. For instance, a modern edition of older music may set reference="yes" on the attributes containing the music's original clef, key, and time signature. It is no by default."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'level')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2133, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute parentheses uses Python identifier parentheses
    __parentheses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentheses'), 'parentheses', '__AbsentNamespace0_level_parentheses', yes_no)
    __parentheses._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1661, 2)
    __parentheses._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1661, 2)
    
    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    
    # Attribute bracket uses Python identifier bracket
    __bracket = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bracket'), 'bracket', '__AbsentNamespace0_level_bracket', yes_no)
    __bracket._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1662, 2)
    __bracket._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1662, 2)
    
    bracket = property(__bracket.value, __bracket.set, None, None)

    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__AbsentNamespace0_level_size', symbol_size)
    __size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1663, 2)
    __size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1663, 2)
    
    size = property(__size.value, __size.set, None, None)

    
    # Attribute reference uses Python identifier reference
    __reference = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reference'), 'reference', '__AbsentNamespace0_level_reference', yes_no)
    __reference._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2139, 4)
    __reference._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2139, 4)
    
    reference = property(__reference.value, __reference.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __parentheses.name() : __parentheses,
        __bracket.name() : __bracket,
        __size.name() : __size,
        __reference.name() : __reference
    })
Namespace.addCategoryObject('typeBinding', u'level', level)


# Complex type midi-device with content type SIMPLE
class midi_device (pyxb.binding.basis.complexTypeDefinition):
    """The midi-device type corresponds to the DeviceName meta event in Standard MIDI Files. The optional port attribute is a number from 1 to 16 that can be used with the unofficial MIDI port (or cable) meta event. Unlike the DeviceName meta event, there can be multiple midi-device elements per MusicXML part starting in MusicXML 3.0. The optional id attribute refers to the score-instrument assigned to this device. If missing, the device assignment affects all score-instrument elements in the score-part."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'midi-device')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2145, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute port uses Python identifier port
    __port = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'port'), 'port', '__AbsentNamespace0_midi_device_port', midi_16)
    __port._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2151, 4)
    __port._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2151, 4)
    
    port = property(__port.value, __port.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__AbsentNamespace0_midi_device_id', pyxb.binding.datatypes.IDREF)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2152, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2152, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __port.name() : __port,
        __id.name() : __id
    })
Namespace.addCategoryObject('typeBinding', u'midi-device', midi_device)


# Complex type name-display with content type ELEMENT_ONLY
class name_display (pyxb.binding.basis.complexTypeDefinition):
    """The name-display type is used for exact formatting of multi-font text in part and group names to the left of the system. The print-object attribute can be used to determine what, if anything, is printed at the start of each system. Enclosure for the display-text element is none by default. Language for the display-text element is Italian ("it") by default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'name-display')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2206, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element display-text uses Python identifier display_text
    __display_text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'display-text'), 'display_text', '__AbsentNamespace0_name_display_display_text', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2212, 4), )

    
    display_text = property(__display_text.value, __display_text.set, None, None)

    
    # Element accidental-text uses Python identifier accidental_text
    __accidental_text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accidental-text'), 'accidental_text', '__AbsentNamespace0_name_display_accidental_text', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2213, 4), )

    
    accidental_text = property(__accidental_text.value, __accidental_text.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_name_display_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __display_text.name() : __display_text,
        __accidental_text.name() : __accidental_text
    })
    _AttributeMap.update({
        __print_object.name() : __print_object
    })
Namespace.addCategoryObject('typeBinding', u'name-display', name_display)


# Complex type wavy-line with content type EMPTY
class wavy_line (pyxb.binding.basis.complexTypeDefinition):
    """Wavy lines are one way to indicate trills. When used with a measure element, they should always have type="continue" set."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'wavy-line')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2272, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_wavy_line_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_wavy_line_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_wavy_line_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_wavy_line_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_wavy_line_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_wavy_line_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute start-note uses Python identifier start_note
    __start_note = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'start-note'), 'start_note', '__AbsentNamespace0_wavy_line_start_note', start_note)
    __start_note._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1842, 2)
    __start_note._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1842, 2)
    
    start_note = property(__start_note.value, __start_note.set, None, None)

    
    # Attribute trill-step uses Python identifier trill_step
    __trill_step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trill-step'), 'trill_step', '__AbsentNamespace0_wavy_line_trill_step', trill_step)
    __trill_step._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1843, 2)
    __trill_step._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1843, 2)
    
    trill_step = property(__trill_step.value, __trill_step.set, None, None)

    
    # Attribute two-note-turn uses Python identifier two_note_turn
    __two_note_turn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'two-note-turn'), 'two_note_turn', '__AbsentNamespace0_wavy_line_two_note_turn', two_note_turn)
    __two_note_turn._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1844, 2)
    __two_note_turn._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1844, 2)
    
    two_note_turn = property(__two_note_turn.value, __two_note_turn.set, None, None)

    
    # Attribute accelerate uses Python identifier accelerate
    __accelerate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accelerate'), 'accelerate', '__AbsentNamespace0_wavy_line_accelerate', yes_no)
    __accelerate._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1845, 2)
    __accelerate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1845, 2)
    
    accelerate = property(__accelerate.value, __accelerate.set, None, None)

    
    # Attribute beats uses Python identifier beats
    __beats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'beats'), 'beats', '__AbsentNamespace0_wavy_line_beats', trill_beats)
    __beats._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1846, 2)
    __beats._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1846, 2)
    
    beats = property(__beats.value, __beats.set, None, None)

    
    # Attribute second-beat uses Python identifier second_beat
    __second_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'second-beat'), 'second_beat', '__AbsentNamespace0_wavy_line_second_beat', percent)
    __second_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1847, 2)
    __second_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1847, 2)
    
    second_beat = property(__second_beat.value, __second_beat.set, None, None)

    
    # Attribute last-beat uses Python identifier last_beat
    __last_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'last-beat'), 'last_beat', '__AbsentNamespace0_wavy_line_last_beat', percent)
    __last_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1848, 2)
    __last_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1848, 2)
    
    last_beat = property(__last_beat.value, __last_beat.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_wavy_line_type', start_stop_continue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2276, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2276, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_wavy_line_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2277, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2277, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __start_note.name() : __start_note,
        __trill_step.name() : __trill_step,
        __two_note_turn.name() : __two_note_turn,
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __second_beat.name() : __second_beat,
        __last_beat.name() : __last_beat,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'wavy-line', wavy_line)


# Complex type beat-repeat with content type ELEMENT_ONLY
class beat_repeat (pyxb.binding.basis.complexTypeDefinition):
    """The beat-repeat type is used to indicate that a single beat (but possibly many notes) is repeated. Both the start and stop of the beat being repeated should be specified. The slashes attribute specifies the number of slashes to use in the symbol. The use-dots attribute indicates whether or not to use dots as well (for instance, with mixed rhythm patterns). By default, the value for slashes is 1 and the value for use-dots is no.
	
The beat-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'beat-repeat')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2370, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element slash-type uses Python identifier slash_type
    __slash_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'slash-type'), 'slash_type', '__AbsentNamespace0_beat_repeat_slash_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5142, 3), )

    
    slash_type = property(__slash_type.value, __slash_type.set, None, u'The slash-type element indicates the graphical note type to use for the display of repetition marks.')

    
    # Element slash-dot uses Python identifier slash_dot
    __slash_dot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'slash-dot'), 'slash_dot', '__AbsentNamespace0_beat_repeat_slash_dot', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3), )

    
    slash_dot = property(__slash_dot.value, __slash_dot.set, None, u'The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_beat_repeat_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2377, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2377, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute slashes uses Python identifier slashes
    __slashes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'slashes'), 'slashes', '__AbsentNamespace0_beat_repeat_slashes', pyxb.binding.datatypes.positiveInteger)
    __slashes._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2378, 2)
    __slashes._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2378, 2)
    
    slashes = property(__slashes.value, __slashes.set, None, None)

    
    # Attribute use-dots uses Python identifier use_dots
    __use_dots = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'use-dots'), 'use_dots', '__AbsentNamespace0_beat_repeat_use_dots', yes_no)
    __use_dots._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2379, 2)
    __use_dots._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2379, 2)
    
    use_dots = property(__use_dots.value, __use_dots.set, None, None)

    _ElementMap.update({
        __slash_type.name() : __slash_type,
        __slash_dot.name() : __slash_dot
    })
    _AttributeMap.update({
        __type.name() : __type,
        __slashes.name() : __slashes,
        __use_dots.name() : __use_dots
    })
Namespace.addCategoryObject('typeBinding', u'beat-repeat', beat_repeat)


# Complex type cancel with content type SIMPLE
class cancel (pyxb.binding.basis.complexTypeDefinition):
    """A cancel element indicates that the old key signature should be cancelled before the new one appears. This will always happen when changing to C major or A minor and need not be specified then. The cancel value matches the fifths value of the cancelled key signature (e.g., a cancel of -2 will provide an explicit cancellation for changing from B flat major to F major). The optional location attribute indicates whether the cancellation appears relative to the new key signature."""
    _TypeDefinition = fifths
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cancel')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2382, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is fifths
    
    # Attribute location uses Python identifier location
    __location = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'location'), 'location', '__AbsentNamespace0_cancel_location', cancel_location)
    __location._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2388, 4)
    __location._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2388, 4)
    
    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __location.name() : __location
    })
Namespace.addCategoryObject('typeBinding', u'cancel', cancel)


# Complex type interchangeable with content type ELEMENT_ONLY
class interchangeable (pyxb.binding.basis.complexTypeDefinition):
    """The interchangeable type is used to represent the second in a pair of interchangeable dual time signatures, such as the 6/8 in 3/4 (6/8). A separate symbol attribute value is available compared to the time element's symbol attribute, which applies to the first of the dual time signatures. The parentheses attribute value is yes by default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'interchangeable')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2428, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element time-relation uses Python identifier time_relation
    __time_relation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'time-relation'), 'time_relation', '__AbsentNamespace0_interchangeable_time_relation', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2433, 3), )

    
    time_relation = property(__time_relation.value, __time_relation.set, None, None)

    
    # Element beats uses Python identifier beats
    __beats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beats'), 'beats', '__AbsentNamespace0_interchangeable_beats', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5160, 3), )

    
    beats = property(__beats.value, __beats.set, None, u'The beats element indicates the number of beats, as found in the numerator of a time signature.')

    
    # Element beat-type uses Python identifier beat_type
    __beat_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beat-type'), 'beat_type', '__AbsentNamespace0_interchangeable_beat_type', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5165, 3), )

    
    beat_type = property(__beat_type.value, __beat_type.set, None, u'The beat-type element indicates the beat unit, as found in the denominator of a time signature.')

    
    # Attribute symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'symbol'), 'symbol', '__AbsentNamespace0_interchangeable_symbol', time_symbol)
    __symbol._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2436, 2)
    __symbol._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2436, 2)
    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Attribute separator uses Python identifier separator
    __separator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'separator'), 'separator', '__AbsentNamespace0_interchangeable_separator', time_separator)
    __separator._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2437, 2)
    __separator._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2437, 2)
    
    separator = property(__separator.value, __separator.set, None, None)

    _ElementMap.update({
        __time_relation.name() : __time_relation,
        __beats.name() : __beats,
        __beat_type.name() : __beat_type
    })
    _AttributeMap.update({
        __symbol.name() : __symbol,
        __separator.name() : __separator
    })
Namespace.addCategoryObject('typeBinding', u'interchangeable', interchangeable)


# Complex type key-octave with content type SIMPLE
class key_octave (pyxb.binding.basis.complexTypeDefinition):
    """The key-octave element specifies in which octave an element of a key signature appears. The content specifies the octave value using the same values as the display-octave element. The number attribute is a positive integer that refers to the key signature element in left-to-right order. If the cancel attribute is set to yes, then this number refers to an element specified by the cancel element. It is no by default."""
    _TypeDefinition = octave
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'key-octave')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2460, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is octave
    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_key_octave_number', pyxb.binding.datatypes.positiveInteger, required=True)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2466, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2466, 4)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute cancel uses Python identifier cancel
    __cancel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cancel'), 'cancel', '__AbsentNamespace0_key_octave_cancel', yes_no)
    __cancel._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2467, 4)
    __cancel._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2467, 4)
    
    cancel = property(__cancel.value, __cancel.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __number.name() : __number,
        __cancel.name() : __cancel
    })
Namespace.addCategoryObject('typeBinding', u'key-octave', key_octave)


# Complex type part-symbol with content type SIMPLE
class part_symbol (pyxb.binding.basis.complexTypeDefinition):
    """The part-symbol type indicates how a symbol for a multi-staff part is indicated in the score; brace is the default value. The top-staff and bottom-staff elements are used when the brace does not extend across the entire part. For example, in a 3-staff organ part, the top-staff will typically be 1 for the right hand, while the bottom-staff will typically be 2 for the left hand. Staff 3 for the pedals is usually outside the brace."""
    _TypeDefinition = group_symbol_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'part-symbol')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2514, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is group_symbol_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_part_symbol_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_part_symbol_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_part_symbol_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_part_symbol_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_part_symbol_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute top-staff uses Python identifier top_staff
    __top_staff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'top-staff'), 'top_staff', '__AbsentNamespace0_part_symbol_top_staff', staff_number)
    __top_staff._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2520, 4)
    __top_staff._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2520, 4)
    
    top_staff = property(__top_staff.value, __top_staff.set, None, None)

    
    # Attribute bottom-staff uses Python identifier bottom_staff
    __bottom_staff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bottom-staff'), 'bottom_staff', '__AbsentNamespace0_part_symbol_bottom_staff', staff_number)
    __bottom_staff._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2521, 4)
    __bottom_staff._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2521, 4)
    
    bottom_staff = property(__bottom_staff.value, __bottom_staff.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __top_staff.name() : __top_staff,
        __bottom_staff.name() : __bottom_staff
    })
Namespace.addCategoryObject('typeBinding', u'part-symbol', part_symbol)


# Complex type slash with content type ELEMENT_ONLY
class slash (pyxb.binding.basis.complexTypeDefinition):
    """The slash type is used to indicate that slash notation is to be used. If the slash is on every beat, use-stems is no (the default). To indicate rhythms but not pitches, use-stems is set to yes. The type attribute indicates whether this is the start or stop of a slash notation style. The use-dots attribute works as for the beat-repeat element, and only has effect if use-stems is no."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'slash')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2528, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element slash-type uses Python identifier slash_type
    __slash_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'slash-type'), 'slash_type', '__AbsentNamespace0_slash_slash_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5142, 3), )

    
    slash_type = property(__slash_type.value, __slash_type.set, None, u'The slash-type element indicates the graphical note type to use for the display of repetition marks.')

    
    # Element slash-dot uses Python identifier slash_dot
    __slash_dot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'slash-dot'), 'slash_dot', '__AbsentNamespace0_slash_slash_dot', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3), )

    
    slash_dot = property(__slash_dot.value, __slash_dot.set, None, u'The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_slash_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2533, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2533, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute use-dots uses Python identifier use_dots
    __use_dots = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'use-dots'), 'use_dots', '__AbsentNamespace0_slash_use_dots', yes_no)
    __use_dots._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2534, 2)
    __use_dots._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2534, 2)
    
    use_dots = property(__use_dots.value, __use_dots.set, None, None)

    
    # Attribute use-stems uses Python identifier use_stems
    __use_stems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'use-stems'), 'use_stems', '__AbsentNamespace0_slash_use_stems', yes_no)
    __use_stems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2535, 2)
    __use_stems._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2535, 2)
    
    use_stems = property(__use_stems.value, __use_stems.set, None, None)

    _ElementMap.update({
        __slash_type.name() : __slash_type,
        __slash_dot.name() : __slash_dot
    })
    _AttributeMap.update({
        __type.name() : __type,
        __use_dots.name() : __use_dots,
        __use_stems.name() : __use_stems
    })
Namespace.addCategoryObject('typeBinding', u'slash', slash)


# Complex type staff-details with content type ELEMENT_ONLY
class staff_details (pyxb.binding.basis.complexTypeDefinition):
    """The staff-details element is used to indicate different types of staves. The optional number attribute specifies the staff number from top to bottom on the system, as with clef. The print-object attribute is used to indicate when a staff is not printed in a part, usually in large scores where empty parts are omitted. It is yes by default. If print-spacing is yes while print-object is no, the score is printed in cutaway format where vertical space is left for the empty part."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'staff-details')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2538, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element staff-type uses Python identifier staff_type
    __staff_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-type'), 'staff_type', '__AbsentNamespace0_staff_details_staff_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2543, 3), )

    
    staff_type = property(__staff_type.value, __staff_type.set, None, None)

    
    # Element staff-lines uses Python identifier staff_lines
    __staff_lines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-lines'), 'staff_lines', '__AbsentNamespace0_staff_details_staff_lines', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2544, 3), )

    
    staff_lines = property(__staff_lines.value, __staff_lines.set, None, u'The staff-lines element specifies the number of lines for a non 5-line staff.')

    
    # Element staff-tuning uses Python identifier staff_tuning
    __staff_tuning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-tuning'), 'staff_tuning', '__AbsentNamespace0_staff_details_staff_tuning', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2549, 3), )

    
    staff_tuning = property(__staff_tuning.value, __staff_tuning.set, None, None)

    
    # Element capo uses Python identifier capo
    __capo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'capo'), 'capo', '__AbsentNamespace0_staff_details_capo', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2550, 3), )

    
    capo = property(__capo.value, __capo.set, None, u'The capo element indicates at which fret a capo should be placed on a fretted instrument. This changes the open tuning of the strings specified by staff-tuning by the specified number of half-steps.')

    
    # Element staff-size uses Python identifier staff_size
    __staff_size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-size'), 'staff_size', '__AbsentNamespace0_staff_details_staff_size', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2555, 3), )

    
    staff_size = property(__staff_size.value, __staff_size.set, None, u"The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins.")

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_staff_details_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute print-spacing uses Python identifier print_spacing
    __print_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-spacing'), 'print_spacing', '__AbsentNamespace0_staff_details_print_spacing', yes_no)
    __print_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1751, 2)
    __print_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1751, 2)
    
    print_spacing = property(__print_spacing.value, __print_spacing.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_staff_details_number', staff_number)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2561, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2561, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute show-frets uses Python identifier show_frets
    __show_frets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'show-frets'), 'show_frets', '__AbsentNamespace0_staff_details_show_frets', show_frets)
    __show_frets._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2562, 2)
    __show_frets._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2562, 2)
    
    show_frets = property(__show_frets.value, __show_frets.set, None, None)

    _ElementMap.update({
        __staff_type.name() : __staff_type,
        __staff_lines.name() : __staff_lines,
        __staff_tuning.name() : __staff_tuning,
        __capo.name() : __capo,
        __staff_size.name() : __staff_size
    })
    _AttributeMap.update({
        __print_object.name() : __print_object,
        __print_spacing.name() : __print_spacing,
        __number.name() : __number,
        __show_frets.name() : __show_frets
    })
Namespace.addCategoryObject('typeBinding', u'staff-details', staff_details)


# Complex type staff-tuning with content type ELEMENT_ONLY
class staff_tuning (pyxb.binding.basis.complexTypeDefinition):
    """The staff-tuning type specifies the open, non-capo tuning of the lines on a tablature staff."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'staff-tuning')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2567, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element tuning-step uses Python identifier tuning_step
    __tuning_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuning-step'), 'tuning_step', '__AbsentNamespace0_staff_tuning_tuning_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5085, 3), )

    
    tuning_step = property(__tuning_step.value, __tuning_step.set, None, u'The tuning-step element is represented like the step element, with a different name to reflect is different function.')

    
    # Element tuning-alter uses Python identifier tuning_alter
    __tuning_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuning-alter'), 'tuning_alter', '__AbsentNamespace0_staff_tuning_tuning_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3), )

    
    tuning_alter = property(__tuning_alter.value, __tuning_alter.set, None, u'The tuning-alter element is represented like the alter element, with a different name to reflect is different function.')

    
    # Element tuning-octave uses Python identifier tuning_octave
    __tuning_octave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuning-octave'), 'tuning_octave', '__AbsentNamespace0_staff_tuning_tuning_octave', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5095, 3), )

    
    tuning_octave = property(__tuning_octave.value, __tuning_octave.set, None, u'The tuning-octave element is represented like the octave element, with a different name to reflect is different function.')

    
    # Attribute line uses Python identifier line
    __line = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line'), 'line', '__AbsentNamespace0_staff_tuning_line', staff_line)
    __line._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2572, 2)
    __line._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2572, 2)
    
    line = property(__line.value, __line.set, None, None)

    _ElementMap.update({
        __tuning_step.name() : __tuning_step,
        __tuning_alter.name() : __tuning_alter,
        __tuning_octave.name() : __tuning_octave
    })
    _AttributeMap.update({
        __line.name() : __line
    })
Namespace.addCategoryObject('typeBinding', u'staff-tuning', staff_tuning)


# Complex type transpose with content type ELEMENT_ONLY
class transpose (pyxb.binding.basis.complexTypeDefinition):
    """The transpose type represents what must be added to a written pitch to get a correct sounding pitch. The optional number attribute refers to staff numbers, from top to bottom on the system. If absent, the transposition applies to all staves in the part. Per-staff transposition is most often used in parts that represent multiple instruments."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'transpose')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2599, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element diatonic uses Python identifier diatonic
    __diatonic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'diatonic'), 'diatonic', '__AbsentNamespace0_transpose_diatonic', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2604, 3), )

    
    diatonic = property(__diatonic.value, __diatonic.set, None, u'The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions.')

    
    # Element chromatic uses Python identifier chromatic
    __chromatic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'chromatic'), 'chromatic', '__AbsentNamespace0_transpose_chromatic', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2609, 3), )

    
    chromatic = property(__chromatic.value, __chromatic.set, None, u'The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.')

    
    # Element octave-change uses Python identifier octave_change
    __octave_change = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'octave-change'), 'octave_change', '__AbsentNamespace0_transpose_octave_change', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2614, 3), )

    
    octave_change = property(__octave_change.value, __octave_change.set, None, u'The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch.')

    
    # Element double uses Python identifier double
    __double = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'double'), 'double', '__AbsentNamespace0_transpose_double', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2619, 3), )

    
    double = property(__double.value, __double.set, None, u'If the double element is present, it indicates that the music is doubled one octave down from what is currently written (as is the case for mixed cello / bass parts in orchestral literature).')

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_transpose_number', staff_number)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2625, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2625, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __diatonic.name() : __diatonic,
        __chromatic.name() : __chromatic,
        __octave_change.name() : __octave_change,
        __double.name() : __double
    })
    _AttributeMap.update({
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'transpose', transpose)


# Complex type bar-style-color with content type SIMPLE
class bar_style_color (pyxb.binding.basis.complexTypeDefinition):
    """The bar-style-color type contains barline style and color information."""
    _TypeDefinition = bar_style
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bar-style-color')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2630, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is bar_style
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_bar_style_color_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color
    })
Namespace.addCategoryObject('typeBinding', u'bar-style-color', bar_style_color)


# Complex type barline with content type ELEMENT_ONLY
class barline (pyxb.binding.basis.complexTypeDefinition):
    """If a barline is other than a normal single barline, it should be represented by a barline type that describes it. This includes information about repeats and multiple endings, as well as line style. Barline data is on the same level as the other musical data in a score - a child of a measure in a partwise score, or a part in a timewise score. This allows for barlines within measures, as in dotted barlines that subdivide measures in complex meters. The two fermata elements allow for fermatas on both sides of the barline (the lower one inverted).
	
Barlines have a location attribute to make it easier to process barlines independently of the other musical data in a score. It is often easier to set up measures separately from entering notes. The location attribute must match where the barline element occurs within the rest of the musical data in the score. If location is left, it should be the first element in the measure, aside from the print, bookmark, and link elements. If location is right, it should be the last element, again with the possible exception of the print, bookmark, and link elements. If no location is specified, the right barline is the default. The segno, coda, and divisions attributes work the same way as in the sound element. They are used for playback when barline elements contain segno or coda child elements."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'barline')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2641, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element bar-style uses Python identifier bar_style
    __bar_style = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bar-style'), 'bar_style', '__AbsentNamespace0_barline_bar_style', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2648, 3), )

    
    bar_style = property(__bar_style.value, __bar_style.set, None, None)

    
    # Element wavy-line uses Python identifier wavy_line
    __wavy_line = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'wavy-line'), 'wavy_line', '__AbsentNamespace0_barline_wavy_line', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2650, 3), )

    
    wavy_line = property(__wavy_line.value, __wavy_line.set, None, None)

    
    # Element segno uses Python identifier segno
    __segno = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'segno'), 'segno', '__AbsentNamespace0_barline_segno', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2651, 3), )

    
    segno = property(__segno.value, __segno.set, None, None)

    
    # Element coda uses Python identifier coda
    __coda = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'coda'), 'coda', '__AbsentNamespace0_barline_coda', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2652, 3), )

    
    coda = property(__coda.value, __coda.set, None, None)

    
    # Element fermata uses Python identifier fermata
    __fermata = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fermata'), 'fermata', '__AbsentNamespace0_barline_fermata', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2653, 3), )

    
    fermata = property(__fermata.value, __fermata.set, None, None)

    
    # Element ending uses Python identifier ending
    __ending = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ending'), 'ending', '__AbsentNamespace0_barline_ending', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2654, 3), )

    
    ending = property(__ending.value, __ending.set, None, None)

    
    # Element repeat uses Python identifier repeat
    __repeat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'repeat'), 'repeat', '__AbsentNamespace0_barline_repeat', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2655, 3), )

    
    repeat = property(__repeat.value, __repeat.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_barline_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_barline_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Attribute location uses Python identifier location
    __location = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'location'), 'location', '__AbsentNamespace0_barline_location', right_left_middle, unicode_default=u'right')
    __location._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2657, 2)
    __location._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2657, 2)
    
    location = property(__location.value, __location.set, None, None)

    
    # Attribute segno uses Python identifier segno_
    __segno_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'segno'), 'segno_', '__AbsentNamespace0_barline_segno_', pyxb.binding.datatypes.token)
    __segno_._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2658, 2)
    __segno_._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2658, 2)
    
    segno_ = property(__segno_.value, __segno_.set, None, None)

    
    # Attribute coda uses Python identifier coda_
    __coda_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coda'), 'coda_', '__AbsentNamespace0_barline_coda_', pyxb.binding.datatypes.token)
    __coda_._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2659, 2)
    __coda_._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2659, 2)
    
    coda_ = property(__coda_.value, __coda_.set, None, None)

    
    # Attribute divisions uses Python identifier divisions
    __divisions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'divisions'), 'divisions', '__AbsentNamespace0_barline_divisions', divisions)
    __divisions._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2660, 2)
    __divisions._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2660, 2)
    
    divisions = property(__divisions.value, __divisions.set, None, None)

    _ElementMap.update({
        __bar_style.name() : __bar_style,
        __wavy_line.name() : __wavy_line,
        __segno.name() : __segno,
        __coda.name() : __coda,
        __fermata.name() : __fermata,
        __ending.name() : __ending,
        __repeat.name() : __repeat,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __location.name() : __location,
        __segno_.name() : __segno_,
        __coda_.name() : __coda_,
        __divisions.name() : __divisions
    })
Namespace.addCategoryObject('typeBinding', u'barline', barline)


# Complex type repeat with content type EMPTY
class repeat (pyxb.binding.basis.complexTypeDefinition):
    """The repeat type represents repeat marks. The start of the repeat has a forward direction while the end of the repeat has a backward direction. Backward repeats that are not part of an ending can use the times attribute to indicate the number of times the repeated section is played."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'repeat')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2682, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'direction'), 'direction', '__AbsentNamespace0_repeat_direction', backward_forward, required=True)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2686, 2)
    __direction._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2686, 2)
    
    direction = property(__direction.value, __direction.set, None, None)

    
    # Attribute times uses Python identifier times
    __times = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'times'), 'times', '__AbsentNamespace0_repeat_times', pyxb.binding.datatypes.nonNegativeInteger)
    __times._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2687, 2)
    __times._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2687, 2)
    
    times = property(__times.value, __times.set, None, None)

    
    # Attribute winged uses Python identifier winged
    __winged = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'winged'), 'winged', '__AbsentNamespace0_repeat_winged', winged)
    __winged._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2688, 2)
    __winged._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2688, 2)
    
    winged = property(__winged.value, __winged.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __direction.name() : __direction,
        __times.name() : __times,
        __winged.name() : __winged
    })
Namespace.addCategoryObject('typeBinding', u'repeat', repeat)


# Complex type accord with content type ELEMENT_ONLY
class accord (pyxb.binding.basis.complexTypeDefinition):
    """The accord type represents the tuning of a single string in the scordatura element. It uses the same group of elements as the staff-tuning element. Strings are numbered from high to low."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accord')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2693, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element tuning-step uses Python identifier tuning_step
    __tuning_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuning-step'), 'tuning_step', '__AbsentNamespace0_accord_tuning_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5085, 3), )

    
    tuning_step = property(__tuning_step.value, __tuning_step.set, None, u'The tuning-step element is represented like the step element, with a different name to reflect is different function.')

    
    # Element tuning-alter uses Python identifier tuning_alter
    __tuning_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuning-alter'), 'tuning_alter', '__AbsentNamespace0_accord_tuning_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3), )

    
    tuning_alter = property(__tuning_alter.value, __tuning_alter.set, None, u'The tuning-alter element is represented like the alter element, with a different name to reflect is different function.')

    
    # Element tuning-octave uses Python identifier tuning_octave
    __tuning_octave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuning-octave'), 'tuning_octave', '__AbsentNamespace0_accord_tuning_octave', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5095, 3), )

    
    tuning_octave = property(__tuning_octave.value, __tuning_octave.set, None, u'The tuning-octave element is represented like the octave element, with a different name to reflect is different function.')

    
    # Attribute string uses Python identifier string
    __string = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'string'), 'string', '__AbsentNamespace0_accord_string', string_number)
    __string._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2698, 2)
    __string._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2698, 2)
    
    string = property(__string.value, __string.set, None, None)

    _ElementMap.update({
        __tuning_step.name() : __tuning_step,
        __tuning_alter.name() : __tuning_alter,
        __tuning_octave.name() : __tuning_octave
    })
    _AttributeMap.update({
        __string.name() : __string
    })
Namespace.addCategoryObject('typeBinding', u'accord', accord)


# Complex type barre with content type EMPTY
class barre (pyxb.binding.basis.complexTypeDefinition):
    """The barre element indicates placing a finger over multiple strings on a single fret. The type is "start" for the lowest pitched string (e.g., the string with the highest MusicXML number) and is "stop" for the highest pitched string."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'barre')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2725, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_barre_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_barre_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2729, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2729, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'barre', barre)


# Complex type beater with content type SIMPLE
class beater (pyxb.binding.basis.complexTypeDefinition):
    """The beater type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram."""
    _TypeDefinition = beater_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'beater')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2768, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is beater_value
    
    # Attribute tip uses Python identifier tip
    __tip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tip'), 'tip', '__AbsentNamespace0_beater_tip', tip_direction)
    __tip._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2774, 4)
    __tip._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2774, 4)
    
    tip = property(__tip.value, __tip.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __tip.name() : __tip
    })
Namespace.addCategoryObject('typeBinding', u'beater', beater)


# Complex type bracket with content type EMPTY
class bracket (pyxb.binding.basis.complexTypeDefinition):
    """Brackets are combined with words in a variety of modern directions. The line-end attribute specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of the bracket. If the line-end is up or down, the length of the jog can be specified using the end-length attribute. The line-type is solid by default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bracket')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2779, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_bracket_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_bracket_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_bracket_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute line-type uses Python identifier line_type
    __line_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-type'), 'line_type', '__AbsentNamespace0_bracket_line_type', line_type)
    __line_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    __line_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    
    line_type = property(__line_type.value, __line_type.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_bracket_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_bracket_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_bracket_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_bracket_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_bracket_type', start_stop_continue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2783, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2783, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_bracket_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2784, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2784, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute line-end uses Python identifier line_end
    __line_end = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-end'), 'line_end', '__AbsentNamespace0_bracket_line_end', line_end, required=True)
    __line_end._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2785, 2)
    __line_end._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2785, 2)
    
    line_end = property(__line_end.value, __line_end.set, None, None)

    
    # Attribute end-length uses Python identifier end_length
    __end_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'end-length'), 'end_length', '__AbsentNamespace0_bracket_end_length', tenths)
    __end_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2786, 2)
    __end_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2786, 2)
    
    end_length = property(__end_length.value, __end_length.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __line_end.name() : __line_end,
        __end_length.name() : __end_length
    })
Namespace.addCategoryObject('typeBinding', u'bracket', bracket)


# Complex type dashes with content type EMPTY
class dashes (pyxb.binding.basis.complexTypeDefinition):
    """The dashes type represents dashes, used for instance with cresc. and dim. marks."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dashes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2793, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_dashes_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_dashes_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_dashes_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_dashes_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_dashes_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_dashes_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_dashes_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_dashes_type', start_stop_continue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2797, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2797, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_dashes_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2798, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2798, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'dashes', dashes)


# Complex type degree with content type ELEMENT_ONLY
class degree (pyxb.binding.basis.complexTypeDefinition):
    """The degree type is used to add, alter, or subtract individual notes in the chord. The print-object attribute can be used to keep the degree from printing separately when it has already taken into account in the text attribute of the kind element. The degree-value and degree-type text attributes specify how the value and type of the degree should be displayed.
	
A harmony of kind "other" can be spelled explicitly by using a series of degree elements together with a root."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'degree')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2804, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element degree-value uses Python identifier degree_value
    __degree_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'degree-value'), 'degree_value', '__AbsentNamespace0_degree_degree_value', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2811, 3), )

    
    degree_value = property(__degree_value.value, __degree_value.set, None, None)

    
    # Element degree-alter uses Python identifier degree_alter
    __degree_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'degree-alter'), 'degree_alter', '__AbsentNamespace0_degree_degree_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2812, 3), )

    
    degree_alter = property(__degree_alter.value, __degree_alter.set, None, None)

    
    # Element degree-type uses Python identifier degree_type
    __degree_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'degree-type'), 'degree_type', '__AbsentNamespace0_degree_degree_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2813, 3), )

    
    degree_type = property(__degree_type.value, __degree_type.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_degree_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __degree_value.name() : __degree_value,
        __degree_alter.name() : __degree_alter,
        __degree_type.name() : __degree_type
    })
    _AttributeMap.update({
        __print_object.name() : __print_object
    })
Namespace.addCategoryObject('typeBinding', u'degree', degree)


# Complex type direction with content type ELEMENT_ONLY
class direction (pyxb.binding.basis.complexTypeDefinition):
    """A direction is a musical indication that is not attached to a specific note. Two or more may be combined to indicate starts and stops of wedges, dashes, etc.
	
By default, a series of direction-type elements and a series of child elements of a direction-type within a single direction element follow one another in sequence visually. For a series of direction-type children, non-positional formatting attributes are carried over from the previous element by default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'direction')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2855, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element direction-type uses Python identifier direction_type
    __direction_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'direction-type'), 'direction_type', '__AbsentNamespace0_direction_direction_type', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2862, 3), )

    
    direction_type = property(__direction_type.value, __direction_type.set, None, None)

    
    # Element offset uses Python identifier offset
    __offset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'offset'), 'offset', '__AbsentNamespace0_direction_offset', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2863, 3), )

    
    offset = property(__offset.value, __offset.set, None, None)

    
    # Element sound uses Python identifier sound
    __sound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sound'), 'sound', '__AbsentNamespace0_direction_sound', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2866, 3), )

    
    sound = property(__sound.value, __sound.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_direction_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_direction_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Element staff uses Python identifier staff
    __staff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff'), 'staff', '__AbsentNamespace0_direction_staff', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3), )

    
    staff = property(__staff.value, __staff.set, None, u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')

    
    # Element voice uses Python identifier voice
    __voice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'voice'), 'voice', '__AbsentNamespace0_direction_voice', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3), )

    
    voice = property(__voice.value, __voice.set, None, None)

    
    # Attribute directive uses Python identifier directive
    __directive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'directive'), 'directive', '__AbsentNamespace0_direction_directive', yes_no)
    __directive._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1600, 2)
    __directive._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1600, 2)
    
    directive = property(__directive.value, __directive.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_direction_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    _ElementMap.update({
        __direction_type.name() : __direction_type,
        __offset.name() : __offset,
        __sound.name() : __sound,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __voice.name() : __voice
    })
    _AttributeMap.update({
        __directive.name() : __directive,
        __placement.name() : __placement
    })
Namespace.addCategoryObject('typeBinding', u'direction', direction)


# Complex type first-fret with content type SIMPLE
class first_fret (pyxb.binding.basis.complexTypeDefinition):
    """The first-fret type indicates which fret is shown in the top space of the frame; it is fret 1 if the element is not present. The optional text attribute indicates how this is represented in the fret diagram, while the location attribute indicates whether the text appears to the left or right of the frame."""
    _TypeDefinition = pyxb.binding.datatypes.positiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'first-fret')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2941, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.positiveInteger
    
    # Attribute text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__AbsentNamespace0_first_fret_text', pyxb.binding.datatypes.token)
    __text._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2947, 4)
    __text._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2947, 4)
    
    text = property(__text.value, __text.set, None, None)

    
    # Attribute location uses Python identifier location
    __location = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'location'), 'location', '__AbsentNamespace0_first_fret_location', left_right)
    __location._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2948, 4)
    __location._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2948, 4)
    
    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __text.name() : __text,
        __location.name() : __location
    })
Namespace.addCategoryObject('typeBinding', u'first-fret', first_fret)


# Complex type frame with content type ELEMENT_ONLY
class frame (pyxb.binding.basis.complexTypeDefinition):
    """The frame type represents a frame or fretboard diagram used together with a chord symbol. The representation is based on the NIFF guitar grid with additional information. The frame type's unplayed attribute indicates what to display above a string that has no associated frame-note element. Typical values are x and the empty string. If the attribute is not present, the display of the unplayed string is application-defined."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'frame')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2953, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element frame-strings uses Python identifier frame_strings
    __frame_strings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'frame-strings'), 'frame_strings', '__AbsentNamespace0_frame_frame_strings', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2958, 3), )

    
    frame_strings = property(__frame_strings.value, __frame_strings.set, None, u'The frame-strings element gives the overall size of the frame in vertical lines (strings).')

    
    # Element frame-frets uses Python identifier frame_frets
    __frame_frets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'frame-frets'), 'frame_frets', '__AbsentNamespace0_frame_frame_frets', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2963, 3), )

    
    frame_frets = property(__frame_frets.value, __frame_frets.set, None, u'The frame-frets element gives the overall size of the frame in horizontal spaces (frets).')

    
    # Element first-fret uses Python identifier first_fret
    __first_fret = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'first-fret'), 'first_fret', '__AbsentNamespace0_frame_first_fret', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2968, 3), )

    
    first_fret = property(__first_fret.value, __first_fret.set, None, None)

    
    # Element frame-note uses Python identifier frame_note
    __frame_note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'frame-note'), 'frame_note', '__AbsentNamespace0_frame_frame_note', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2969, 3), )

    
    frame_note = property(__frame_note.value, __frame_note.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_frame_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_frame_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_frame_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_frame_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_frame_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_frame_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_frame_valign', valign_image)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1862, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1862, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute height uses Python identifier height
    __height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'height'), 'height', '__AbsentNamespace0_frame_height', tenths)
    __height._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2975, 2)
    __height._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2975, 2)
    
    height = property(__height.value, __height.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__AbsentNamespace0_frame_width', tenths)
    __width._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2976, 2)
    __width._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2976, 2)
    
    width = property(__width.value, __width.set, None, None)

    
    # Attribute unplayed uses Python identifier unplayed
    __unplayed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unplayed'), 'unplayed', '__AbsentNamespace0_frame_unplayed', pyxb.binding.datatypes.token)
    __unplayed._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2977, 2)
    __unplayed._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2977, 2)
    
    unplayed = property(__unplayed.value, __unplayed.set, None, None)

    _ElementMap.update({
        __frame_strings.name() : __frame_strings,
        __frame_frets.name() : __frame_frets,
        __first_fret.name() : __first_fret,
        __frame_note.name() : __frame_note
    })
    _AttributeMap.update({
        __color.name() : __color,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __height.name() : __height,
        __width.name() : __width,
        __unplayed.name() : __unplayed
    })
Namespace.addCategoryObject('typeBinding', u'frame', frame)


# Complex type grouping with content type ELEMENT_ONLY
class grouping (pyxb.binding.basis.complexTypeDefinition):
    """The grouping type is used for musical analysis. When the type attribute is "start" or "single", it usually contains one or more feature elements. The number attribute is used for distinguishing between overlapping and hierarchical groupings. The member-of attribute allows for easy distinguishing of what grouping elements are in what hierarchy. Feature elements contained within a "stop" type of grouping may be ignored.
	
This element is flexible to allow for different types of analyses. Future versions of the MusicXML format may add elements that can represent more standardized categories of analysis data, allowing for easier data sharing."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'grouping')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2992, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element feature uses Python identifier feature
    __feature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'feature'), 'feature', '__AbsentNamespace0_grouping_feature', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2999, 3), )

    
    feature = property(__feature.value, __feature.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_grouping_type', start_stop_single, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3001, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3001, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_grouping_number', pyxb.binding.datatypes.token, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3002, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3002, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute member-of uses Python identifier member_of
    __member_of = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'member-of'), 'member_of', '__AbsentNamespace0_grouping_member_of', pyxb.binding.datatypes.token)
    __member_of._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3003, 2)
    __member_of._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3003, 2)
    
    member_of = property(__member_of.value, __member_of.set, None, None)

    _ElementMap.update({
        __feature.name() : __feature
    })
    _AttributeMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __member_of.name() : __member_of
    })
Namespace.addCategoryObject('typeBinding', u'grouping', grouping)


# Complex type image with content type EMPTY
class image (pyxb.binding.basis.complexTypeDefinition):
    """The image type is used to include graphical images in a score."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'image')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3038, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_image_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_image_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_image_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_image_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_image_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_image_valign', valign_image)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1862, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1862, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute source uses Python identifier source
    __source = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'source'), 'source', '__AbsentNamespace0_image_source', pyxb.binding.datatypes.anyURI, required=True)
    __source._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1891, 2)
    __source._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1891, 2)
    
    source = property(__source.value, __source.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_image_type', pyxb.binding.datatypes.token, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1892, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1892, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __source.name() : __source,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'image', image)


# Complex type metronome-beam with content type SIMPLE
class metronome_beam (pyxb.binding.basis.complexTypeDefinition):
    """The metronome-beam type works like the beam type in defining metric relationships, but does not include all the attributes available in the beam type."""
    _TypeDefinition = beam_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'metronome-beam')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3128, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is beam_value
    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_metronome_beam_number', beam_level, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3134, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3134, 4)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'metronome-beam', metronome_beam)


# Complex type metronome-tuplet with content type ELEMENT_ONLY
class metronome_tuplet (time_modification):
    """The metronome-tuplet type uses the same element structure as the time-modification element along with some attributes from the tuplet element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'metronome-tuplet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3159, 1)
    _ElementMap = time_modification._ElementMap.copy()
    _AttributeMap = time_modification._AttributeMap.copy()
    # Base type is time_modification
    
    # Element actual_notes (actual-notes) inherited from time-modification
    
    # Element normal_notes (normal-notes) inherited from time-modification
    
    # Element normal_type (normal-type) inherited from time-modification
    
    # Element normal_dot (normal-dot) inherited from time-modification
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_metronome_tuplet_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3165, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3165, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute bracket uses Python identifier bracket
    __bracket = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bracket'), 'bracket', '__AbsentNamespace0_metronome_tuplet_bracket', yes_no)
    __bracket._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3166, 4)
    __bracket._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3166, 4)
    
    bracket = property(__bracket.value, __bracket.set, None, None)

    
    # Attribute show-number uses Python identifier show_number
    __show_number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'show-number'), 'show_number', '__AbsentNamespace0_metronome_tuplet_show_number', show_tuplet)
    __show_number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3167, 4)
    __show_number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3167, 4)
    
    show_number = property(__show_number.value, __show_number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __bracket.name() : __bracket,
        __show_number.name() : __show_number
    })
Namespace.addCategoryObject('typeBinding', u'metronome-tuplet', metronome_tuplet)


# Complex type offset with content type SIMPLE
class offset (pyxb.binding.basis.complexTypeDefinition):
    """An offset is represented in terms of divisions, and indicates where the direction will appear relative to the current musical location. This affects the visual appearance of the direction. If the sound attribute is "yes", then the offset affects playback too. If the sound attribute is "no", then any sound associated with the direction takes effect at the current location. The sound attribute is "no" by default for compatibility with earlier versions of the MusicXML format. If an element within a direction includes a default-x attribute, the offset value will be ignored when determining the appearance of that element."""
    _TypeDefinition = divisions
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'offset')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3183, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is divisions
    
    # Attribute sound uses Python identifier sound
    __sound = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sound'), 'sound', '__AbsentNamespace0_offset_sound', yes_no)
    __sound._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3189, 4)
    __sound._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3189, 4)
    
    sound = property(__sound.value, __sound.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __sound.name() : __sound
    })
Namespace.addCategoryObject('typeBinding', u'offset', offset)


# Complex type print with content type ELEMENT_ONLY
class print_ (pyxb.binding.basis.complexTypeDefinition):
    """The print type contains general printing parameters, including the layout elements defined in the layout.mod file. The part-name-display and part-abbreviation-display elements used in the score.mod file may also be used here to change how a part name or abbreviation is displayed over the course of a piece. They take effect when the current measure or a succeeding measure starts a new system.
	
Layout elements in a print statement only apply to the current page, system, staff, or measure. Music that follows continues to take the default values from the layout included in the defaults element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'print')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3279, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element measure-layout uses Python identifier measure_layout
    __measure_layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'measure-layout'), 'measure_layout', '__AbsentNamespace0_print__measure_layout', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3287, 3), )

    
    measure_layout = property(__measure_layout.value, __measure_layout.set, None, None)

    
    # Element measure-numbering uses Python identifier measure_numbering
    __measure_numbering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'measure-numbering'), 'measure_numbering', '__AbsentNamespace0_print__measure_numbering', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3288, 3), )

    
    measure_numbering = property(__measure_numbering.value, __measure_numbering.set, None, None)

    
    # Element part-name-display uses Python identifier part_name_display
    __part_name_display = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-name-display'), 'part_name_display', '__AbsentNamespace0_print__part_name_display', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3289, 3), )

    
    part_name_display = property(__part_name_display.value, __part_name_display.set, None, None)

    
    # Element part-abbreviation-display uses Python identifier part_abbreviation_display
    __part_abbreviation_display = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part-abbreviation-display'), 'part_abbreviation_display', '__AbsentNamespace0_print__part_abbreviation_display', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3290, 3), )

    
    part_abbreviation_display = property(__part_abbreviation_display.value, __part_abbreviation_display.set, None, None)

    
    # Element page-layout uses Python identifier page_layout
    __page_layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'page-layout'), 'page_layout', '__AbsentNamespace0_print__page_layout', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3), )

    
    page_layout = property(__page_layout.value, __page_layout.set, None, None)

    
    # Element system-layout uses Python identifier system_layout
    __system_layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'system-layout'), 'system_layout', '__AbsentNamespace0_print__system_layout', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3), )

    
    system_layout = property(__system_layout.value, __system_layout.set, None, None)

    
    # Element staff-layout uses Python identifier staff_layout
    __staff_layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-layout'), 'staff_layout', '__AbsentNamespace0_print__staff_layout', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3), )

    
    staff_layout = property(__staff_layout.value, __staff_layout.set, None, None)

    
    # Attribute staff-spacing uses Python identifier staff_spacing
    __staff_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'staff-spacing'), 'staff_spacing', '__AbsentNamespace0_print__staff_spacing', tenths)
    __staff_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1904, 2)
    __staff_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1904, 2)
    
    staff_spacing = property(__staff_spacing.value, __staff_spacing.set, None, None)

    
    # Attribute new-system uses Python identifier new_system
    __new_system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'new-system'), 'new_system', '__AbsentNamespace0_print__new_system', yes_no)
    __new_system._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1905, 2)
    __new_system._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1905, 2)
    
    new_system = property(__new_system.value, __new_system.set, None, None)

    
    # Attribute new-page uses Python identifier new_page
    __new_page = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'new-page'), 'new_page', '__AbsentNamespace0_print__new_page', yes_no)
    __new_page._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1906, 2)
    __new_page._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1906, 2)
    
    new_page = property(__new_page.value, __new_page.set, None, None)

    
    # Attribute blank-page uses Python identifier blank_page
    __blank_page = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blank-page'), 'blank_page', '__AbsentNamespace0_print__blank_page', pyxb.binding.datatypes.positiveInteger)
    __blank_page._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1907, 2)
    __blank_page._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1907, 2)
    
    blank_page = property(__blank_page.value, __blank_page.set, None, None)

    
    # Attribute page-number uses Python identifier page_number
    __page_number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'page-number'), 'page_number', '__AbsentNamespace0_print__page_number', pyxb.binding.datatypes.token)
    __page_number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1908, 2)
    __page_number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1908, 2)
    
    page_number = property(__page_number.value, __page_number.set, None, None)

    _ElementMap.update({
        __measure_layout.name() : __measure_layout,
        __measure_numbering.name() : __measure_numbering,
        __part_name_display.name() : __part_name_display,
        __part_abbreviation_display.name() : __part_abbreviation_display,
        __page_layout.name() : __page_layout,
        __system_layout.name() : __system_layout,
        __staff_layout.name() : __staff_layout
    })
    _AttributeMap.update({
        __staff_spacing.name() : __staff_spacing,
        __new_system.name() : __new_system,
        __new_page.name() : __new_page,
        __blank_page.name() : __blank_page,
        __page_number.name() : __page_number
    })
Namespace.addCategoryObject('typeBinding', u'print', print_)


# Complex type stick with content type ELEMENT_ONLY
class stick (pyxb.binding.basis.complexTypeDefinition):
    """The stick type represents pictograms where the material of the stick, mallet, or beater is included."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stick')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3396, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element stick-type uses Python identifier stick_type
    __stick_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stick-type'), 'stick_type', '__AbsentNamespace0_stick_stick_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3401, 3), )

    
    stick_type = property(__stick_type.value, __stick_type.set, None, None)

    
    # Element stick-material uses Python identifier stick_material
    __stick_material = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stick-material'), 'stick_material', '__AbsentNamespace0_stick_stick_material', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3402, 3), )

    
    stick_material = property(__stick_material.value, __stick_material.set, None, None)

    
    # Attribute tip uses Python identifier tip
    __tip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tip'), 'tip', '__AbsentNamespace0_stick_tip', tip_direction)
    __tip._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3404, 2)
    __tip._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3404, 2)
    
    tip = property(__tip.value, __tip.set, None, None)

    _ElementMap.update({
        __stick_type.name() : __stick_type,
        __stick_material.name() : __stick_material
    })
    _AttributeMap.update({
        __tip.name() : __tip
    })
Namespace.addCategoryObject('typeBinding', u'stick', stick)


# Complex type wedge with content type EMPTY
class wedge (pyxb.binding.basis.complexTypeDefinition):
    """The wedge type represents crescendo and diminuendo wedge symbols. The type attribute is crescendo for the start of a wedge that is closed at the left side, and diminuendo for the start of a wedge that is closed on the right side. Spread values are measured in tenths; those at the start of a crescendo wedge or end of a diminuendo wedge are ignored. The niente attribute is yes if a circle appears at the point of the wedge, indicating a crescendo from nothing or diminuendo to nothing. It is no by default, and used only when the type is crescendo, or the type is stop for a wedge that began with a diminuendo type. The line-type is solid by default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'wedge')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3415, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_wedge_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_wedge_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_wedge_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute line-type uses Python identifier line_type
    __line_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-type'), 'line_type', '__AbsentNamespace0_wedge_line_type', line_type)
    __line_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    __line_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    
    line_type = property(__line_type.value, __line_type.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_wedge_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_wedge_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_wedge_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_wedge_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_wedge_type', wedge_type, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3419, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3419, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_wedge_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3420, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3420, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute spread uses Python identifier spread
    __spread = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spread'), 'spread', '__AbsentNamespace0_wedge_spread', tenths)
    __spread._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3421, 2)
    __spread._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3421, 2)
    
    spread = property(__spread.value, __spread.set, None, None)

    
    # Attribute niente uses Python identifier niente
    __niente = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'niente'), 'niente', '__AbsentNamespace0_wedge_niente', yes_no)
    __niente._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3422, 2)
    __niente._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3422, 2)
    
    niente = property(__niente.value, __niente.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __spread.name() : __spread,
        __niente.name() : __niente
    })
Namespace.addCategoryObject('typeBinding', u'wedge', wedge)


# Complex type supports with content type EMPTY
class supports (pyxb.binding.basis.complexTypeDefinition):
    """The supports type indicates if a MusicXML encoding supports a particular MusicXML element. This is recommended for elements like beam, stem, and accidental, where the absence of an element is ambiguous if you do not know if the encoding supports that element. For Version 2.0, the supports element is expanded to allow programs to indicate support for particular attributes or particular values. This lets applications communicate, for example, that all system and/or page breaks are contained in the MusicXML file."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'supports')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3494, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_supports_type', yes_no, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3498, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3498, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'element'), 'element', '__AbsentNamespace0_supports_element', pyxb.binding.datatypes.NMTOKEN, required=True)
    __element._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3499, 2)
    __element._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3499, 2)
    
    element = property(__element.value, __element.set, None, None)

    
    # Attribute attribute uses Python identifier attribute
    __attribute = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'attribute'), 'attribute', '__AbsentNamespace0_supports_attribute', pyxb.binding.datatypes.NMTOKEN)
    __attribute._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3500, 2)
    __attribute._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3500, 2)
    
    attribute = property(__attribute.value, __attribute.set, None, None)

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__AbsentNamespace0_supports_value', pyxb.binding.datatypes.token)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3501, 2)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3501, 2)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __element.name() : __element,
        __attribute.name() : __attribute,
        __value.name() : __value
    })
Namespace.addCategoryObject('typeBinding', u'supports', supports)


# Complex type distance with content type SIMPLE
class distance (pyxb.binding.basis.complexTypeDefinition):
    """The distance element represents standard distances between notation elements in tenths. The type attribute defines what type of distance is being defined. Valid values include hyphen (for hyphens in lyrics) and beam."""
    _TypeDefinition = tenths
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'distance')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3518, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is tenths
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_distance_type', distance_type, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3524, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3524, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'distance', distance)


# Complex type line-width with content type SIMPLE
class line_width (pyxb.binding.basis.complexTypeDefinition):
    """The line-width type indicates the width of a line type in tenths. The type attribute defines what type of line is being defined. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. The text content is expressed in tenths."""
    _TypeDefinition = tenths
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'line-width')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3529, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is tenths
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_line_width_type', line_width_type, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3535, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3535, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'line-width', line_width)


# Complex type note-size with content type SIMPLE
class note_size (pyxb.binding.basis.complexTypeDefinition):
    """The note-size type indicates the percentage of the regular note size to use for notes with a cue and large size as defined in the type element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size. The text content represent the numeric percentage. A value of 100 would be identical to the size of a regular note as defined by the music font."""
    _TypeDefinition = non_negative_decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'note-size')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3553, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is non_negative_decimal
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_note_size_type', note_size_type, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3559, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3559, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'note-size', note_size)


# Complex type page-margins with content type ELEMENT_ONLY
class page_margins (pyxb.binding.basis.complexTypeDefinition):
    """Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type attribute is not needed when used as part of a print element. If omitted when the page-margins type is used in the defaults element, "both" is the default value."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'page-margins')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3588, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element top-margin uses Python identifier top_margin
    __top_margin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'top-margin'), 'top_margin', '__AbsentNamespace0_page_margins_top_margin', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5234, 3), )

    
    top_margin = property(__top_margin.value, __top_margin.set, None, None)

    
    # Element bottom-margin uses Python identifier bottom_margin
    __bottom_margin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bottom-margin'), 'bottom_margin', '__AbsentNamespace0_page_margins_bottom_margin', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5235, 3), )

    
    bottom_margin = property(__bottom_margin.value, __bottom_margin.set, None, None)

    
    # Element left-margin uses Python identifier left_margin
    __left_margin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'left-margin'), 'left_margin', '__AbsentNamespace0_page_margins_left_margin', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5255, 3), )

    
    left_margin = property(__left_margin.value, __left_margin.set, None, None)

    
    # Element right-margin uses Python identifier right_margin
    __right_margin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'right-margin'), 'right_margin', '__AbsentNamespace0_page_margins_right_margin', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5256, 3), )

    
    right_margin = property(__right_margin.value, __right_margin.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_page_margins_type', margin_type)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3593, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3593, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __top_margin.name() : __top_margin,
        __bottom_margin.name() : __bottom_margin,
        __left_margin.name() : __left_margin,
        __right_margin.name() : __right_margin
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'page-margins', page_margins)


# Complex type staff-layout with content type ELEMENT_ONLY
class staff_layout (pyxb.binding.basis.complexTypeDefinition):
    """Staff layout includes the vertical distance from the bottom line of the previous staff in this system to the top line of the staff specified by the number attribute. The optional number attribute refers to staff numbers within the part, from top to bottom on the system. A value of 1 is assumed if not present. When used in the defaults element, the values apply to all parts. This value is ignored for the first staff in a system."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'staff-layout')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3606, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element staff-distance uses Python identifier staff_distance
    __staff_distance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff-distance'), 'staff_distance', '__AbsentNamespace0_staff_layout_staff_distance', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3611, 3), )

    
    staff_distance = property(__staff_distance.value, __staff_distance.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_staff_layout_number', staff_number)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3613, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3613, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __staff_distance.name() : __staff_distance
    })
    _AttributeMap.update({
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'staff-layout', staff_layout)


# Complex type link with content type EMPTY
class link (pyxb.binding.basis.complexTypeDefinition):
    """The link type serves as an outgoing simple XLink. It is also used to connect a MusicXML score with a MusicXML opus. If a relative link is used within a document that is part of a compressed MusicXML file, the link is relative to the  root folder of the zip file."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'link')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3660, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_link_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_link_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_link_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_link_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'element'), 'element', '__AbsentNamespace0_link_element', pyxb.binding.datatypes.NMTOKEN)
    __element._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1917, 2)
    __element._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1917, 2)
    
    element = property(__element.value, __element.set, None, None)

    
    # Attribute position uses Python identifier position
    __position = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'position'), 'position', '__AbsentNamespace0_link_position', pyxb.binding.datatypes.positiveInteger)
    __position._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1918, 2)
    __position._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1918, 2)
    
    position = property(__position.value, __position.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__AbsentNamespace0_link_name', pyxb.binding.datatypes.token)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3665, 2)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3665, 2)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI, required=True)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 20, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1926, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_link_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON, fixed=True, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 22, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1927, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.token)
    __role._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 30, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1928, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_link_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.token)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 32, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1929, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'replace')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 34, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1930, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON_2, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 46, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1931, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __element.name() : __element,
        __position.name() : __position,
        __name.name() : __name,
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', u'link', link)


# Complex type arpeggiate with content type EMPTY
class arpeggiate (pyxb.binding.basis.complexTypeDefinition):
    """The arpeggiate type indicates that this note is part of an arpeggiated chord. The number attribute can be used to distinguish between two simultaneous chords arpeggiated separately (different numbers) or together (same number). The up-down attribute is used if there is an arrow on the arpeggio sign. By default, arpeggios go from the lowest to highest note."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'arpeggiate')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3698, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_arpeggiate_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_arpeggiate_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_arpeggiate_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_arpeggiate_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_arpeggiate_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_arpeggiate_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_arpeggiate_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3702, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3702, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'direction'), 'direction', '__AbsentNamespace0_arpeggiate_direction', up_down)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3703, 2)
    __direction._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3703, 2)
    
    direction = property(__direction.value, __direction.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __number.name() : __number,
        __direction.name() : __direction
    })
Namespace.addCategoryObject('typeBinding', u'arpeggiate', arpeggiate)


# Complex type beam with content type SIMPLE
class beam (pyxb.binding.basis.complexTypeDefinition):
    """Beam values include begin, continue, end, forward hook, and backward hook. Up to eight concurrent beams are available to cover up to 1024th notes. Each beam in a note is represented with a separate beam element, starting with the eighth note beam using a number attribute of 1.

Note that the beam number does not distinguish sets of beams that overlap, as it does for slur and other elements. Beaming groups are distinguished by being in different voices and/or the presence or absence of grace and cue elements.

Beams that have a begin value can also have a fan attribute to indicate accelerandos and ritardandos using fanned beams. The fan attribute may also be used with a continue value if the fanning direction changes on that note. The value is "none" if not specified.
	
The repeater attribute has been deprecated in MusicXML 3.0. Formerly used for tremolos, it needs to be specified with a "yes" value for each beam using it."""
    _TypeDefinition = beam_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'beam')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3818, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is beam_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_beam_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_beam_number', beam_level, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3830, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3830, 4)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute repeater uses Python identifier repeater
    __repeater = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'repeater'), 'repeater', '__AbsentNamespace0_beam_repeater', yes_no)
    __repeater._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3831, 4)
    __repeater._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3831, 4)
    
    repeater = property(__repeater.value, __repeater.set, None, None)

    
    # Attribute fan uses Python identifier fan
    __fan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fan'), 'fan', '__AbsentNamespace0_beam_fan', fan)
    __fan._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3832, 4)
    __fan._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3832, 4)
    
    fan = property(__fan.value, __fan.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __number.name() : __number,
        __repeater.name() : __repeater,
        __fan.name() : __fan
    })
Namespace.addCategoryObject('typeBinding', u'beam', beam)


# Complex type grace with content type EMPTY
class grace (pyxb.binding.basis.complexTypeDefinition):
    """The grace type indicates the presence of a grace note. The slash attribute for a grace note is yes for slashed eighth notes. The other grace note attributes come from MuseData sound suggestions. The steal-time-previous attribute indicates the percentage of time to steal from the previous note for the grace note. The steal-time-following attribute indicates the percentage of time to steal from the following note for the grace note, as for appoggiaturas. The make-time attribute indicates to make time, not steal time; the units are in real-time divisions for the grace note."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'grace')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3967, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute steal-time-previous uses Python identifier steal_time_previous
    __steal_time_previous = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'steal-time-previous'), 'steal_time_previous', '__AbsentNamespace0_grace_steal_time_previous', percent)
    __steal_time_previous._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3971, 2)
    __steal_time_previous._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3971, 2)
    
    steal_time_previous = property(__steal_time_previous.value, __steal_time_previous.set, None, None)

    
    # Attribute steal-time-following uses Python identifier steal_time_following
    __steal_time_following = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'steal-time-following'), 'steal_time_following', '__AbsentNamespace0_grace_steal_time_following', percent)
    __steal_time_following._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3972, 2)
    __steal_time_following._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3972, 2)
    
    steal_time_following = property(__steal_time_following.value, __steal_time_following.set, None, None)

    
    # Attribute make-time uses Python identifier make_time
    __make_time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'make-time'), 'make_time', '__AbsentNamespace0_grace_make_time', divisions)
    __make_time._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3973, 2)
    __make_time._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3973, 2)
    
    make_time = property(__make_time.value, __make_time.set, None, None)

    
    # Attribute slash uses Python identifier slash
    __slash = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'slash'), 'slash', '__AbsentNamespace0_grace_slash', yes_no)
    __slash._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3974, 2)
    __slash._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3974, 2)
    
    slash = property(__slash.value, __slash.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __steal_time_previous.name() : __steal_time_previous,
        __steal_time_following.name() : __steal_time_following,
        __make_time.name() : __make_time,
        __slash.name() : __slash
    })
Namespace.addCategoryObject('typeBinding', u'grace', grace)


# Complex type hole-closed with content type SIMPLE
class hole_closed (pyxb.binding.basis.complexTypeDefinition):
    """The hole-closed type represents whether the hole is closed, open, or half-open. The optional location attribute indicates which portion of the hole is filled in when the element value is half."""
    _TypeDefinition = hole_closed_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'hole-closed')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4075, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is hole_closed_value
    
    # Attribute location uses Python identifier location
    __location = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'location'), 'location', '__AbsentNamespace0_hole_closed_location', hole_closed_location)
    __location._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4081, 4)
    __location._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4081, 4)
    
    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __location.name() : __location
    })
Namespace.addCategoryObject('typeBinding', u'hole-closed', hole_closed)


# Complex type lyric with content type ELEMENT_ONLY
class lyric (pyxb.binding.basis.complexTypeDefinition):
    """The lyric type represents text underlays for lyrics, based on Humdrum with support for other formats. Two text elements that are not separated by an elision element are part of the same syllable, but may have different text formatting. The MusicXML 2.0 XSD is more strict than the 2.0 DTD in enforcing this by disallowing a second syllabic element unless preceded by an elision element. The lyric number indicates multiple lines, though a name can be used as well (as in Finale's verse / chorus / section specification). Justification is center by default; placement is below by default. The content of the elision type is used to specify the symbol used to display the elision. Common values are a no-break space (Unicode 00A0), an underscore (Unicode 005F), or an undertie (Unicode 203F)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'lyric')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4093, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element syllabic uses Python identifier syllabic
    __syllabic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'syllabic'), 'syllabic', '__AbsentNamespace0_lyric_syllabic', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4100, 5), )

    
    syllabic = property(__syllabic.value, __syllabic.set, None, None)

    
    # Element text uses Python identifier text
    __text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__AbsentNamespace0_lyric_text', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4101, 5), )

    
    text = property(__text.value, __text.set, None, None)

    
    # Element elision uses Python identifier elision
    __elision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'elision'), 'elision', '__AbsentNamespace0_lyric_elision', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4104, 7), )

    
    elision = property(__elision.value, __elision.set, None, None)

    
    # Element extend uses Python identifier extend_
    __extend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'extend'), 'extend_', '__AbsentNamespace0_lyric_extend', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4109, 5), )

    
    extend_ = property(__extend.value, __extend.set, None, None)

    
    # Element laughing uses Python identifier laughing
    __laughing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'laughing'), 'laughing', '__AbsentNamespace0_lyric_laughing', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4112, 4), )

    
    laughing = property(__laughing.value, __laughing.set, None, u'The laughing element is taken from Humdrum.')

    
    # Element humming uses Python identifier humming
    __humming = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'humming'), 'humming', '__AbsentNamespace0_lyric_humming', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4117, 4), )

    
    humming = property(__humming.value, __humming.set, None, u'The humming element is taken from Humdrum.')

    
    # Element end-line uses Python identifier end_line
    __end_line = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'end-line'), 'end_line', '__AbsentNamespace0_lyric_end_line', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4123, 3), )

    
    end_line = property(__end_line.value, __end_line.set, None, u'The end-line element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.')

    
    # Element end-paragraph uses Python identifier end_paragraph
    __end_paragraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'end-paragraph'), 'end_paragraph', '__AbsentNamespace0_lyric_end_paragraph', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4128, 3), )

    
    end_paragraph = property(__end_paragraph.value, __end_paragraph.set, None, u'The end-paragraph element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.')

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_lyric_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_lyric_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_lyric_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute justify uses Python identifier justify
    __justify = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justify'), 'justify', '__AbsentNamespace0_lyric_justify', left_center_right)
    __justify._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    __justify._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    
    justify = property(__justify.value, __justify.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_lyric_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_lyric_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_lyric_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_lyric_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_lyric_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_lyric_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_lyric_number', pyxb.binding.datatypes.NMTOKEN)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4135, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4135, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__AbsentNamespace0_lyric_name', pyxb.binding.datatypes.token)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4136, 2)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4136, 2)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __syllabic.name() : __syllabic,
        __text.name() : __text,
        __elision.name() : __elision,
        __extend.name() : __extend,
        __laughing.name() : __laughing,
        __humming.name() : __humming,
        __end_line.name() : __end_line,
        __end_paragraph.name() : __end_paragraph,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __color.name() : __color,
        __justify.name() : __justify,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number,
        __name.name() : __name
    })
Namespace.addCategoryObject('typeBinding', u'lyric', lyric)


# Complex type non-arpeggiate with content type EMPTY
class non_arpeggiate (pyxb.binding.basis.complexTypeDefinition):
    """The non-arpeggiate type indicates that this note is at the top or bottom of a bracket indicating to not arpeggiate these notes. Since this does not involve playback, it is only used on the top or bottom notes, not on each note as for the arpeggiate type."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'non-arpeggiate')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4157, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_non_arpeggiate_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_non_arpeggiate_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_non_arpeggiate_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_non_arpeggiate_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_non_arpeggiate_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_non_arpeggiate_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_non_arpeggiate_type', top_bottom, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4161, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4161, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_non_arpeggiate_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4162, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4162, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'non-arpeggiate', non_arpeggiate)


# Complex type notations with content type ELEMENT_ONLY
class notations (pyxb.binding.basis.complexTypeDefinition):
    """Notations refer to musical notations, not XML notations. Multiple notations are allowed in order to represent multiple editorial levels. The print-object attribute, added in Version 3.0, allows notations to represent details of performance technique, such as fingerings, without having them appear in the score."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'notations')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4168, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element tied uses Python identifier tied
    __tied = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tied'), 'tied', '__AbsentNamespace0_notations_tied', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4175, 4), )

    
    tied = property(__tied.value, __tied.set, None, None)

    
    # Element slur uses Python identifier slur
    __slur = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'slur'), 'slur', '__AbsentNamespace0_notations_slur', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4176, 4), )

    
    slur = property(__slur.value, __slur.set, None, None)

    
    # Element tuplet uses Python identifier tuplet
    __tuplet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuplet'), 'tuplet', '__AbsentNamespace0_notations_tuplet', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4177, 4), )

    
    tuplet = property(__tuplet.value, __tuplet.set, None, None)

    
    # Element glissando uses Python identifier glissando
    __glissando = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'glissando'), 'glissando', '__AbsentNamespace0_notations_glissando', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4178, 4), )

    
    glissando = property(__glissando.value, __glissando.set, None, None)

    
    # Element slide uses Python identifier slide
    __slide = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'slide'), 'slide', '__AbsentNamespace0_notations_slide', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4179, 4), )

    
    slide = property(__slide.value, __slide.set, None, None)

    
    # Element ornaments uses Python identifier ornaments
    __ornaments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ornaments'), 'ornaments', '__AbsentNamespace0_notations_ornaments', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4180, 4), )

    
    ornaments = property(__ornaments.value, __ornaments.set, None, None)

    
    # Element technical uses Python identifier technical
    __technical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'technical'), 'technical', '__AbsentNamespace0_notations_technical', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4181, 4), )

    
    technical = property(__technical.value, __technical.set, None, None)

    
    # Element articulations uses Python identifier articulations
    __articulations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'articulations'), 'articulations', '__AbsentNamespace0_notations_articulations', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4182, 4), )

    
    articulations = property(__articulations.value, __articulations.set, None, None)

    
    # Element dynamics uses Python identifier dynamics
    __dynamics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'dynamics'), 'dynamics', '__AbsentNamespace0_notations_dynamics', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4183, 4), )

    
    dynamics = property(__dynamics.value, __dynamics.set, None, None)

    
    # Element fermata uses Python identifier fermata
    __fermata = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fermata'), 'fermata', '__AbsentNamespace0_notations_fermata', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4184, 4), )

    
    fermata = property(__fermata.value, __fermata.set, None, None)

    
    # Element arpeggiate uses Python identifier arpeggiate
    __arpeggiate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'arpeggiate'), 'arpeggiate', '__AbsentNamespace0_notations_arpeggiate', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4185, 4), )

    
    arpeggiate = property(__arpeggiate.value, __arpeggiate.set, None, None)

    
    # Element non-arpeggiate uses Python identifier non_arpeggiate
    __non_arpeggiate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'non-arpeggiate'), 'non_arpeggiate', '__AbsentNamespace0_notations_non_arpeggiate', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4186, 4), )

    
    non_arpeggiate = property(__non_arpeggiate.value, __non_arpeggiate.set, None, None)

    
    # Element accidental-mark uses Python identifier accidental_mark
    __accidental_mark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accidental-mark'), 'accidental_mark', '__AbsentNamespace0_notations_accidental_mark', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4187, 4), )

    
    accidental_mark = property(__accidental_mark.value, __accidental_mark.set, None, None)

    
    # Element other-notation uses Python identifier other_notation
    __other_notation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-notation'), 'other_notation', '__AbsentNamespace0_notations_other_notation', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4188, 4), )

    
    other_notation = property(__other_notation.value, __other_notation.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_notations_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_notations_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_notations_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __tied.name() : __tied,
        __slur.name() : __slur,
        __tuplet.name() : __tuplet,
        __glissando.name() : __glissando,
        __slide.name() : __slide,
        __ornaments.name() : __ornaments,
        __technical.name() : __technical,
        __articulations.name() : __articulations,
        __dynamics.name() : __dynamics,
        __fermata.name() : __fermata,
        __arpeggiate.name() : __arpeggiate,
        __non_arpeggiate.name() : __non_arpeggiate,
        __accidental_mark.name() : __accidental_mark,
        __other_notation.name() : __other_notation,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __print_object.name() : __print_object
    })
Namespace.addCategoryObject('typeBinding', u'notations', notations)


# Complex type note-type with content type SIMPLE
class note_type (pyxb.binding.basis.complexTypeDefinition):
    """The note-type type indicates the graphic note type. Values range from 256th to long. The size attribute indicates full, cue, or large size, with full the default for regular notes and cue the default for cue and grace notes."""
    _TypeDefinition = note_type_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'note-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4253, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is note_type_value
    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__AbsentNamespace0_note_type_size', symbol_size)
    __size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4259, 4)
    __size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4259, 4)
    
    size = property(__size.value, __size.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __size.name() : __size
    })
Namespace.addCategoryObject('typeBinding', u'note-type', note_type)


# Complex type rest with content type ELEMENT_ONLY
class rest (pyxb.binding.basis.complexTypeDefinition):
    """The rest element indicates notated rests or silences. Rest elements are usually empty, but placement on the staff can be specified using display-step and display-octave elements. If the measure attribute is set to yes, this indicates this is a complete measure rest."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'rest')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4400, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element display-step uses Python identifier display_step
    __display_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'display-step'), 'display_step', '__AbsentNamespace0_rest_display_step', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5280, 3), )

    
    display_step = property(__display_step.value, __display_step.set, None, None)

    
    # Element display-octave uses Python identifier display_octave
    __display_octave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'display-octave'), 'display_octave', '__AbsentNamespace0_rest_display_octave', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5281, 3), )

    
    display_octave = property(__display_octave.value, __display_octave.set, None, None)

    
    # Attribute measure uses Python identifier measure
    __measure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measure'), 'measure', '__AbsentNamespace0_rest_measure', yes_no)
    __measure._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4407, 2)
    __measure._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4407, 2)
    
    measure = property(__measure.value, __measure.set, None, None)

    _ElementMap.update({
        __display_step.name() : __display_step,
        __display_octave.name() : __display_octave
    })
    _AttributeMap.update({
        __measure.name() : __measure
    })
Namespace.addCategoryObject('typeBinding', u'rest', rest)


# Complex type slur with content type EMPTY
class slur (pyxb.binding.basis.complexTypeDefinition):
    """Slur types are empty. Most slurs are represented with two elements: one with a start type, and one with a stop type. Slurs can add more elements using a continue type. This is typically used to specify the formatting of cross-system slurs, or to specify the shape of very complex slurs."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'slur')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4426, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bezier-offset uses Python identifier bezier_offset
    __bezier_offset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-offset'), 'bezier_offset', '__AbsentNamespace0_slur_bezier_offset', divisions)
    __bezier_offset._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1573, 2)
    __bezier_offset._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1573, 2)
    
    bezier_offset = property(__bezier_offset.value, __bezier_offset.set, None, None)

    
    # Attribute bezier-offset2 uses Python identifier bezier_offset2
    __bezier_offset2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-offset2'), 'bezier_offset2', '__AbsentNamespace0_slur_bezier_offset2', divisions)
    __bezier_offset2._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1574, 2)
    __bezier_offset2._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1574, 2)
    
    bezier_offset2 = property(__bezier_offset2.value, __bezier_offset2.set, None, None)

    
    # Attribute bezier-x uses Python identifier bezier_x
    __bezier_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-x'), 'bezier_x', '__AbsentNamespace0_slur_bezier_x', tenths)
    __bezier_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1575, 2)
    __bezier_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1575, 2)
    
    bezier_x = property(__bezier_x.value, __bezier_x.set, None, None)

    
    # Attribute bezier-y uses Python identifier bezier_y
    __bezier_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-y'), 'bezier_y', '__AbsentNamespace0_slur_bezier_y', tenths)
    __bezier_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1576, 2)
    __bezier_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1576, 2)
    
    bezier_y = property(__bezier_y.value, __bezier_y.set, None, None)

    
    # Attribute bezier-x2 uses Python identifier bezier_x2
    __bezier_x2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-x2'), 'bezier_x2', '__AbsentNamespace0_slur_bezier_x2', tenths)
    __bezier_x2._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1577, 2)
    __bezier_x2._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1577, 2)
    
    bezier_x2 = property(__bezier_x2.value, __bezier_x2.set, None, None)

    
    # Attribute bezier-y2 uses Python identifier bezier_y2
    __bezier_y2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-y2'), 'bezier_y2', '__AbsentNamespace0_slur_bezier_y2', tenths)
    __bezier_y2._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1578, 2)
    __bezier_y2._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1578, 2)
    
    bezier_y2 = property(__bezier_y2.value, __bezier_y2.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_slur_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_slur_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_slur_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute line-type uses Python identifier line_type
    __line_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-type'), 'line_type', '__AbsentNamespace0_slur_line_type', line_type)
    __line_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    __line_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    
    line_type = property(__line_type.value, __line_type.set, None, None)

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__AbsentNamespace0_slur_orientation', over_under)
    __orientation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1691, 2)
    __orientation._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1691, 2)
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_slur_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_slur_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_slur_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_slur_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_slur_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_slur_type', start_stop_continue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4430, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4430, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_slur_number', number_level, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4431, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4431, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __bezier_offset.name() : __bezier_offset,
        __bezier_offset2.name() : __bezier_offset2,
        __bezier_x.name() : __bezier_x,
        __bezier_y.name() : __bezier_y,
        __bezier_x2.name() : __bezier_x2,
        __bezier_y2.name() : __bezier_y2,
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __orientation.name() : __orientation,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'slur', slur)


# Complex type stem with content type SIMPLE
class stem (pyxb.binding.basis.complexTypeDefinition):
    """Stems can be down, up, none, or double. For down and up stems, the position attributes can be used to specify stem length. The relative values specify the end of the stem relative to the program default. Default values specify an absolute end stem position. Negative values of relative-y that would flip a stem instead of shortening it are ignored. A stem element associated with a rest refers to a stemlet."""
    _TypeDefinition = stem_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stem')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4441, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is stem_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_stem_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_stem_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1879, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1879, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_stem_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1880, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1880, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_stem_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1881, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1881, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_stem_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1882, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1882, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'stem', stem)


# Complex type tie with content type EMPTY
class tie (pyxb.binding.basis.complexTypeDefinition):
    """The tie element indicates that a tie begins or ends with this note. If the tie element applies only particular times through a repeat, the time-only attribute indicates which times to apply it. The tie element indicates sound; the tied element indicates notation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tie')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4589, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_tie_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4593, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4593, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute time-only uses Python identifier time_only
    __time_only = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time-only'), 'time_only', '__AbsentNamespace0_tie_time_only', time_only)
    __time_only._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4594, 2)
    __time_only._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4594, 2)
    
    time_only = property(__time_only.value, __time_only.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __time_only.name() : __time_only
    })
Namespace.addCategoryObject('typeBinding', u'tie', tie)


# Complex type tied with content type EMPTY
class tied (pyxb.binding.basis.complexTypeDefinition):
    """The tied type represents the notated tie. The tie element represents the tie sound.

The number attribute is rarely needed to disambiguate ties, since note pitches will usually suffice. The attribute is implied rather than defaulting to 1 as with most elements. It is available for use in more complex tied notation situations."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tied')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4597, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bezier-offset uses Python identifier bezier_offset
    __bezier_offset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-offset'), 'bezier_offset', '__AbsentNamespace0_tied_bezier_offset', divisions)
    __bezier_offset._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1573, 2)
    __bezier_offset._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1573, 2)
    
    bezier_offset = property(__bezier_offset.value, __bezier_offset.set, None, None)

    
    # Attribute bezier-offset2 uses Python identifier bezier_offset2
    __bezier_offset2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-offset2'), 'bezier_offset2', '__AbsentNamespace0_tied_bezier_offset2', divisions)
    __bezier_offset2._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1574, 2)
    __bezier_offset2._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1574, 2)
    
    bezier_offset2 = property(__bezier_offset2.value, __bezier_offset2.set, None, None)

    
    # Attribute bezier-x uses Python identifier bezier_x
    __bezier_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-x'), 'bezier_x', '__AbsentNamespace0_tied_bezier_x', tenths)
    __bezier_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1575, 2)
    __bezier_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1575, 2)
    
    bezier_x = property(__bezier_x.value, __bezier_x.set, None, None)

    
    # Attribute bezier-y uses Python identifier bezier_y
    __bezier_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-y'), 'bezier_y', '__AbsentNamespace0_tied_bezier_y', tenths)
    __bezier_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1576, 2)
    __bezier_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1576, 2)
    
    bezier_y = property(__bezier_y.value, __bezier_y.set, None, None)

    
    # Attribute bezier-x2 uses Python identifier bezier_x2
    __bezier_x2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-x2'), 'bezier_x2', '__AbsentNamespace0_tied_bezier_x2', tenths)
    __bezier_x2._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1577, 2)
    __bezier_x2._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1577, 2)
    
    bezier_x2 = property(__bezier_x2.value, __bezier_x2.set, None, None)

    
    # Attribute bezier-y2 uses Python identifier bezier_y2
    __bezier_y2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bezier-y2'), 'bezier_y2', '__AbsentNamespace0_tied_bezier_y2', tenths)
    __bezier_y2._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1578, 2)
    __bezier_y2._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1578, 2)
    
    bezier_y2 = property(__bezier_y2.value, __bezier_y2.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_tied_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_tied_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_tied_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute line-type uses Python identifier line_type
    __line_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-type'), 'line_type', '__AbsentNamespace0_tied_line_type', line_type)
    __line_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    __line_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    
    line_type = property(__line_type.value, __line_type.set, None, None)

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__AbsentNamespace0_tied_orientation', over_under)
    __orientation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1691, 2)
    __orientation._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1691, 2)
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_tied_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_tied_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_tied_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_tied_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_tied_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_tied_type', start_stop_continue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4603, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4603, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_tied_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4604, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4604, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __bezier_offset.name() : __bezier_offset,
        __bezier_offset2.name() : __bezier_offset2,
        __bezier_x.name() : __bezier_x,
        __bezier_y.name() : __bezier_y,
        __bezier_x2.name() : __bezier_x2,
        __bezier_y2.name() : __bezier_y2,
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __orientation.name() : __orientation,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'tied', tied)


# Complex type tuplet with content type ELEMENT_ONLY
class tuplet (pyxb.binding.basis.complexTypeDefinition):
    """A tuplet element is present when a tuplet is to be displayed graphically, in addition to the sound data provided by the time-modification elements. The number attribute is used to distinguish nested tuplets. The bracket attribute is used to indicate the presence of a bracket. If unspecified, the results are implementation-dependent. The line-shape attribute is used to specify whether the bracket is straight or in the older curved or slurred style. It is straight by default.
	
Whereas a time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type, the tuplet element describes how this is displayed. The tuplet element also provides more detailed representation information than the time-modification element, and is needed to represent nested tuplets and other complex tuplets accurately. 
	
The show-number attribute is used to display either the number of actual notes, the number of both actual and normal notes, or neither. It is actual by default. The show-type attribute is used to display either the actual type, both the actual and normal types, or neither. It is none by default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tuplet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4661, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element tuplet-actual uses Python identifier tuplet_actual
    __tuplet_actual = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuplet-actual'), 'tuplet_actual', '__AbsentNamespace0_tuplet_tuplet_actual', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4670, 3), )

    
    tuplet_actual = property(__tuplet_actual.value, __tuplet_actual.set, None, u'The tuplet-actual element provide optional full control over how the actual part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.')

    
    # Element tuplet-normal uses Python identifier tuplet_normal
    __tuplet_normal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tuplet-normal'), 'tuplet_normal', '__AbsentNamespace0_tuplet_tuplet_normal', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4675, 3), )

    
    tuplet_normal = property(__tuplet_normal.value, __tuplet_normal.set, None, u'The tuplet-normal element provide optional full control over how the normal part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.')

    
    # Attribute line-shape uses Python identifier line_shape
    __line_shape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-shape'), 'line_shape', '__AbsentNamespace0_tuplet_line_shape', line_shape)
    __line_shape._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1677, 2)
    __line_shape._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1677, 2)
    
    line_shape = property(__line_shape.value, __line_shape.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_tuplet_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_tuplet_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_tuplet_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_tuplet_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_tuplet_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_tuplet_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4681, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4681, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_tuplet_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4682, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4682, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute bracket uses Python identifier bracket
    __bracket = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bracket'), 'bracket', '__AbsentNamespace0_tuplet_bracket', yes_no)
    __bracket._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4683, 2)
    __bracket._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4683, 2)
    
    bracket = property(__bracket.value, __bracket.set, None, None)

    
    # Attribute show-number uses Python identifier show_number
    __show_number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'show-number'), 'show_number', '__AbsentNamespace0_tuplet_show_number', show_tuplet)
    __show_number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4684, 2)
    __show_number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4684, 2)
    
    show_number = property(__show_number.value, __show_number.set, None, None)

    
    # Attribute show-type uses Python identifier show_type
    __show_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'show-type'), 'show_type', '__AbsentNamespace0_tuplet_show_type', show_tuplet)
    __show_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4685, 2)
    __show_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4685, 2)
    
    show_type = property(__show_type.value, __show_type.set, None, None)

    _ElementMap.update({
        __tuplet_actual.name() : __tuplet_actual,
        __tuplet_normal.name() : __tuplet_normal
    })
    _AttributeMap.update({
        __line_shape.name() : __line_shape,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __bracket.name() : __bracket,
        __show_number.name() : __show_number,
        __show_type.name() : __show_type
    })
Namespace.addCategoryObject('typeBinding', u'tuplet', tuplet)


# Complex type group-barline with content type SIMPLE
class group_barline (pyxb.binding.basis.complexTypeDefinition):
    """The group-barline type indicates if the group should have common barlines."""
    _TypeDefinition = group_barline_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'group-barline')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4797, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is group_barline_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_group_barline_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color
    })
Namespace.addCategoryObject('typeBinding', u'group-barline', group_barline)


# Complex type group-symbol with content type SIMPLE
class group_symbol (pyxb.binding.basis.complexTypeDefinition):
    """The group-symbol type indicates how the symbol for a group is indicated in the score."""
    _TypeDefinition = group_symbol_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'group-symbol')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4819, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is group_symbol_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_group_symbol_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_group_symbol_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_group_symbol_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_group_symbol_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_group_symbol_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'group-symbol', group_symbol)


# Complex type opus with content type EMPTY
class opus (pyxb.binding.basis.complexTypeDefinition):
    """The opus type represents a link to a MusicXML opus document that composes multiple MusicXML scores into a collection."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'opus')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4849, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI, required=True)
    __href._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 20, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1926, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON, fixed=True, unicode_default=u'simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 22, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1927, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.token)
    __role._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 30, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1928, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.token)
    __title._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 32, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1929, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default=u'replace')
    __show._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 34, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1930, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON_2, unicode_default=u'onRequest')
    __actuate._DeclarationLocation = pyxb.utils.utility.Location(u'http://www.musicxml.org/xsd/xlink.xsd', 46, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1931, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', u'opus', opus)


# Complex type part-group with content type ELEMENT_ONLY
class part_group (pyxb.binding.basis.complexTypeDefinition):
    """The part-group element indicates groupings of parts in the score, usually indicated by braces and brackets. Braces that are used for multi-staff parts should be defined in the attributes element for that part. The part-group start element appears before the first score-part in the group. The part-group stop element appears after the last score-part in the group.
	
The number attribute is used to distinguish overlapping and nested part-groups, not the sequence of groups. As with parts, groups can have a name and abbreviation. Values for the child elements are ignored at the stop of a group. 
	
A part-group element is not needed for a single multi-staff part. By default, multi-staff parts include a brace symbol and (if appropriate given the bar-style) common barlines. The symbol formatting for a multi-staff part can be more fully specified using the part-symbol element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'part-group')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4856, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element group-name uses Python identifier group_name
    __group_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group-name'), 'group_name', '__AbsentNamespace0_part_group_group_name', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4865, 3), )

    
    group_name = property(__group_name.value, __group_name.set, None, None)

    
    # Element group-name-display uses Python identifier group_name_display
    __group_name_display = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group-name-display'), 'group_name_display', '__AbsentNamespace0_part_group_group_name_display', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4866, 3), )

    
    group_name_display = property(__group_name_display.value, __group_name_display.set, None, u'Formatting specified in the group-name-display element overrides formatting specified in the group-name element.')

    
    # Element group-abbreviation uses Python identifier group_abbreviation
    __group_abbreviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group-abbreviation'), 'group_abbreviation', '__AbsentNamespace0_part_group_group_abbreviation', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4871, 3), )

    
    group_abbreviation = property(__group_abbreviation.value, __group_abbreviation.set, None, None)

    
    # Element group-abbreviation-display uses Python identifier group_abbreviation_display
    __group_abbreviation_display = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group-abbreviation-display'), 'group_abbreviation_display', '__AbsentNamespace0_part_group_group_abbreviation_display', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4872, 3), )

    
    group_abbreviation_display = property(__group_abbreviation_display.value, __group_abbreviation_display.set, None, u'Formatting specified in the group-abbreviation-display element overrides formatting specified in the group-abbreviation element.')

    
    # Element group-symbol uses Python identifier group_symbol
    __group_symbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group-symbol'), 'group_symbol', '__AbsentNamespace0_part_group_group_symbol', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4877, 3), )

    
    group_symbol = property(__group_symbol.value, __group_symbol.set, None, None)

    
    # Element group-barline uses Python identifier group_barline
    __group_barline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group-barline'), 'group_barline', '__AbsentNamespace0_part_group_group_barline', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4878, 3), )

    
    group_barline = property(__group_barline.value, __group_barline.set, None, None)

    
    # Element group-time uses Python identifier group_time
    __group_time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'group-time'), 'group_time', '__AbsentNamespace0_part_group_group_time', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4879, 3), )

    
    group_time = property(__group_time.value, __group_time.set, None, u'The group-time element indicates that the displayed time signatures should stretch across all parts and staves in the group.')

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_part_group_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_part_group_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_part_group_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4886, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4886, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_part_group_number', pyxb.binding.datatypes.token, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4887, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4887, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __group_name.name() : __group_name,
        __group_name_display.name() : __group_name_display,
        __group_abbreviation.name() : __group_abbreviation,
        __group_abbreviation_display.name() : __group_abbreviation_display,
        __group_symbol.name() : __group_symbol,
        __group_barline.name() : __group_barline,
        __group_time.name() : __group_time,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'part-group', part_group)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5389, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'note'), 'note', '__AbsentNamespace0_CTD_ANON_4_note', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5311, 4), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element backup uses Python identifier backup
    __backup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'backup'), 'backup', '__AbsentNamespace0_CTD_ANON_4_backup', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5312, 4), )

    
    backup = property(__backup.value, __backup.set, None, None)

    
    # Element forward uses Python identifier forward
    __forward = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'forward'), 'forward', '__AbsentNamespace0_CTD_ANON_4_forward', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5313, 4), )

    
    forward = property(__forward.value, __forward.set, None, None)

    
    # Element direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'direction'), 'direction', '__AbsentNamespace0_CTD_ANON_4_direction', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5314, 4), )

    
    direction = property(__direction.value, __direction.set, None, None)

    
    # Element attributes uses Python identifier attributes
    __attributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'attributes'), 'attributes', '__AbsentNamespace0_CTD_ANON_4_attributes', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5315, 4), )

    
    attributes = property(__attributes.value, __attributes.set, None, None)

    
    # Element harmony uses Python identifier harmony
    __harmony = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'harmony'), 'harmony', '__AbsentNamespace0_CTD_ANON_4_harmony', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5316, 4), )

    
    harmony = property(__harmony.value, __harmony.set, None, None)

    
    # Element figured-bass uses Python identifier figured_bass
    __figured_bass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'figured-bass'), 'figured_bass', '__AbsentNamespace0_CTD_ANON_4_figured_bass', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5317, 4), )

    
    figured_bass = property(__figured_bass.value, __figured_bass.set, None, None)

    
    # Element print uses Python identifier print_
    __print = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'print'), 'print_', '__AbsentNamespace0_CTD_ANON_4_print', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5318, 4), )

    
    print_ = property(__print.value, __print.set, None, None)

    
    # Element sound uses Python identifier sound
    __sound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sound'), 'sound', '__AbsentNamespace0_CTD_ANON_4_sound', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5319, 4), )

    
    sound = property(__sound.value, __sound.set, None, None)

    
    # Element barline uses Python identifier barline
    __barline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'barline'), 'barline', '__AbsentNamespace0_CTD_ANON_4_barline', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5320, 4), )

    
    barline = property(__barline.value, __barline.set, None, None)

    
    # Element grouping uses Python identifier grouping
    __grouping = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'grouping'), 'grouping', '__AbsentNamespace0_CTD_ANON_4_grouping', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5321, 4), )

    
    grouping = property(__grouping.value, __grouping.set, None, None)

    
    # Element link uses Python identifier link
    __link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'link'), 'link', '__AbsentNamespace0_CTD_ANON_4_link', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5322, 4), )

    
    link = property(__link.value, __link.set, None, None)

    
    # Element bookmark uses Python identifier bookmark
    __bookmark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bookmark'), 'bookmark', '__AbsentNamespace0_CTD_ANON_4_bookmark', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5323, 4), )

    
    bookmark = property(__bookmark.value, __bookmark.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_CTD_ANON_4_number', pyxb.binding.datatypes.token, required=True)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1956, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1956, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute implicit uses Python identifier implicit
    __implicit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'implicit'), 'implicit', '__AbsentNamespace0_CTD_ANON_4_implicit', yes_no)
    __implicit._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1957, 2)
    __implicit._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1957, 2)
    
    implicit = property(__implicit.value, __implicit.set, None, None)

    
    # Attribute non-controlling uses Python identifier non_controlling
    __non_controlling = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'non-controlling'), 'non_controlling', '__AbsentNamespace0_CTD_ANON_4_non_controlling', yes_no)
    __non_controlling._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1958, 2)
    __non_controlling._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1958, 2)
    
    non_controlling = property(__non_controlling.value, __non_controlling.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__AbsentNamespace0_CTD_ANON_4_width', tenths)
    __width._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1959, 2)
    __width._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1959, 2)
    
    width = property(__width.value, __width.set, None, None)

    _ElementMap.update({
        __note.name() : __note,
        __backup.name() : __backup,
        __forward.name() : __forward,
        __direction.name() : __direction,
        __attributes.name() : __attributes,
        __harmony.name() : __harmony,
        __figured_bass.name() : __figured_bass,
        __print.name() : __print,
        __sound.name() : __sound,
        __barline.name() : __barline,
        __grouping.name() : __grouping,
        __link.name() : __link,
        __bookmark.name() : __bookmark
    })
    _AttributeMap.update({
        __number.name() : __number,
        __implicit.name() : __implicit,
        __non_controlling.name() : __non_controlling,
        __width.name() : __width
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5411, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element part uses Python identifier part
    __part = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'part'), 'part', '__AbsentNamespace0_CTD_ANON_5_part', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5413, 7), )

    
    part = property(__part.value, __part.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_CTD_ANON_5_number', pyxb.binding.datatypes.token, required=True)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1956, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1956, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute implicit uses Python identifier implicit
    __implicit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'implicit'), 'implicit', '__AbsentNamespace0_CTD_ANON_5_implicit', yes_no)
    __implicit._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1957, 2)
    __implicit._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1957, 2)
    
    implicit = property(__implicit.value, __implicit.set, None, None)

    
    # Attribute non-controlling uses Python identifier non_controlling
    __non_controlling = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'non-controlling'), 'non_controlling', '__AbsentNamespace0_CTD_ANON_5_non_controlling', yes_no)
    __non_controlling._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1958, 2)
    __non_controlling._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1958, 2)
    
    non_controlling = property(__non_controlling.value, __non_controlling.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__AbsentNamespace0_CTD_ANON_5_width', tenths)
    __width._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1959, 2)
    __width._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1959, 2)
    
    width = property(__width.value, __width.set, None, None)

    _ElementMap.update({
        __part.name() : __part
    })
    _AttributeMap.update({
        __number.name() : __number,
        __implicit.name() : __implicit,
        __non_controlling.name() : __non_controlling,
        __width.name() : __width
    })



# Complex type accidental-text with content type SIMPLE
class accidental_text (pyxb.binding.basis.complexTypeDefinition):
    """The accidental-text type represents an element with an accidental value and text-formatting attributes."""
    _TypeDefinition = accidental_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accidental-text')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1980, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is accidental_value
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_accidental_text_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1810, 2)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__AbsentNamespace0_accidental_text_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space)
    __space._DeclarationLocation = None
    __space._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1811, 2)
    
    space = property(__space.value, __space.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_accidental_text_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute enclosure uses Python identifier enclosure
    __enclosure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enclosure'), 'enclosure', '__AbsentNamespace0_accidental_text_enclosure', enclosure_shape)
    __enclosure._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    
    enclosure = property(__enclosure.value, __enclosure.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_accidental_text_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_accidental_text_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_accidental_text_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_accidental_text_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_accidental_text_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute justify uses Python identifier justify
    __justify = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justify'), 'justify', '__AbsentNamespace0_accidental_text_justify', left_center_right)
    __justify._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    __justify._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    
    justify = property(__justify.value, __justify.set, None, None)

    
    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_accidental_text_letter_spacing', number_or_normal)
    __letter_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    
    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)

    
    # Attribute line-height uses Python identifier line_height
    __line_height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-height'), 'line_height', '__AbsentNamespace0_accidental_text_line_height', number_or_normal)
    __line_height._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1670, 2)
    __line_height._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1670, 2)
    
    line_height = property(__line_height.value, __line_height.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_accidental_text_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_accidental_text_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_accidental_text_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_accidental_text_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute underline uses Python identifier underline
    __underline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'underline'), 'underline', '__AbsentNamespace0_accidental_text_underline', number_of_lines)
    __underline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    __underline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    
    underline = property(__underline.value, __underline.set, None, None)

    
    # Attribute overline uses Python identifier overline
    __overline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'overline'), 'overline', '__AbsentNamespace0_accidental_text_overline', number_of_lines)
    __overline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    __overline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    
    overline = property(__overline.value, __overline.set, None, None)

    
    # Attribute line-through uses Python identifier line_through
    __line_through = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-through'), 'line_through', '__AbsentNamespace0_accidental_text_line_through', number_of_lines)
    __line_through._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    __line_through._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    
    line_through = property(__line_through.value, __line_through.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__AbsentNamespace0_accidental_text_dir', text_direction)
    __dir._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    __dir._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotation'), 'rotation', '__AbsentNamespace0_accidental_text_rotation', rotation_degrees)
    __rotation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    __rotation._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    
    rotation = property(__rotation.value, __rotation.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_accidental_text_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __space.name() : __space,
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __justify.name() : __justify,
        __letter_spacing.name() : __letter_spacing,
        __line_height.name() : __line_height,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'accidental-text', accidental_text)


# Complex type dynamics with content type ELEMENT_ONLY
class dynamics (pyxb.binding.basis.complexTypeDefinition):
    """Dynamics can be associated either with a note or a general musical direction. To avoid inconsistencies between and amongst the letter abbreviations for dynamics (what is sf vs. sfz, standing alone or with a trailing dynamic that is not always piano), we use the actual letters as the names of these dynamic elements. The other-dynamics element allows other dynamic marks that are not covered here, but many of those should perhaps be included in a more general musical direction element. Dynamics elements may also be combined to create marks not covered by a single element, such as sfmp.
	
These letter dynamic symbols are separated from crescendo, decrescendo, and wedge indications. Dynamic representation is inconsistent in scores. Many things are assumed by the composer and left out, such as returns to original dynamics. Systematic representations are quite complex: for example, Humdrum has at least 3 representation formats related to dynamics. The MusicXML format captures what is in the score, but does not try to be optimal for analysis or synthesis of dynamics."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dynamics')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1991, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element p uses Python identifier p
    __p = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'p'), 'p', '__AbsentNamespace0_dynamics_p', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1998, 3), )

    
    p = property(__p.value, __p.set, None, None)

    
    # Element pp uses Python identifier pp
    __pp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pp'), 'pp', '__AbsentNamespace0_dynamics_pp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1999, 3), )

    
    pp = property(__pp.value, __pp.set, None, None)

    
    # Element ppp uses Python identifier ppp
    __ppp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ppp'), 'ppp', '__AbsentNamespace0_dynamics_ppp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2000, 3), )

    
    ppp = property(__ppp.value, __ppp.set, None, None)

    
    # Element pppp uses Python identifier pppp
    __pppp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pppp'), 'pppp', '__AbsentNamespace0_dynamics_pppp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2001, 3), )

    
    pppp = property(__pppp.value, __pppp.set, None, None)

    
    # Element ppppp uses Python identifier ppppp
    __ppppp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ppppp'), 'ppppp', '__AbsentNamespace0_dynamics_ppppp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2002, 3), )

    
    ppppp = property(__ppppp.value, __ppppp.set, None, None)

    
    # Element pppppp uses Python identifier pppppp
    __pppppp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pppppp'), 'pppppp', '__AbsentNamespace0_dynamics_pppppp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2003, 3), )

    
    pppppp = property(__pppppp.value, __pppppp.set, None, None)

    
    # Element f uses Python identifier f
    __f = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__AbsentNamespace0_dynamics_f', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2004, 3), )

    
    f = property(__f.value, __f.set, None, None)

    
    # Element ff uses Python identifier ff
    __ff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ff'), 'ff', '__AbsentNamespace0_dynamics_ff', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2005, 3), )

    
    ff = property(__ff.value, __ff.set, None, None)

    
    # Element fff uses Python identifier fff
    __fff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fff'), 'fff', '__AbsentNamespace0_dynamics_fff', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2006, 3), )

    
    fff = property(__fff.value, __fff.set, None, None)

    
    # Element ffff uses Python identifier ffff
    __ffff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ffff'), 'ffff', '__AbsentNamespace0_dynamics_ffff', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2007, 3), )

    
    ffff = property(__ffff.value, __ffff.set, None, None)

    
    # Element fffff uses Python identifier fffff
    __fffff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fffff'), 'fffff', '__AbsentNamespace0_dynamics_fffff', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2008, 3), )

    
    fffff = property(__fffff.value, __fffff.set, None, None)

    
    # Element ffffff uses Python identifier ffffff
    __ffffff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ffffff'), 'ffffff', '__AbsentNamespace0_dynamics_ffffff', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2009, 3), )

    
    ffffff = property(__ffffff.value, __ffffff.set, None, None)

    
    # Element mp uses Python identifier mp
    __mp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mp'), 'mp', '__AbsentNamespace0_dynamics_mp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2010, 3), )

    
    mp = property(__mp.value, __mp.set, None, None)

    
    # Element mf uses Python identifier mf
    __mf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mf'), 'mf', '__AbsentNamespace0_dynamics_mf', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2011, 3), )

    
    mf = property(__mf.value, __mf.set, None, None)

    
    # Element sf uses Python identifier sf
    __sf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sf'), 'sf', '__AbsentNamespace0_dynamics_sf', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2012, 3), )

    
    sf = property(__sf.value, __sf.set, None, None)

    
    # Element sfp uses Python identifier sfp
    __sfp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sfp'), 'sfp', '__AbsentNamespace0_dynamics_sfp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2013, 3), )

    
    sfp = property(__sfp.value, __sfp.set, None, None)

    
    # Element sfpp uses Python identifier sfpp
    __sfpp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sfpp'), 'sfpp', '__AbsentNamespace0_dynamics_sfpp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2014, 3), )

    
    sfpp = property(__sfpp.value, __sfpp.set, None, None)

    
    # Element fp uses Python identifier fp
    __fp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fp'), 'fp', '__AbsentNamespace0_dynamics_fp', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2015, 3), )

    
    fp = property(__fp.value, __fp.set, None, None)

    
    # Element rf uses Python identifier rf
    __rf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'rf'), 'rf', '__AbsentNamespace0_dynamics_rf', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2016, 3), )

    
    rf = property(__rf.value, __rf.set, None, None)

    
    # Element rfz uses Python identifier rfz
    __rfz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'rfz'), 'rfz', '__AbsentNamespace0_dynamics_rfz', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2017, 3), )

    
    rfz = property(__rfz.value, __rfz.set, None, None)

    
    # Element sfz uses Python identifier sfz
    __sfz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sfz'), 'sfz', '__AbsentNamespace0_dynamics_sfz', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2018, 3), )

    
    sfz = property(__sfz.value, __sfz.set, None, None)

    
    # Element sffz uses Python identifier sffz
    __sffz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sffz'), 'sffz', '__AbsentNamespace0_dynamics_sffz', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2019, 3), )

    
    sffz = property(__sffz.value, __sffz.set, None, None)

    
    # Element fz uses Python identifier fz
    __fz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fz'), 'fz', '__AbsentNamespace0_dynamics_fz', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2020, 3), )

    
    fz = property(__fz.value, __fz.set, None, None)

    
    # Element other-dynamics uses Python identifier other_dynamics
    __other_dynamics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-dynamics'), 'other_dynamics', '__AbsentNamespace0_dynamics_other_dynamics', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2021, 3), )

    
    other_dynamics = property(__other_dynamics.value, __other_dynamics.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_dynamics_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute enclosure uses Python identifier enclosure
    __enclosure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enclosure'), 'enclosure', '__AbsentNamespace0_dynamics_enclosure', enclosure_shape)
    __enclosure._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    
    enclosure = property(__enclosure.value, __enclosure.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_dynamics_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_dynamics_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_dynamics_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_dynamics_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_dynamics_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_dynamics_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_dynamics_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_dynamics_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_dynamics_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_dynamics_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute underline uses Python identifier underline
    __underline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'underline'), 'underline', '__AbsentNamespace0_dynamics_underline', number_of_lines)
    __underline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    __underline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    
    underline = property(__underline.value, __underline.set, None, None)

    
    # Attribute overline uses Python identifier overline
    __overline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'overline'), 'overline', '__AbsentNamespace0_dynamics_overline', number_of_lines)
    __overline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    __overline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    
    overline = property(__overline.value, __overline.set, None, None)

    
    # Attribute line-through uses Python identifier line_through
    __line_through = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-through'), 'line_through', '__AbsentNamespace0_dynamics_line_through', number_of_lines)
    __line_through._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    __line_through._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    
    line_through = property(__line_through.value, __line_through.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_dynamics_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __p.name() : __p,
        __pp.name() : __pp,
        __ppp.name() : __ppp,
        __pppp.name() : __pppp,
        __ppppp.name() : __ppppp,
        __pppppp.name() : __pppppp,
        __f.name() : __f,
        __ff.name() : __ff,
        __fff.name() : __fff,
        __ffff.name() : __ffff,
        __fffff.name() : __fffff,
        __ffffff.name() : __ffffff,
        __mp.name() : __mp,
        __mf.name() : __mf,
        __sf.name() : __sf,
        __sfp.name() : __sfp,
        __sfpp.name() : __sfpp,
        __fp.name() : __fp,
        __rf.name() : __rf,
        __rfz.name() : __rfz,
        __sfz.name() : __sfz,
        __sffz.name() : __sffz,
        __fz.name() : __fz,
        __other_dynamics.name() : __other_dynamics
    })
    _AttributeMap.update({
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'dynamics', dynamics)


# Complex type empty-placement with content type EMPTY
class empty_placement (pyxb.binding.basis.complexTypeDefinition):
    """The empty-placement type represents an empty element with print-style and placement attributes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty-placement')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2035, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_empty_placement_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_empty_placement_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_empty_placement_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_empty_placement_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_empty_placement_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_empty_placement_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_empty_placement_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_empty_placement_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_empty_placement_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_empty_placement_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'empty-placement', empty_placement)


# Complex type empty-print-style with content type EMPTY
class empty_print_style (pyxb.binding.basis.complexTypeDefinition):
    """The empty-print-style type represents an empty element with print-style attribute group."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty-print-style')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2043, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_empty_print_style_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_empty_print_style_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_empty_print_style_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_empty_print_style_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_empty_print_style_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_empty_print_style_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_empty_print_style_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_empty_print_style_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_empty_print_style_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'empty-print-style', empty_print_style)


# Complex type empty-print-style-align with content type EMPTY
class empty_print_style_align (pyxb.binding.basis.complexTypeDefinition):
    """The empty-print-style-align type represents an empty element with print-style-align attribute group."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty-print-style-align')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2050, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_empty_print_style_align_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_empty_print_style_align_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_empty_print_style_align_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_empty_print_style_align_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_empty_print_style_align_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_empty_print_style_align_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_empty_print_style_align_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_empty_print_style_align_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_empty_print_style_align_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_empty_print_style_align_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_empty_print_style_align_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'empty-print-style-align', empty_print_style_align)


# Complex type empty-print-object-style-align with content type EMPTY
class empty_print_object_style_align (pyxb.binding.basis.complexTypeDefinition):
    """The empty-print-style-align-object type represents an empty element with print-object and print-style-align attribute groups."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty-print-object-style-align')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2057, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_empty_print_object_style_align_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_empty_print_object_style_align_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_empty_print_object_style_align_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_empty_print_object_style_align_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_empty_print_object_style_align_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_empty_print_object_style_align_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_empty_print_object_style_align_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_empty_print_object_style_align_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_empty_print_object_style_align_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_empty_print_object_style_align_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_empty_print_object_style_align_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_empty_print_object_style_align_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'empty-print-object-style-align', empty_print_object_style_align)


# Complex type empty-trill-sound with content type EMPTY
class empty_trill_sound (pyxb.binding.basis.complexTypeDefinition):
    """The empty-trill-sound type represents an empty element with print-style, placement, and trill-sound attributes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty-trill-sound')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2065, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_empty_trill_sound_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_empty_trill_sound_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_empty_trill_sound_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_empty_trill_sound_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_empty_trill_sound_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_empty_trill_sound_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_empty_trill_sound_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_empty_trill_sound_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_empty_trill_sound_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_empty_trill_sound_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute start-note uses Python identifier start_note
    __start_note = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'start-note'), 'start_note', '__AbsentNamespace0_empty_trill_sound_start_note', start_note)
    __start_note._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1842, 2)
    __start_note._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1842, 2)
    
    start_note = property(__start_note.value, __start_note.set, None, None)

    
    # Attribute trill-step uses Python identifier trill_step
    __trill_step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trill-step'), 'trill_step', '__AbsentNamespace0_empty_trill_sound_trill_step', trill_step)
    __trill_step._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1843, 2)
    __trill_step._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1843, 2)
    
    trill_step = property(__trill_step.value, __trill_step.set, None, None)

    
    # Attribute two-note-turn uses Python identifier two_note_turn
    __two_note_turn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'two-note-turn'), 'two_note_turn', '__AbsentNamespace0_empty_trill_sound_two_note_turn', two_note_turn)
    __two_note_turn._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1844, 2)
    __two_note_turn._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1844, 2)
    
    two_note_turn = property(__two_note_turn.value, __two_note_turn.set, None, None)

    
    # Attribute accelerate uses Python identifier accelerate
    __accelerate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accelerate'), 'accelerate', '__AbsentNamespace0_empty_trill_sound_accelerate', yes_no)
    __accelerate._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1845, 2)
    __accelerate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1845, 2)
    
    accelerate = property(__accelerate.value, __accelerate.set, None, None)

    
    # Attribute beats uses Python identifier beats
    __beats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'beats'), 'beats', '__AbsentNamespace0_empty_trill_sound_beats', trill_beats)
    __beats._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1846, 2)
    __beats._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1846, 2)
    
    beats = property(__beats.value, __beats.set, None, None)

    
    # Attribute second-beat uses Python identifier second_beat
    __second_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'second-beat'), 'second_beat', '__AbsentNamespace0_empty_trill_sound_second_beat', percent)
    __second_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1847, 2)
    __second_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1847, 2)
    
    second_beat = property(__second_beat.value, __second_beat.set, None, None)

    
    # Attribute last-beat uses Python identifier last_beat
    __last_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'last-beat'), 'last_beat', '__AbsentNamespace0_empty_trill_sound_last_beat', percent)
    __last_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1848, 2)
    __last_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1848, 2)
    
    last_beat = property(__last_beat.value, __last_beat.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __start_note.name() : __start_note,
        __trill_step.name() : __trill_step,
        __two_note_turn.name() : __two_note_turn,
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __second_beat.name() : __second_beat,
        __last_beat.name() : __last_beat
    })
Namespace.addCategoryObject('typeBinding', u'empty-trill-sound', empty_trill_sound)


# Complex type horizontal-turn with content type EMPTY
class horizontal_turn (pyxb.binding.basis.complexTypeDefinition):
    """The horizontal-turn type represents turn elements that are horizontal rather than vertical. These are empty elements with print-style, placement, trill-sound, and slash attributes. If the slash attribute is yes, then a vertical line is used to slash the turn; it is no by default."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'horizontal-turn')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2074, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_horizontal_turn_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_horizontal_turn_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_horizontal_turn_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_horizontal_turn_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_horizontal_turn_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_horizontal_turn_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_horizontal_turn_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_horizontal_turn_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_horizontal_turn_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_horizontal_turn_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute start-note uses Python identifier start_note
    __start_note = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'start-note'), 'start_note', '__AbsentNamespace0_horizontal_turn_start_note', start_note)
    __start_note._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1842, 2)
    __start_note._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1842, 2)
    
    start_note = property(__start_note.value, __start_note.set, None, None)

    
    # Attribute trill-step uses Python identifier trill_step
    __trill_step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trill-step'), 'trill_step', '__AbsentNamespace0_horizontal_turn_trill_step', trill_step)
    __trill_step._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1843, 2)
    __trill_step._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1843, 2)
    
    trill_step = property(__trill_step.value, __trill_step.set, None, None)

    
    # Attribute two-note-turn uses Python identifier two_note_turn
    __two_note_turn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'two-note-turn'), 'two_note_turn', '__AbsentNamespace0_horizontal_turn_two_note_turn', two_note_turn)
    __two_note_turn._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1844, 2)
    __two_note_turn._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1844, 2)
    
    two_note_turn = property(__two_note_turn.value, __two_note_turn.set, None, None)

    
    # Attribute accelerate uses Python identifier accelerate
    __accelerate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accelerate'), 'accelerate', '__AbsentNamespace0_horizontal_turn_accelerate', yes_no)
    __accelerate._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1845, 2)
    __accelerate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1845, 2)
    
    accelerate = property(__accelerate.value, __accelerate.set, None, None)

    
    # Attribute beats uses Python identifier beats
    __beats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'beats'), 'beats', '__AbsentNamespace0_horizontal_turn_beats', trill_beats)
    __beats._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1846, 2)
    __beats._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1846, 2)
    
    beats = property(__beats.value, __beats.set, None, None)

    
    # Attribute second-beat uses Python identifier second_beat
    __second_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'second-beat'), 'second_beat', '__AbsentNamespace0_horizontal_turn_second_beat', percent)
    __second_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1847, 2)
    __second_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1847, 2)
    
    second_beat = property(__second_beat.value, __second_beat.set, None, None)

    
    # Attribute last-beat uses Python identifier last_beat
    __last_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'last-beat'), 'last_beat', '__AbsentNamespace0_horizontal_turn_last_beat', percent)
    __last_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1848, 2)
    __last_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1848, 2)
    
    last_beat = property(__last_beat.value, __last_beat.set, None, None)

    
    # Attribute slash uses Python identifier slash
    __slash = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'slash'), 'slash', '__AbsentNamespace0_horizontal_turn_slash', yes_no)
    __slash._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2081, 2)
    __slash._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2081, 2)
    
    slash = property(__slash.value, __slash.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __start_note.name() : __start_note,
        __trill_step.name() : __trill_step,
        __two_note_turn.name() : __two_note_turn,
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __second_beat.name() : __second_beat,
        __last_beat.name() : __last_beat,
        __slash.name() : __slash
    })
Namespace.addCategoryObject('typeBinding', u'horizontal-turn', horizontal_turn)


# Complex type fermata with content type SIMPLE
class fermata (pyxb.binding.basis.complexTypeDefinition):
    """The fermata text content represents the shape of the fermata sign. An empty fermata element represents a normal fermata. The fermata type is upright if not specified."""
    _TypeDefinition = fermata_shape
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fermata')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2084, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is fermata_shape
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_fermata_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_fermata_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_fermata_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_fermata_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_fermata_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_fermata_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_fermata_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_fermata_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_fermata_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_fermata_type', upright_inverted)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2090, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2090, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'fermata', fermata)


# Complex type fingering with content type SIMPLE
class fingering (pyxb.binding.basis.complexTypeDefinition):
    """Fingering is typically indicated 1,2,3,4,5. Multiple fingerings may be given, typically to substitute fingerings in the middle of a note. The substitution and alternate values are "no" if the attribute is not present. For guitar and other fretted instruments, the fingering element represents the fretting finger; the pluck element represents the plucking finger."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fingering')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2096, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_fingering_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_fingering_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_fingering_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_fingering_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_fingering_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_fingering_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_fingering_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_fingering_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_fingering_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_fingering_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute substitution uses Python identifier substitution
    __substitution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'substitution'), 'substitution', '__AbsentNamespace0_fingering_substitution', yes_no)
    __substitution._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2102, 4)
    __substitution._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2102, 4)
    
    substitution = property(__substitution.value, __substitution.set, None, None)

    
    # Attribute alternate uses Python identifier alternate
    __alternate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alternate'), 'alternate', '__AbsentNamespace0_fingering_alternate', yes_no)
    __alternate._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2103, 4)
    __alternate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2103, 4)
    
    alternate = property(__alternate.value, __alternate.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __substitution.name() : __substitution,
        __alternate.name() : __alternate
    })
Namespace.addCategoryObject('typeBinding', u'fingering', fingering)


# Complex type formatted-text with content type SIMPLE
class formatted_text (pyxb.binding.basis.complexTypeDefinition):
    """The formatted-text type represents a text element with text-formatting attributes."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'formatted-text')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2110, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_formatted_text_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1810, 2)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__AbsentNamespace0_formatted_text_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space)
    __space._DeclarationLocation = None
    __space._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1811, 2)
    
    space = property(__space.value, __space.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_formatted_text_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute enclosure uses Python identifier enclosure
    __enclosure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enclosure'), 'enclosure', '__AbsentNamespace0_formatted_text_enclosure', enclosure_shape)
    __enclosure._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    
    enclosure = property(__enclosure.value, __enclosure.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_formatted_text_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_formatted_text_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_formatted_text_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_formatted_text_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_formatted_text_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute justify uses Python identifier justify
    __justify = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justify'), 'justify', '__AbsentNamespace0_formatted_text_justify', left_center_right)
    __justify._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    __justify._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    
    justify = property(__justify.value, __justify.set, None, None)

    
    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_formatted_text_letter_spacing', number_or_normal)
    __letter_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    
    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)

    
    # Attribute line-height uses Python identifier line_height
    __line_height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-height'), 'line_height', '__AbsentNamespace0_formatted_text_line_height', number_or_normal)
    __line_height._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1670, 2)
    __line_height._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1670, 2)
    
    line_height = property(__line_height.value, __line_height.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_formatted_text_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_formatted_text_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_formatted_text_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_formatted_text_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute underline uses Python identifier underline
    __underline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'underline'), 'underline', '__AbsentNamespace0_formatted_text_underline', number_of_lines)
    __underline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    __underline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    
    underline = property(__underline.value, __underline.set, None, None)

    
    # Attribute overline uses Python identifier overline
    __overline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'overline'), 'overline', '__AbsentNamespace0_formatted_text_overline', number_of_lines)
    __overline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    __overline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    
    overline = property(__overline.value, __overline.set, None, None)

    
    # Attribute line-through uses Python identifier line_through
    __line_through = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-through'), 'line_through', '__AbsentNamespace0_formatted_text_line_through', number_of_lines)
    __line_through._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    __line_through._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    
    line_through = property(__line_through.value, __line_through.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__AbsentNamespace0_formatted_text_dir', text_direction)
    __dir._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    __dir._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotation'), 'rotation', '__AbsentNamespace0_formatted_text_rotation', rotation_degrees)
    __rotation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    __rotation._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    
    rotation = property(__rotation.value, __rotation.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_formatted_text_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __space.name() : __space,
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __justify.name() : __justify,
        __letter_spacing.name() : __letter_spacing,
        __line_height.name() : __line_height,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'formatted-text', formatted_text)


# Complex type fret with content type SIMPLE
class fret (pyxb.binding.basis.complexTypeDefinition):
    """The fret element is used with tablature notation and chord diagrams. Fret numbers start with 0 for an open string and 1 for the first fret."""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fret')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2121, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_fret_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_fret_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_fret_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_fret_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_fret_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
Namespace.addCategoryObject('typeBinding', u'fret', fret)


# Complex type string with content type SIMPLE
class string (pyxb.binding.basis.complexTypeDefinition):
    """The string type is used with tablature notation, regular notation (where it is often circled), and chord diagrams. String numbers start with 1 for the highest string."""
    _TypeDefinition = string_number
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2249, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is string_number
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_string_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_string_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_string_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_string_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_string_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_string_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_string_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_string_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_string_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_string_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'string', string)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element has been deprecated in Version 2.0 in favor of the directive attribute for direction elements. Language names come from ISO 639, with optional country subcodes from ISO 3166."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2351, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_CTD_ANON_6_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2355, 7)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_CTD_ANON_6_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_CTD_ANON_6_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_CTD_ANON_6_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_CTD_ANON_6_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_CTD_ANON_6_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_CTD_ANON_6_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_CTD_ANON_6_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_CTD_ANON_6_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_CTD_ANON_6_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })



# Complex type clef with content type ELEMENT_ONLY
class clef (pyxb.binding.basis.complexTypeDefinition):
    """Clefs are represented by a combination of sign, line, and clef-octave-change elements. The optional number attribute refers to staff numbers within the part. A value of 1 is assumed if not present.

Sometimes clefs are added to the staff in non-standard line positions, either to indicate cue passages, or when there are multiple clefs present simultaneously on one staff. In this situation, the additional attribute is set to "yes" and the line value is ignored. The size attribute is used for clefs where the additional attribute is "yes". It is typically used to indicate cue clefs.

Sometimes clefs at the start of a measure need to appear after the barline rather than before, as for cues or for use after a repeated section. The after-barline attribute is set to "yes" in this situation. The attribute is ignored for mid-measure clefs.

Clefs appear at the start of each system unless the print-object attribute has been set to "no" or the additional attribute has been set to "yes"."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'clef')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2393, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element sign uses Python identifier sign
    __sign = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sign'), 'sign', '__AbsentNamespace0_clef_sign', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2404, 3), )

    
    sign = property(__sign.value, __sign.set, None, u'The sign element represents the clef symbol.')

    
    # Element line uses Python identifier line
    __line = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'line'), 'line', '__AbsentNamespace0_clef_line', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2409, 3), )

    
    line = property(__line.value, __line.set, None, u'Line numbers are counted from the bottom of the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), 3 for the C sign (alto clef) and 5 for TAB (on a 6-line staff).')

    
    # Element clef-octave-change uses Python identifier clef_octave_change
    __clef_octave_change = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'clef-octave-change'), 'clef_octave_change', '__AbsentNamespace0_clef_clef_octave_change', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2414, 3), )

    
    clef_octave_change = property(__clef_octave_change.value, __clef_octave_change.set, None, u'The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.')

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_clef_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_clef_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_clef_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_clef_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_clef_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_clef_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_clef_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_clef_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_clef_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_clef_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_clef_number', staff_number)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2420, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2420, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute additional uses Python identifier additional
    __additional = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'additional'), 'additional', '__AbsentNamespace0_clef_additional', yes_no)
    __additional._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2421, 2)
    __additional._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2421, 2)
    
    additional = property(__additional.value, __additional.set, None, None)

    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__AbsentNamespace0_clef_size', symbol_size)
    __size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2422, 2)
    __size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2422, 2)
    
    size = property(__size.value, __size.set, None, None)

    
    # Attribute after-barline uses Python identifier after_barline
    __after_barline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'after-barline'), 'after_barline', '__AbsentNamespace0_clef_after_barline', yes_no)
    __after_barline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2423, 2)
    __after_barline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2423, 2)
    
    after_barline = property(__after_barline.value, __after_barline.set, None, None)

    _ElementMap.update({
        __sign.name() : __sign,
        __line.name() : __line,
        __clef_octave_change.name() : __clef_octave_change
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number,
        __additional.name() : __additional,
        __size.name() : __size,
        __after_barline.name() : __after_barline
    })
Namespace.addCategoryObject('typeBinding', u'clef', clef)


# Complex type key with content type ELEMENT_ONLY
class key (pyxb.binding.basis.complexTypeDefinition):
    """The key type represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part. Key signatures appear at the start of each system unless the print-object attribute has been set to "no"."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'key')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2440, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element key-octave uses Python identifier key_octave
    __key_octave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'key-octave'), 'key_octave', '__AbsentNamespace0_key_key_octave', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2449, 3), )

    
    key_octave = property(__key_octave.value, __key_octave.set, None, u'The optional list of key-octave elements is used to specify in which octave each element of the key signature appears.')

    
    # Element key-step uses Python identifier key_step
    __key_step = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'key-step'), 'key_step', '__AbsentNamespace0_key_key_step', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5119, 3), )

    
    key_step = property(__key_step.value, __key_step.set, None, u'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element.')

    
    # Element key-alter uses Python identifier key_alter
    __key_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'key-alter'), 'key_alter', '__AbsentNamespace0_key_key_alter', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5124, 3), )

    
    key_alter = property(__key_alter.value, __key_alter.set, None, u'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element.')

    
    # Element key-accidental uses Python identifier key_accidental
    __key_accidental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'key-accidental'), 'key_accidental', '__AbsentNamespace0_key_key_accidental', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5129, 3), )

    
    key_accidental = property(__key_accidental.value, __key_accidental.set, None, u'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.')

    
    # Element cancel uses Python identifier cancel
    __cancel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'cancel'), 'cancel', '__AbsentNamespace0_key_cancel', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5178, 3), )

    
    cancel = property(__cancel.value, __cancel.set, None, None)

    
    # Element fifths uses Python identifier fifths
    __fifths = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fifths'), 'fifths', '__AbsentNamespace0_key_fifths', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5179, 3), )

    
    fifths = property(__fifths.value, __fifths.set, None, None)

    
    # Element mode uses Python identifier mode
    __mode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mode'), 'mode', '__AbsentNamespace0_key_mode', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5180, 3), )

    
    mode = property(__mode.value, __mode.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_key_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_key_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_key_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_key_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_key_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_key_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_key_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_key_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_key_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_key_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_key_number', staff_number)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2455, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2455, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __key_octave.name() : __key_octave,
        __key_step.name() : __key_step,
        __key_alter.name() : __key_alter,
        __key_accidental.name() : __key_accidental,
        __cancel.name() : __cancel,
        __fifths.name() : __fifths,
        __mode.name() : __mode
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'key', key)


# Complex type measure-repeat with content type SIMPLE
class measure_repeat (pyxb.binding.basis.complexTypeDefinition):
    """The measure-repeat type is used for both single and multiple measure repeats. The text of the element indicates the number of measures to be repeated in a single pattern. The slashes attribute specifies the number of slashes to use in the repeat sign. It is 1 if not specified. Both the start and the stop of the measure-repeat must be specified. The text of the element is ignored when the type is stop.
	
The measure-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat."""
    _TypeDefinition = positive_integer_or_empty
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'measure-repeat')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2472, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is positive_integer_or_empty
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_measure_repeat_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2480, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2480, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute slashes uses Python identifier slashes
    __slashes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'slashes'), 'slashes', '__AbsentNamespace0_measure_repeat_slashes', pyxb.binding.datatypes.positiveInteger)
    __slashes._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2481, 4)
    __slashes._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2481, 4)
    
    slashes = property(__slashes.value, __slashes.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __slashes.name() : __slashes
    })
Namespace.addCategoryObject('typeBinding', u'measure-repeat', measure_repeat)


# Complex type measure-style with content type ELEMENT_ONLY
class measure_style (pyxb.binding.basis.complexTypeDefinition):
    """A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.

The multiple-rest and measure-repeat symbols indicate the number of measures covered in the element content. The beat-repeat and slash elements can cover partial measures. All but the multiple-rest element use a type attribute to indicate starting and stopping the use of the style. The optional number attribute specifies the staff number from top to bottom on the system, as with clef."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'measure-style')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2486, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element multiple-rest uses Python identifier multiple_rest
    __multiple_rest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'multiple-rest'), 'multiple_rest', '__AbsentNamespace0_measure_style_multiple_rest', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2493, 3), )

    
    multiple_rest = property(__multiple_rest.value, __multiple_rest.set, None, None)

    
    # Element measure-repeat uses Python identifier measure_repeat
    __measure_repeat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'measure-repeat'), 'measure_repeat', '__AbsentNamespace0_measure_style_measure_repeat', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2494, 3), )

    
    measure_repeat = property(__measure_repeat.value, __measure_repeat.set, None, None)

    
    # Element beat-repeat uses Python identifier beat_repeat
    __beat_repeat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beat-repeat'), 'beat_repeat', '__AbsentNamespace0_measure_style_beat_repeat', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2495, 3), )

    
    beat_repeat = property(__beat_repeat.value, __beat_repeat.set, None, None)

    
    # Element slash uses Python identifier slash
    __slash = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'slash'), 'slash', '__AbsentNamespace0_measure_style_slash', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2496, 3), )

    
    slash = property(__slash.value, __slash.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_measure_style_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_measure_style_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_measure_style_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_measure_style_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_measure_style_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_measure_style_number', staff_number)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2498, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2498, 2)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __multiple_rest.name() : __multiple_rest,
        __measure_repeat.name() : __measure_repeat,
        __beat_repeat.name() : __beat_repeat,
        __slash.name() : __slash
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'measure-style', measure_style)


# Complex type multiple-rest with content type SIMPLE
class multiple_rest (pyxb.binding.basis.complexTypeDefinition):
    """The text of the multiple-rest type indicates the number of measures in the multiple rest. Multiple rests may use the 1-bar / 2-bar / 4-bar rest symbols, or a single shape. The use-symbols attribute indicates which to use; it is no if not specified. The element text is ignored when the type is stop."""
    _TypeDefinition = positive_integer_or_empty
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'multiple-rest')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2503, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is positive_integer_or_empty
    
    # Attribute use-symbols uses Python identifier use_symbols
    __use_symbols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'use-symbols'), 'use_symbols', '__AbsentNamespace0_multiple_rest_use_symbols', yes_no)
    __use_symbols._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2509, 4)
    __use_symbols._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2509, 4)
    
    use_symbols = property(__use_symbols.value, __use_symbols.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __use_symbols.name() : __use_symbols
    })
Namespace.addCategoryObject('typeBinding', u'multiple-rest', multiple_rest)


# Complex type time with content type ELEMENT_ONLY
class time (pyxb.binding.basis.complexTypeDefinition):
    """Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator. The symbol attribute is used indicate common and cut time symbols as well as a single number display. Multiple pairs of beat and beat-type elements are used for composite time signatures with multiple denominators, such as 2/4 + 3/8. A composite such as 3+2/8 requires only one beat/beat-type pair.

The print-object attribute allows a time signature to be specified but not printed, as is the case for excerpts from the middle of a score. The value is "yes" if not present. The optional number attribute refers to staff numbers within the part. If absent, the time signature applies to all staves in the part."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'time')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2575, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element interchangeable uses Python identifier interchangeable
    __interchangeable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'interchangeable'), 'interchangeable', '__AbsentNamespace0_time_interchangeable', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2584, 4), )

    
    interchangeable = property(__interchangeable.value, __interchangeable.set, None, None)

    
    # Element senza-misura uses Python identifier senza_misura
    __senza_misura = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'senza-misura'), 'senza_misura', '__AbsentNamespace0_time_senza_misura', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2586, 3), )

    
    senza_misura = property(__senza_misura.value, __senza_misura.set, None, u"A senza-misura element explicitly indicates that no time signature is present. The optional element content indicates the symbol to be used, if any, such as an X. The time element's symbol attribute is not used when a senza-misura element is present.")

    
    # Element beats uses Python identifier beats
    __beats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beats'), 'beats', '__AbsentNamespace0_time_beats', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5160, 3), )

    
    beats = property(__beats.value, __beats.set, None, u'The beats element indicates the number of beats, as found in the numerator of a time signature.')

    
    # Element beat-type uses Python identifier beat_type
    __beat_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beat-type'), 'beat_type', '__AbsentNamespace0_time_beat_type', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5165, 3), )

    
    beat_type = property(__beat_type.value, __beat_type.set, None, u'The beat-type element indicates the beat unit, as found in the denominator of a time signature.')

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_time_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_time_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_time_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_time_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_time_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_time_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_time_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_time_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_time_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_time_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_time_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_time_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_time_number', staff_number)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2592, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2592, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'symbol'), 'symbol', '__AbsentNamespace0_time_symbol', time_symbol)
    __symbol._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2593, 2)
    __symbol._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2593, 2)
    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Attribute separator uses Python identifier separator
    __separator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'separator'), 'separator', '__AbsentNamespace0_time_separator', time_separator)
    __separator._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2594, 2)
    __separator._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2594, 2)
    
    separator = property(__separator.value, __separator.set, None, None)

    _ElementMap.update({
        __interchangeable.name() : __interchangeable,
        __senza_misura.name() : __senza_misura,
        __beats.name() : __beats,
        __beat_type.name() : __beat_type
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __valign.name() : __valign,
        __number.name() : __number,
        __symbol.name() : __symbol,
        __separator.name() : __separator
    })
Namespace.addCategoryObject('typeBinding', u'time', time)


# Complex type ending with content type SIMPLE
class ending (pyxb.binding.basis.complexTypeDefinition):
    """The ending type represents multiple (e.g. first and second) endings. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece. The length of the jog can be specified using the end-length attribute. The text-x and text-y attributes are offsets that specify where the baseline of the start of the ending text appears, relative to the start of the ending line.
	
The number attribute reflects the numeric values of what is under the ending line. Single endings such as "1" or comma-separated multiple endings such as "1,2" may be used. The ending element text is used when the text displayed in the ending is different than what appears in the number attribute. The print-object element is used to indicate when an ending is present but not printed, as is often the case for many parts in a full score."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ending')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2663, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_ending_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_ending_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_ending_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_ending_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_ending_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_ending_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_ending_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_ending_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_ending_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_ending_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_ending_number', ending_number, required=True)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2671, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2671, 4)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_ending_type', start_stop_discontinue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2672, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2672, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute end-length uses Python identifier end_length
    __end_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'end-length'), 'end_length', '__AbsentNamespace0_ending_end_length', tenths)
    __end_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2675, 4)
    __end_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2675, 4)
    
    end_length = property(__end_length.value, __end_length.set, None, None)

    
    # Attribute text-x uses Python identifier text_x
    __text_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text-x'), 'text_x', '__AbsentNamespace0_ending_text_x', tenths)
    __text_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2676, 4)
    __text_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2676, 4)
    
    text_x = property(__text_x.value, __text_x.set, None, None)

    
    # Attribute text-y uses Python identifier text_y
    __text_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text-y'), 'text_y', '__AbsentNamespace0_ending_text_y', tenths)
    __text_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2677, 4)
    __text_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2677, 4)
    
    text_y = property(__text_y.value, __text_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number,
        __type.name() : __type,
        __end_length.name() : __end_length,
        __text_x.name() : __text_x,
        __text_y.name() : __text_y
    })
Namespace.addCategoryObject('typeBinding', u'ending', ending)


# Complex type accordion-registration with content type ELEMENT_ONLY
class accordion_registration (pyxb.binding.basis.complexTypeDefinition):
    """The accordion-registration type is use for accordion registration symbols. These are circular symbols divided horizontally into high, middle, and low sections that correspond to 4', 8', and 16' pipes. Each accordion-high, accordion-middle, and accordion-low element represents the presence of one or more dots in the registration diagram. An accordion-registration element needs to have at least one of the child elements present."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accordion-registration')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2701, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accordion-high uses Python identifier accordion_high
    __accordion_high = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accordion-high'), 'accordion_high', '__AbsentNamespace0_accordion_registration_accordion_high', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2706, 3), )

    
    accordion_high = property(__accordion_high.value, __accordion_high.set, None, u"The accordion-high element indicates the presence of a dot in the high (4') section of the registration symbol.")

    
    # Element accordion-middle uses Python identifier accordion_middle
    __accordion_middle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accordion-middle'), 'accordion_middle', '__AbsentNamespace0_accordion_registration_accordion_middle', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2711, 3), )

    
    accordion_middle = property(__accordion_middle.value, __accordion_middle.set, None, u"The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol.")

    
    # Element accordion-low uses Python identifier accordion_low
    __accordion_low = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accordion-low'), 'accordion_low', '__AbsentNamespace0_accordion_registration_accordion_low', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2716, 3), )

    
    accordion_low = property(__accordion_low.value, __accordion_low.set, None, u"The accordion-low element indicates the presence of a dot in the low (16') section of the registration symbol.")

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_accordion_registration_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_accordion_registration_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_accordion_registration_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_accordion_registration_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_accordion_registration_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_accordion_registration_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_accordion_registration_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_accordion_registration_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_accordion_registration_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_accordion_registration_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_accordion_registration_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __accordion_high.name() : __accordion_high,
        __accordion_middle.name() : __accordion_middle,
        __accordion_low.name() : __accordion_low
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'accordion-registration', accordion_registration)


# Complex type bass-alter with content type SIMPLE
class bass_alter (pyxb.binding.basis.complexTypeDefinition):
    """The bass-alter type represents the chromatic alteration of the bass of the current chord within the harmony element. In some chord styles, the text for the bass-step element may include bass-alter information. In that case, the print-object attribute of the bass-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the bass-step; it is right by default."""
    _TypeDefinition = semitones
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bass-alter')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2743, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is semitones
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_bass_alter_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_bass_alter_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_bass_alter_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_bass_alter_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_bass_alter_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_bass_alter_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_bass_alter_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_bass_alter_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_bass_alter_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_bass_alter_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute location uses Python identifier location
    __location = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'location'), 'location', '__AbsentNamespace0_bass_alter_location', left_right)
    __location._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2751, 4)
    __location._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2751, 4)
    
    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __location.name() : __location
    })
Namespace.addCategoryObject('typeBinding', u'bass-alter', bass_alter)


# Complex type bass-step with content type SIMPLE
class bass_step (pyxb.binding.basis.complexTypeDefinition):
    """The bass-step type represents the pitch step of the bass of the current chord within the harmony element. The text attribute indicates how the bass should appear in a score if not using the element contents."""
    _TypeDefinition = step
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bass-step')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2756, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is step
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_bass_step_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_bass_step_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_bass_step_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_bass_step_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_bass_step_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_bass_step_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_bass_step_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_bass_step_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_bass_step_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__AbsentNamespace0_bass_step_text', pyxb.binding.datatypes.token)
    __text._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2762, 4)
    __text._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2762, 4)
    
    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __text.name() : __text
    })
Namespace.addCategoryObject('typeBinding', u'bass-step', bass_step)


# Complex type degree-alter with content type SIMPLE
class degree_alter (pyxb.binding.basis.complexTypeDefinition):
    """The degree-alter type represents the chromatic alteration for the current degree. If the degree-type value is alter or subtract, the degree-alter value is relative to the degree already in the chord based on its kind element. If the degree-type value is add, the degree-alter is relative to a dominant chord (major and perfect intervals except for a minor seventh). The plus-minus attribute is used to indicate if plus and minus symbols should be used instead of sharp and flat symbols to display the degree alteration; it is no by default."""
    _TypeDefinition = semitones
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'degree-alter')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2818, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is semitones
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_degree_alter_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_degree_alter_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_degree_alter_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_degree_alter_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_degree_alter_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_degree_alter_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_degree_alter_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_degree_alter_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_degree_alter_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute plus-minus uses Python identifier plus_minus
    __plus_minus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'plus-minus'), 'plus_minus', '__AbsentNamespace0_degree_alter_plus_minus', yes_no)
    __plus_minus._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2825, 4)
    __plus_minus._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2825, 4)
    
    plus_minus = property(__plus_minus.value, __plus_minus.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __plus_minus.name() : __plus_minus
    })
Namespace.addCategoryObject('typeBinding', u'degree-alter', degree_alter)


# Complex type degree-type with content type SIMPLE
class degree_type (pyxb.binding.basis.complexTypeDefinition):
    """The degree-type type indicates if this degree is an addition, alteration, or subtraction relative to the kind of the current chord. The value of the degree-type element affects the interpretation of the value of the degree-alter element. The text attribute specifies how the type of the degree should be displayed in a score."""
    _TypeDefinition = degree_type_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'degree-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2830, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is degree_type_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_degree_type_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_degree_type_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_degree_type_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_degree_type_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_degree_type_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_degree_type_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_degree_type_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_degree_type_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_degree_type_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__AbsentNamespace0_degree_type_text', pyxb.binding.datatypes.token)
    __text._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2836, 4)
    __text._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2836, 4)
    
    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __text.name() : __text
    })
Namespace.addCategoryObject('typeBinding', u'degree-type', degree_type)


# Complex type degree-value with content type SIMPLE
class degree_value (pyxb.binding.basis.complexTypeDefinition):
    """The content of the degree-value type is a number indicating the degree of the chord (1 for the root, 3 for third, etc). The text attribute specifies how the type of the degree should be displayed in a score. The degree-value symbol attribute indicates that a symbol should be used in specifying the degree. If the symbol attribute is present, the value of the text attribute follows the symbol."""
    _TypeDefinition = pyxb.binding.datatypes.positiveInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'degree-value')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2842, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.positiveInteger
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_degree_value_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_degree_value_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_degree_value_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_degree_value_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_degree_value_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_degree_value_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_degree_value_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_degree_value_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_degree_value_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'symbol'), 'symbol', '__AbsentNamespace0_degree_value_symbol', degree_symbol_value)
    __symbol._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2848, 4)
    __symbol._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2848, 4)
    
    symbol = property(__symbol.value, __symbol.set, None, None)

    
    # Attribute text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__AbsentNamespace0_degree_value_text', pyxb.binding.datatypes.token)
    __text._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2849, 4)
    __text._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2849, 4)
    
    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __symbol.name() : __symbol,
        __text.name() : __text
    })
Namespace.addCategoryObject('typeBinding', u'degree-value', degree_value)


# Complex type harmony with content type ELEMENT_ONLY
class harmony (pyxb.binding.basis.complexTypeDefinition):
    """The harmony type is based on Humdrum's **harm encoding, extended to support chord symbols in popular music as well as functional harmony analysis in classical music.
	
If there are alternate harmonies possible, this can be specified using multiple harmony elements differentiated by type. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses. 
	
The harmony object may be used for analysis or for chord symbols. The print-object attribute controls whether or not anything is printed due to the harmony element. The print-frame attribute controls printing of a frame or fretboard diagram. The print-style attribute group sets the default for the harmony, but individual elements can override this with their own print-style values."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'harmony')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3006, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element frame uses Python identifier frame
    __frame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'frame'), 'frame', '__AbsentNamespace0_harmony_frame', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3016, 3), )

    
    frame = property(__frame.value, __frame.set, None, None)

    
    # Element offset uses Python identifier offset
    __offset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'offset'), 'offset', '__AbsentNamespace0_harmony_offset', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3017, 3), )

    
    offset = property(__offset.value, __offset.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_harmony_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_harmony_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Element staff uses Python identifier staff
    __staff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff'), 'staff', '__AbsentNamespace0_harmony_staff', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3), )

    
    staff = property(__staff.value, __staff.set, None, u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')

    
    # Element root uses Python identifier root
    __root = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'root'), 'root', '__AbsentNamespace0_harmony_root', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5212, 4), )

    
    root = property(__root.value, __root.set, None, None)

    
    # Element function uses Python identifier function
    __function = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'function'), 'function', '__AbsentNamespace0_harmony_function', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5213, 4), )

    
    function = property(__function.value, __function.set, None, u'The function element is used to represent classical functional harmony with an indication like I, II, III rather than C, D, E. It is relative to the key that is specified in the MusicXML encoding.')

    
    # Element kind uses Python identifier kind
    __kind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'kind'), 'kind', '__AbsentNamespace0_harmony_kind', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5219, 3), )

    
    kind = property(__kind.value, __kind.set, None, None)

    
    # Element inversion uses Python identifier inversion
    __inversion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'inversion'), 'inversion', '__AbsentNamespace0_harmony_inversion', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5220, 3), )

    
    inversion = property(__inversion.value, __inversion.set, None, None)

    
    # Element bass uses Python identifier bass
    __bass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bass'), 'bass', '__AbsentNamespace0_harmony_bass', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5221, 3), )

    
    bass = property(__bass.value, __bass.set, None, None)

    
    # Element degree uses Python identifier degree
    __degree = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'degree'), 'degree', '__AbsentNamespace0_harmony_degree', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5222, 3), )

    
    degree = property(__degree.value, __degree.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_harmony_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_harmony_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_harmony_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_harmony_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_harmony_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_harmony_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_harmony_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_harmony_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_harmony_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_harmony_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_harmony_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_harmony_type', harmony_type)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3021, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3021, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute print-frame uses Python identifier print_frame
    __print_frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-frame'), 'print_frame', '__AbsentNamespace0_harmony_print_frame', yes_no)
    __print_frame._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3023, 2)
    __print_frame._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3023, 2)
    
    print_frame = property(__print_frame.value, __print_frame.set, None, None)

    _ElementMap.update({
        __frame.name() : __frame,
        __offset.name() : __offset,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __root.name() : __root,
        __function.name() : __function,
        __kind.name() : __kind,
        __inversion.name() : __inversion,
        __bass.name() : __bass,
        __degree.name() : __degree
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __type.name() : __type,
        __print_frame.name() : __print_frame
    })
Namespace.addCategoryObject('typeBinding', u'harmony', harmony)


# Complex type harp-pedals with content type ELEMENT_ONLY
class harp_pedals (pyxb.binding.basis.complexTypeDefinition):
    """The harp-pedals type is used to create harp pedal diagrams. The pedal-step and pedal-alter elements use the same values as the step and alter elements. For easiest reading, the pedal-tuning elements should follow standard harp pedal order, with pedal-step values of D, C, B, E, F, G, and A."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'harp-pedals')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3028, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pedal-tuning uses Python identifier pedal_tuning
    __pedal_tuning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pedal-tuning'), 'pedal_tuning', '__AbsentNamespace0_harp_pedals_pedal_tuning', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3033, 3), )

    
    pedal_tuning = property(__pedal_tuning.value, __pedal_tuning.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_harp_pedals_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_harp_pedals_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_harp_pedals_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_harp_pedals_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_harp_pedals_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_harp_pedals_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_harp_pedals_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_harp_pedals_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_harp_pedals_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_harp_pedals_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_harp_pedals_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __pedal_tuning.name() : __pedal_tuning
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'harp-pedals', harp_pedals)


# Complex type inversion with content type SIMPLE
class inversion (pyxb.binding.basis.complexTypeDefinition):
    """The inversion type represents harmony inversions. The value is a number indicating which inversion is used: 0 for root position, 1 for first inversion, etc."""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'inversion')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3045, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_inversion_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_inversion_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_inversion_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_inversion_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_inversion_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_inversion_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_inversion_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_inversion_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_inversion_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'inversion', inversion)


# Complex type kind with content type SIMPLE
class kind (pyxb.binding.basis.complexTypeDefinition):
    """Kind indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points
	
The attributes are used to indicate the formatting of the symbol. Since the kind element is the constant in all the harmony-chord groups that can make up a polychord, many formatting attributes are here.
	
The use-symbols attribute is yes if the kind should be represented when possible with harmony symbols rather than letters and numbers. These symbols include:
	
	major: a triangle, like Unicode 25B3
	minor: -, like Unicode 002D
	augmented: +, like Unicode 002B
	diminished: °, like Unicode 00B0
	half-diminished: ø, like Unicode 00F8
	
For the major-minor kind, only the minor symbol is used when use-symbols is yes. The major symbol is set using the symbol attribute in the degree-value element. The corresponding degree-alter value will usually be 0 in this case.

The text attribute describes how the kind should be spelled in a score. If use-symbols is yes, the value of the text attribute follows the symbol. The stack-degrees attribute is yes if the degree elements should be stacked above each other. The parentheses-degrees attribute is yes if all the degrees should be in parentheses. The bracket-degrees attribute is yes if all the degrees should be in a bracket. If not specified, these values are implementation-specific. The alignment attributes are for the entire harmony-chord group of which this kind element is a part."""
    _TypeDefinition = kind_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'kind')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3056, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is kind_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_kind_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_kind_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_kind_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_kind_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_kind_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_kind_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_kind_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_kind_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_kind_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_kind_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_kind_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute use-symbols uses Python identifier use_symbols
    __use_symbols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'use-symbols'), 'use_symbols', '__AbsentNamespace0_kind_use_symbols', yes_no)
    __use_symbols._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3076, 4)
    __use_symbols._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3076, 4)
    
    use_symbols = property(__use_symbols.value, __use_symbols.set, None, None)

    
    # Attribute text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__AbsentNamespace0_kind_text', pyxb.binding.datatypes.token)
    __text._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3077, 4)
    __text._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3077, 4)
    
    text = property(__text.value, __text.set, None, None)

    
    # Attribute stack-degrees uses Python identifier stack_degrees
    __stack_degrees = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stack-degrees'), 'stack_degrees', '__AbsentNamespace0_kind_stack_degrees', yes_no)
    __stack_degrees._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3078, 4)
    __stack_degrees._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3078, 4)
    
    stack_degrees = property(__stack_degrees.value, __stack_degrees.set, None, None)

    
    # Attribute parentheses-degrees uses Python identifier parentheses_degrees
    __parentheses_degrees = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentheses-degrees'), 'parentheses_degrees', '__AbsentNamespace0_kind_parentheses_degrees', yes_no)
    __parentheses_degrees._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3079, 4)
    __parentheses_degrees._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3079, 4)
    
    parentheses_degrees = property(__parentheses_degrees.value, __parentheses_degrees.set, None, None)

    
    # Attribute bracket-degrees uses Python identifier bracket_degrees
    __bracket_degrees = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bracket-degrees'), 'bracket_degrees', '__AbsentNamespace0_kind_bracket_degrees', yes_no)
    __bracket_degrees._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3080, 4)
    __bracket_degrees._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3080, 4)
    
    bracket_degrees = property(__bracket_degrees.value, __bracket_degrees.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __use_symbols.name() : __use_symbols,
        __text.name() : __text,
        __stack_degrees.name() : __stack_degrees,
        __parentheses_degrees.name() : __parentheses_degrees,
        __bracket_degrees.name() : __bracket_degrees
    })
Namespace.addCategoryObject('typeBinding', u'kind', kind)


# Complex type measure-numbering with content type SIMPLE
class measure_numbering (pyxb.binding.basis.complexTypeDefinition):
    """The measure-numbering type describes how frequently measure numbers are displayed on this part. The number attribute from the measure element is used for printing. Measures with an implicit attribute set to "yes" never display a measure number, regardless of the measure-numbering setting."""
    _TypeDefinition = measure_numbering_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'measure-numbering')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3088, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is measure_numbering_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_measure_numbering_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_measure_numbering_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_measure_numbering_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_measure_numbering_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_measure_numbering_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_measure_numbering_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_measure_numbering_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_measure_numbering_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_measure_numbering_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_measure_numbering_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_measure_numbering_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'measure-numbering', measure_numbering)


# Complex type metronome with content type ELEMENT_ONLY
class metronome (pyxb.binding.basis.complexTypeDefinition):
    """The metronome type represents metronome marks and other metric relationships. The beat-unit group and per-minute element specify regular metronome marks. The metronome-note and metronome-relation elements allow for the specification of more complicated metric relationships, such as swing tempo marks where two eighths are equated to a quarter note / eighth note triplet. The parentheses attribute indicates whether or not to put the metronome mark in parentheses; its value is no if not specified."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'metronome')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3099, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element per-minute uses Python identifier per_minute
    __per_minute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'per-minute'), 'per_minute', '__AbsentNamespace0_metronome_per_minute', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3107, 5), )

    
    per_minute = property(__per_minute.value, __per_minute.set, None, None)

    
    # Element metronome-note uses Python identifier metronome_note
    __metronome_note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metronome-note'), 'metronome_note', '__AbsentNamespace0_metronome_metronome_note', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3112, 4), )

    
    metronome_note = property(__metronome_note.value, __metronome_note.set, None, None)

    
    # Element metronome-relation uses Python identifier metronome_relation
    __metronome_relation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metronome-relation'), 'metronome_relation', '__AbsentNamespace0_metronome_metronome_relation', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3114, 5), )

    
    metronome_relation = property(__metronome_relation.value, __metronome_relation.set, None, u'The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used.')

    
    # Element beat-unit uses Python identifier beat_unit
    __beat_unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beat-unit'), 'beat_unit', '__AbsentNamespace0_metronome_beat_unit', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5191, 3), )

    
    beat_unit = property(__beat_unit.value, __beat_unit.set, None, u'The beat-unit element indicates the graphical note type to use in a metronome mark.')

    
    # Element beat-unit-dot uses Python identifier beat_unit_dot
    __beat_unit_dot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beat-unit-dot'), 'beat_unit_dot', '__AbsentNamespace0_metronome_beat_unit_dot', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5196, 3), )

    
    beat_unit_dot = property(__beat_unit_dot.value, __beat_unit_dot.set, None, u'The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.')

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_metronome_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_metronome_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_metronome_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_metronome_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_metronome_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_metronome_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute justify uses Python identifier justify
    __justify = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justify'), 'justify', '__AbsentNamespace0_metronome_justify', left_center_right)
    __justify._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    __justify._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    
    justify = property(__justify.value, __justify.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_metronome_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_metronome_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_metronome_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_metronome_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_metronome_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute parentheses uses Python identifier parentheses
    __parentheses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentheses'), 'parentheses', '__AbsentNamespace0_metronome_parentheses', yes_no)
    __parentheses._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3125, 2)
    __parentheses._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3125, 2)
    
    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    _ElementMap.update({
        __per_minute.name() : __per_minute,
        __metronome_note.name() : __metronome_note,
        __metronome_relation.name() : __metronome_relation,
        __beat_unit.name() : __beat_unit,
        __beat_unit_dot.name() : __beat_unit_dot
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __justify.name() : __justify,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __parentheses.name() : __parentheses
    })
Namespace.addCategoryObject('typeBinding', u'metronome', metronome)


# Complex type octave-shift with content type EMPTY
class octave_shift (pyxb.binding.basis.complexTypeDefinition):
    """The octave shift type indicates where notes are shifted up or down from their true pitched values because of printing difficulty. Thus a treble clef line noted with 8va will be indicated with an octave-shift down from the pitch data indicated in the notes. A size of 8 indicates one octave; a size of 15 indicates two octaves."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'octave-shift')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3172, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_octave_shift_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_octave_shift_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_octave_shift_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_octave_shift_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_octave_shift_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_octave_shift_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_octave_shift_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_octave_shift_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_octave_shift_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_octave_shift_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_octave_shift_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_octave_shift_type', up_down_stop_continue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3176, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3176, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_octave_shift_number', number_level)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3177, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3177, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__AbsentNamespace0_octave_shift_size', pyxb.binding.datatypes.positiveInteger, unicode_default=u'8')
    __size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3178, 2)
    __size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3178, 2)
    
    size = property(__size.value, __size.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __size.name() : __size
    })
Namespace.addCategoryObject('typeBinding', u'octave-shift', octave_shift)


# Complex type other-direction with content type SIMPLE
class other_direction (pyxb.binding.basis.complexTypeDefinition):
    """The other-direction type is used to define any direction symbols not yet in the current version of the MusicXML format. This allows extended representation, though without application interoperability."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'other-direction')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3194, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_other_direction_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_other_direction_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_other_direction_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_other_direction_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_other_direction_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_other_direction_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_other_direction_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_other_direction_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_other_direction_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_other_direction_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_other_direction_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_other_direction_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'other-direction', other_direction)


# Complex type pedal with content type EMPTY
class pedal (pyxb.binding.basis.complexTypeDefinition):
    """The pedal type represents piano pedal marks. The line attribute is yes if pedal lines are used. The sign attribute is yes if Ped and * signs are used. For MusicXML 2.0 compatibility, the sign attribute is yes by default if the line attribute is no, and is no by default if the line attribute is yes. The change and continue types are used when the line attribute is yes. The change type indicates a pedal lift and retake indicated with an inverted V marking. The continue type allows more precise formatting across system breaks and for more complex pedaling lines. The alignment attributes are ignored if the line attribute is yes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pedal')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3206, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_pedal_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_pedal_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_pedal_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_pedal_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_pedal_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_pedal_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_pedal_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_pedal_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_pedal_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_pedal_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_pedal_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_pedal_type', start_stop_change_continue, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3210, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3210, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute line uses Python identifier line
    __line = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line'), 'line', '__AbsentNamespace0_pedal_line', yes_no)
    __line._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3211, 2)
    __line._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3211, 2)
    
    line = property(__line.value, __line.set, None, None)

    
    # Attribute sign uses Python identifier sign
    __sign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sign'), 'sign', '__AbsentNamespace0_pedal_sign', yes_no)
    __sign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3212, 2)
    __sign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3212, 2)
    
    sign = property(__sign.value, __sign.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __type.name() : __type,
        __line.name() : __line,
        __sign.name() : __sign
    })
Namespace.addCategoryObject('typeBinding', u'pedal', pedal)


# Complex type per-minute with content type SIMPLE
class per_minute (pyxb.binding.basis.complexTypeDefinition):
    """The per-minute type can be a number, or a text description including numbers. If a font is specified, it overrides the font specified for the overall metronome element. This allows separate specification of a music font for the beat-unit and a text font for the numeric value, in cases where a single metronome font is not used."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'per-minute')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3234, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_per_minute_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_per_minute_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_per_minute_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_per_minute_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
Namespace.addCategoryObject('typeBinding', u'per-minute', per_minute)


# Complex type percussion with content type ELEMENT_ONLY
class percussion (pyxb.binding.basis.complexTypeDefinition):
    """The percussion element is used to define percussion pictogram symbols. Definitions for these symbols can be found in Kurt Stone's "Music Notation in the Twentieth Century" on pages 206-212 and 223. Some values are added to these based on how usage has evolved in the 30 years since Stone's book was published."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'percussion')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3245, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element glass uses Python identifier glass
    __glass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'glass'), 'glass', '__AbsentNamespace0_percussion_glass', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3250, 3), )

    
    glass = property(__glass.value, __glass.set, None, None)

    
    # Element metal uses Python identifier metal
    __metal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metal'), 'metal', '__AbsentNamespace0_percussion_metal', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3251, 3), )

    
    metal = property(__metal.value, __metal.set, None, None)

    
    # Element wood uses Python identifier wood
    __wood = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'wood'), 'wood', '__AbsentNamespace0_percussion_wood', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3252, 3), )

    
    wood = property(__wood.value, __wood.set, None, None)

    
    # Element pitched uses Python identifier pitched
    __pitched = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pitched'), 'pitched', '__AbsentNamespace0_percussion_pitched', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3253, 3), )

    
    pitched = property(__pitched.value, __pitched.set, None, None)

    
    # Element membrane uses Python identifier membrane
    __membrane = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'membrane'), 'membrane', '__AbsentNamespace0_percussion_membrane', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3254, 3), )

    
    membrane = property(__membrane.value, __membrane.set, None, None)

    
    # Element effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'effect'), 'effect', '__AbsentNamespace0_percussion_effect', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3255, 3), )

    
    effect = property(__effect.value, __effect.set, None, None)

    
    # Element timpani uses Python identifier timpani
    __timpani = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'timpani'), 'timpani', '__AbsentNamespace0_percussion_timpani', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3256, 3), )

    
    timpani = property(__timpani.value, __timpani.set, None, None)

    
    # Element beater uses Python identifier beater
    __beater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beater'), 'beater', '__AbsentNamespace0_percussion_beater', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3257, 3), )

    
    beater = property(__beater.value, __beater.set, None, None)

    
    # Element stick uses Python identifier stick
    __stick = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stick'), 'stick', '__AbsentNamespace0_percussion_stick', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3258, 3), )

    
    stick = property(__stick.value, __stick.set, None, None)

    
    # Element stick-location uses Python identifier stick_location
    __stick_location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stick-location'), 'stick_location', '__AbsentNamespace0_percussion_stick_location', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3259, 3), )

    
    stick_location = property(__stick_location.value, __stick_location.set, None, None)

    
    # Element other-percussion uses Python identifier other_percussion
    __other_percussion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'other-percussion'), 'other_percussion', '__AbsentNamespace0_percussion_other_percussion', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3260, 3), )

    
    other_percussion = property(__other_percussion.value, __other_percussion.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_percussion_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute enclosure uses Python identifier enclosure
    __enclosure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enclosure'), 'enclosure', '__AbsentNamespace0_percussion_enclosure', enclosure_shape)
    __enclosure._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1616, 2)
    
    enclosure = property(__enclosure.value, __enclosure.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_percussion_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_percussion_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_percussion_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_percussion_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_percussion_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_percussion_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_percussion_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_percussion_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_percussion_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_percussion_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __glass.name() : __glass,
        __metal.name() : __metal,
        __wood.name() : __wood,
        __pitched.name() : __pitched,
        __membrane.name() : __membrane,
        __effect.name() : __effect,
        __timpani.name() : __timpani,
        __beater.name() : __beater,
        __stick.name() : __stick,
        __stick_location.name() : __stick_location,
        __other_percussion.name() : __other_percussion
    })
    _AttributeMap.update({
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
Namespace.addCategoryObject('typeBinding', u'percussion', percussion)


# Complex type principal-voice with content type SIMPLE
class principal_voice (pyxb.binding.basis.complexTypeDefinition):
    """The principal-voice element represents principal and secondary voices in a score, either for analysis or for square bracket symbols that appear in a score. The symbol attribute indicates the type of symbol used at the start of the principal-voice. The content of the principal-voice element is used for analysis and may be any text value. When used for analysis separate from any printed score markings, the symbol attribute should be set to "none"."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'principal-voice')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3266, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_principal_voice_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_principal_voice_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_principal_voice_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_principal_voice_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_principal_voice_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_principal_voice_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_principal_voice_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_principal_voice_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_principal_voice_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_principal_voice_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_principal_voice_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_principal_voice_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3272, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3272, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute symbol uses Python identifier symbol
    __symbol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'symbol'), 'symbol', '__AbsentNamespace0_principal_voice_symbol', principal_voice_symbol, required=True)
    __symbol._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3273, 4)
    __symbol._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3273, 4)
    
    symbol = property(__symbol.value, __symbol.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __type.name() : __type,
        __symbol.name() : __symbol
    })
Namespace.addCategoryObject('typeBinding', u'principal-voice', principal_voice)


# Complex type root-alter with content type SIMPLE
class root_alter (pyxb.binding.basis.complexTypeDefinition):
    """The root-alter type represents the chromatic alteration of the root of the current chord within the harmony element. In some chord styles, the text for the root-step element may include root-alter information. In that case, the print-object attribute of the root-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the root-step; it is right by default."""
    _TypeDefinition = semitones
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'root-alter')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3305, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is semitones
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_root_alter_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_root_alter_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_root_alter_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_root_alter_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_root_alter_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_root_alter_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_root_alter_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_root_alter_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_root_alter_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_root_alter_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute location uses Python identifier location
    __location = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'location'), 'location', '__AbsentNamespace0_root_alter_location', left_right)
    __location._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3313, 4)
    __location._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3313, 4)
    
    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __location.name() : __location
    })
Namespace.addCategoryObject('typeBinding', u'root-alter', root_alter)


# Complex type root-step with content type SIMPLE
class root_step (pyxb.binding.basis.complexTypeDefinition):
    """The root-step type represents the pitch step of the root of the current chord within the harmony element. The text attribute indicates how the root should appear in a score if not using the element contents."""
    _TypeDefinition = step
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'root-step')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3318, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is step
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_root_step_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_root_step_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_root_step_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_root_step_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_root_step_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_root_step_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_root_step_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_root_step_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_root_step_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__AbsentNamespace0_root_step_text', pyxb.binding.datatypes.token)
    __text._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3324, 4)
    __text._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3324, 4)
    
    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __text.name() : __text
    })
Namespace.addCategoryObject('typeBinding', u'root-step', root_step)


# Complex type sound with content type ELEMENT_ONLY
class sound (pyxb.binding.basis.complexTypeDefinition):
    """The sound element contains general playback parameters. They can stand alone within a part/measure, or be a component element within a direction.
	
Tempo is expressed in quarter notes per minute. If 0, the sound-generating program should prompt the user at the time of compiling a sound (MIDI) file.
	
Dynamics (or MIDI velocity) are expressed as a percentage of the default forte value (90 for MIDI 1.0).
	
Dacapo indicates to go back to the beginning of the movement. When used it always has the value "yes".
	
Segno and dalsegno are used for backwards jumps to a segno sign; coda and tocoda are used for forward jumps to a coda sign. If there are multiple jumps, the value of these parameters can be used to name and distinguish them. If segno or coda is used, the divisions attribute can also be used to indicate the number of divisions per quarter note. Otherwise sound and MIDI generating programs may have to recompute this.
	
By default, a dalsegno or dacapo attribute indicates that the jump should occur the first time through, while a tocoda attribute indicates the jump should occur the second time through. The time that jumps occur can be changed by using the time-only attribute.
	
Forward-repeat is used when a forward repeat sign is implied, and usually follows a bar line. When used it always has the value of "yes".
	
The fine attribute follows the final note or rest in a movement with a da capo or dal segno direction. If numeric, the value represents the actual duration of the final note or rest, which can be ambiguous in written notation and different among parts and voices. The value may also be "yes" to indicate no change to the final duration.
	
If the sound element applies only particular times through a repeat, the time-only attribute indicates which times to apply the sound element.
	
Pizzicato in a sound element effects all following notes. Yes indicates pizzicato, no indicates arco.

The pan and elevation attributes are deprecated in Version 2.0. The pan and elevation elements in the midi-instrument element should be used instead. The meaning of the pan and elevation attributes is the same as for the pan and elevation elements. If both are present, the mid-instrument elements take priority.
	
The damper-pedal, soft-pedal, and sostenuto-pedal attributes effect playback of the three common piano pedals and their MIDI controller equivalents. The yes value indicates the pedal is depressed; no indicates the pedal is released. A numeric value from 0 to 100 may also be used for half pedaling. This value is the percentage that the pedal is depressed. A value of 0 is equivalent to no, and a value of 100 is equivalent to yes.
	
MIDI devices, MIDI instruments, and playback techniques are changed using the midi-device, midi-instrument, and play elements. When there are multiple instances of these elements, they should be grouped together by instrument using the id attribute values.

The offset element is used to indicate that the sound takes place offset from the current score position. If the sound element is a child of a direction element, the sound offset element overrides the direction offset element if both elements are present. Note that the offset reflects the intended musical position for the change in sound. It should not be used to compensate for latency issues in particular hardware configurations."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'sound')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3339, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element midi-device uses Python identifier midi_device
    __midi_device = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-device'), 'midi_device', '__AbsentNamespace0_sound_midi_device', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3371, 4), )

    
    midi_device = property(__midi_device.value, __midi_device.set, None, None)

    
    # Element midi-instrument uses Python identifier midi_instrument
    __midi_instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'midi-instrument'), 'midi_instrument', '__AbsentNamespace0_sound_midi_instrument', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3372, 4), )

    
    midi_instrument = property(__midi_instrument.value, __midi_instrument.set, None, None)

    
    # Element play uses Python identifier play
    __play = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'play'), 'play', '__AbsentNamespace0_sound_play', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3373, 4), )

    
    play = property(__play.value, __play.set, None, None)

    
    # Element offset uses Python identifier offset
    __offset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'offset'), 'offset', '__AbsentNamespace0_sound_offset', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3375, 3), )

    
    offset = property(__offset.value, __offset.set, None, None)

    
    # Attribute tempo uses Python identifier tempo
    __tempo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tempo'), 'tempo', '__AbsentNamespace0_sound_tempo', non_negative_decimal)
    __tempo._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3377, 2)
    __tempo._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3377, 2)
    
    tempo = property(__tempo.value, __tempo.set, None, None)

    
    # Attribute dynamics uses Python identifier dynamics
    __dynamics = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dynamics'), 'dynamics', '__AbsentNamespace0_sound_dynamics', non_negative_decimal)
    __dynamics._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3378, 2)
    __dynamics._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3378, 2)
    
    dynamics = property(__dynamics.value, __dynamics.set, None, None)

    
    # Attribute dacapo uses Python identifier dacapo
    __dacapo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dacapo'), 'dacapo', '__AbsentNamespace0_sound_dacapo', yes_no)
    __dacapo._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3379, 2)
    __dacapo._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3379, 2)
    
    dacapo = property(__dacapo.value, __dacapo.set, None, None)

    
    # Attribute segno uses Python identifier segno
    __segno = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'segno'), 'segno', '__AbsentNamespace0_sound_segno', pyxb.binding.datatypes.token)
    __segno._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3380, 2)
    __segno._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3380, 2)
    
    segno = property(__segno.value, __segno.set, None, None)

    
    # Attribute dalsegno uses Python identifier dalsegno
    __dalsegno = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dalsegno'), 'dalsegno', '__AbsentNamespace0_sound_dalsegno', pyxb.binding.datatypes.token)
    __dalsegno._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3381, 2)
    __dalsegno._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3381, 2)
    
    dalsegno = property(__dalsegno.value, __dalsegno.set, None, None)

    
    # Attribute coda uses Python identifier coda
    __coda = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coda'), 'coda', '__AbsentNamespace0_sound_coda', pyxb.binding.datatypes.token)
    __coda._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3382, 2)
    __coda._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3382, 2)
    
    coda = property(__coda.value, __coda.set, None, None)

    
    # Attribute tocoda uses Python identifier tocoda
    __tocoda = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tocoda'), 'tocoda', '__AbsentNamespace0_sound_tocoda', pyxb.binding.datatypes.token)
    __tocoda._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3383, 2)
    __tocoda._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3383, 2)
    
    tocoda = property(__tocoda.value, __tocoda.set, None, None)

    
    # Attribute divisions uses Python identifier divisions
    __divisions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'divisions'), 'divisions', '__AbsentNamespace0_sound_divisions', divisions)
    __divisions._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3384, 2)
    __divisions._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3384, 2)
    
    divisions = property(__divisions.value, __divisions.set, None, None)

    
    # Attribute forward-repeat uses Python identifier forward_repeat
    __forward_repeat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forward-repeat'), 'forward_repeat', '__AbsentNamespace0_sound_forward_repeat', yes_no)
    __forward_repeat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3385, 2)
    __forward_repeat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3385, 2)
    
    forward_repeat = property(__forward_repeat.value, __forward_repeat.set, None, None)

    
    # Attribute fine uses Python identifier fine
    __fine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fine'), 'fine', '__AbsentNamespace0_sound_fine', pyxb.binding.datatypes.token)
    __fine._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3386, 2)
    __fine._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3386, 2)
    
    fine = property(__fine.value, __fine.set, None, None)

    
    # Attribute time-only uses Python identifier time_only
    __time_only = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time-only'), 'time_only', '__AbsentNamespace0_sound_time_only', time_only)
    __time_only._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3387, 2)
    __time_only._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3387, 2)
    
    time_only = property(__time_only.value, __time_only.set, None, None)

    
    # Attribute pizzicato uses Python identifier pizzicato
    __pizzicato = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pizzicato'), 'pizzicato', '__AbsentNamespace0_sound_pizzicato', yes_no)
    __pizzicato._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3388, 2)
    __pizzicato._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3388, 2)
    
    pizzicato = property(__pizzicato.value, __pizzicato.set, None, None)

    
    # Attribute pan uses Python identifier pan
    __pan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pan'), 'pan', '__AbsentNamespace0_sound_pan', rotation_degrees)
    __pan._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3389, 2)
    __pan._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3389, 2)
    
    pan = property(__pan.value, __pan.set, None, None)

    
    # Attribute elevation uses Python identifier elevation
    __elevation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'elevation'), 'elevation', '__AbsentNamespace0_sound_elevation', rotation_degrees)
    __elevation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3390, 2)
    __elevation._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3390, 2)
    
    elevation = property(__elevation.value, __elevation.set, None, None)

    
    # Attribute damper-pedal uses Python identifier damper_pedal
    __damper_pedal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'damper-pedal'), 'damper_pedal', '__AbsentNamespace0_sound_damper_pedal', yes_no_number)
    __damper_pedal._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3391, 2)
    __damper_pedal._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3391, 2)
    
    damper_pedal = property(__damper_pedal.value, __damper_pedal.set, None, None)

    
    # Attribute soft-pedal uses Python identifier soft_pedal
    __soft_pedal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'soft-pedal'), 'soft_pedal', '__AbsentNamespace0_sound_soft_pedal', yes_no_number)
    __soft_pedal._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3392, 2)
    __soft_pedal._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3392, 2)
    
    soft_pedal = property(__soft_pedal.value, __soft_pedal.set, None, None)

    
    # Attribute sostenuto-pedal uses Python identifier sostenuto_pedal
    __sostenuto_pedal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sostenuto-pedal'), 'sostenuto_pedal', '__AbsentNamespace0_sound_sostenuto_pedal', yes_no_number)
    __sostenuto_pedal._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3393, 2)
    __sostenuto_pedal._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3393, 2)
    
    sostenuto_pedal = property(__sostenuto_pedal.value, __sostenuto_pedal.set, None, None)

    _ElementMap.update({
        __midi_device.name() : __midi_device,
        __midi_instrument.name() : __midi_instrument,
        __play.name() : __play,
        __offset.name() : __offset
    })
    _AttributeMap.update({
        __tempo.name() : __tempo,
        __dynamics.name() : __dynamics,
        __dacapo.name() : __dacapo,
        __segno.name() : __segno,
        __dalsegno.name() : __dalsegno,
        __coda.name() : __coda,
        __tocoda.name() : __tocoda,
        __divisions.name() : __divisions,
        __forward_repeat.name() : __forward_repeat,
        __fine.name() : __fine,
        __time_only.name() : __time_only,
        __pizzicato.name() : __pizzicato,
        __pan.name() : __pan,
        __elevation.name() : __elevation,
        __damper_pedal.name() : __damper_pedal,
        __soft_pedal.name() : __soft_pedal,
        __sostenuto_pedal.name() : __sostenuto_pedal
    })
Namespace.addCategoryObject('typeBinding', u'sound', sound)


# Complex type string-mute with content type EMPTY
class string_mute (pyxb.binding.basis.complexTypeDefinition):
    """The string-mute type represents string mute on and mute off symbols."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string-mute')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3407, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_string_mute_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_string_mute_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_string_mute_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_string_mute_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_string_mute_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute halign uses Python identifier halign
    __halign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'halign'), 'halign', '__AbsentNamespace0_string_mute_halign', left_center_right)
    __halign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    __halign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1640, 2)
    
    halign = property(__halign.value, __halign.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_string_mute_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_string_mute_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_string_mute_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_string_mute_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__AbsentNamespace0_string_mute_valign', valign)
    __valign._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    __valign._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1855, 2)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_string_mute_type', on_off, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3411, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3411, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'string-mute', string_mute)


# Complex type accidental with content type SIMPLE
class accidental (pyxb.binding.basis.complexTypeDefinition):
    """The accidental type represents actual notated accidentals. Editorial and cautionary indications are indicated by attributes. Values for these attributes are "no" if not present. Specific graphic display such as parentheses, brackets, and size are controlled by the level-display attribute group."""
    _TypeDefinition = accidental_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accidental')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3672, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is accidental_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_accidental_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_accidental_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_accidental_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_accidental_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_accidental_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute parentheses uses Python identifier parentheses
    __parentheses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentheses'), 'parentheses', '__AbsentNamespace0_accidental_parentheses', yes_no)
    __parentheses._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1661, 2)
    __parentheses._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1661, 2)
    
    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    
    # Attribute bracket uses Python identifier bracket
    __bracket = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bracket'), 'bracket', '__AbsentNamespace0_accidental_bracket', yes_no)
    __bracket._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1662, 2)
    __bracket._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1662, 2)
    
    bracket = property(__bracket.value, __bracket.set, None, None)

    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__AbsentNamespace0_accidental_size', symbol_size)
    __size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1663, 2)
    __size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1663, 2)
    
    size = property(__size.value, __size.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_accidental_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_accidental_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_accidental_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_accidental_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute cautionary uses Python identifier cautionary
    __cautionary = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cautionary'), 'cautionary', '__AbsentNamespace0_accidental_cautionary', yes_no)
    __cautionary._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3678, 4)
    __cautionary._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3678, 4)
    
    cautionary = property(__cautionary.value, __cautionary.set, None, None)

    
    # Attribute editorial uses Python identifier editorial
    __editorial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'editorial'), 'editorial', '__AbsentNamespace0_accidental_editorial', yes_no)
    __editorial._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3679, 4)
    __editorial._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3679, 4)
    
    editorial = property(__editorial.value, __editorial.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __parentheses.name() : __parentheses,
        __bracket.name() : __bracket,
        __size.name() : __size,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __cautionary.name() : __cautionary,
        __editorial.name() : __editorial
    })
Namespace.addCategoryObject('typeBinding', u'accidental', accidental)


# Complex type accidental-mark with content type SIMPLE
class accidental_mark (pyxb.binding.basis.complexTypeDefinition):
    """An accidental-mark can be used as a separate notation or as part of an ornament. When used in an ornament, position and placement are relative to the ornament, not relative to the note."""
    _TypeDefinition = accidental_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accidental-mark')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3686, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is accidental_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_accidental_mark_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_accidental_mark_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_accidental_mark_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_accidental_mark_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_accidental_mark_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_accidental_mark_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_accidental_mark_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_accidental_mark_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_accidental_mark_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_accidental_mark_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'accidental-mark', accidental_mark)


# Complex type arrow with content type ELEMENT_ONLY
class arrow (pyxb.binding.basis.complexTypeDefinition):
    """The arrow element represents an arrow used for a musical technical indication.."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'arrow')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3793, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element arrow-direction uses Python identifier arrow_direction
    __arrow_direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'arrow-direction'), 'arrow_direction', '__AbsentNamespace0_arrow_arrow_direction', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3799, 4), )

    
    arrow_direction = property(__arrow_direction.value, __arrow_direction.set, None, None)

    
    # Element arrow-style uses Python identifier arrow_style
    __arrow_style = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'arrow-style'), 'arrow_style', '__AbsentNamespace0_arrow_arrow_style', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3800, 4), )

    
    arrow_style = property(__arrow_style.value, __arrow_style.set, None, None)

    
    # Element circular-arrow uses Python identifier circular_arrow
    __circular_arrow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'circular-arrow'), 'circular_arrow', '__AbsentNamespace0_arrow_circular_arrow', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3802, 3), )

    
    circular_arrow = property(__circular_arrow.value, __circular_arrow.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_arrow_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_arrow_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_arrow_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_arrow_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_arrow_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_arrow_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_arrow_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_arrow_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_arrow_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_arrow_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        __arrow_direction.name() : __arrow_direction,
        __arrow_style.name() : __arrow_style,
        __circular_arrow.name() : __circular_arrow
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'arrow', arrow)


# Complex type bend with content type ELEMENT_ONLY
class bend (pyxb.binding.basis.complexTypeDefinition):
    """The bend type is used in guitar and tablature. The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended. A with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'bend')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3838, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element bend-alter uses Python identifier bend_alter
    __bend_alter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'bend-alter'), 'bend_alter', '__AbsentNamespace0_bend_bend_alter', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3843, 3), )

    
    bend_alter = property(__bend_alter.value, __bend_alter.set, None, u'The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended.')

    
    # Element pre-bend uses Python identifier pre_bend
    __pre_bend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pre-bend'), 'pre_bend', '__AbsentNamespace0_bend_pre_bend', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3849, 4), )

    
    pre_bend = property(__pre_bend.value, __pre_bend.set, None, u'The pre-bend element indicates that this is a pre-bend rather than a normal bend or a release.')

    
    # Element release uses Python identifier release
    __release = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'release'), 'release', '__AbsentNamespace0_bend_release', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3854, 4), )

    
    release = property(__release.value, __release.set, None, u'The release element indicates that this is a release rather than a normal bend or pre-bend.')

    
    # Element with-bar uses Python identifier with_bar
    __with_bar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'with-bar'), 'with_bar', '__AbsentNamespace0_bend_with_bar', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3860, 3), )

    
    with_bar = property(__with_bar.value, __with_bar.set, None, u'The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated.')

    
    # Attribute accelerate uses Python identifier accelerate
    __accelerate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accelerate'), 'accelerate', '__AbsentNamespace0_bend_accelerate', yes_no)
    __accelerate._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1557, 2)
    __accelerate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1557, 2)
    
    accelerate = property(__accelerate.value, __accelerate.set, None, None)

    
    # Attribute beats uses Python identifier beats
    __beats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'beats'), 'beats', '__AbsentNamespace0_bend_beats', trill_beats)
    __beats._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1558, 2)
    __beats._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1558, 2)
    
    beats = property(__beats.value, __beats.set, None, None)

    
    # Attribute first-beat uses Python identifier first_beat
    __first_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'first-beat'), 'first_beat', '__AbsentNamespace0_bend_first_beat', percent)
    __first_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1559, 2)
    __first_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1559, 2)
    
    first_beat = property(__first_beat.value, __first_beat.set, None, None)

    
    # Attribute last-beat uses Python identifier last_beat
    __last_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'last-beat'), 'last_beat', '__AbsentNamespace0_bend_last_beat', percent)
    __last_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1560, 2)
    __last_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1560, 2)
    
    last_beat = property(__last_beat.value, __last_beat.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_bend_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_bend_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_bend_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_bend_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_bend_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_bend_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_bend_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_bend_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_bend_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        __bend_alter.name() : __bend_alter,
        __pre_bend.name() : __pre_bend,
        __release.name() : __release,
        __with_bar.name() : __with_bar
    })
    _AttributeMap.update({
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __first_beat.name() : __first_beat,
        __last_beat.name() : __last_beat,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'bend', bend)


# Complex type breath-mark with content type SIMPLE
class breath_mark (pyxb.binding.basis.complexTypeDefinition):
    """The breath-mark element indicates a place to take a breath."""
    _TypeDefinition = breath_mark_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'breath-mark')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3870, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is breath_mark_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_breath_mark_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_breath_mark_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_breath_mark_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_breath_mark_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_breath_mark_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_breath_mark_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_breath_mark_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_breath_mark_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_breath_mark_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_breath_mark_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'breath-mark', breath_mark)


# Complex type empty-line with content type EMPTY
class empty_line (pyxb.binding.basis.complexTypeDefinition):
    """The empty-line type represents an empty element with line-shape, line-type, dashed-formatting, print-style and placement attributes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty-line')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3882, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_empty_line_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_empty_line_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_empty_line_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_empty_line_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_empty_line_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_empty_line_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_empty_line_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute line-shape uses Python identifier line_shape
    __line_shape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-shape'), 'line_shape', '__AbsentNamespace0_empty_line_line_shape', line_shape)
    __line_shape._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1677, 2)
    __line_shape._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1677, 2)
    
    line_shape = property(__line_shape.value, __line_shape.set, None, None)

    
    # Attribute line-type uses Python identifier line_type
    __line_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-type'), 'line_type', '__AbsentNamespace0_empty_line_line_type', line_type)
    __line_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    __line_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    
    line_type = property(__line_type.value, __line_type.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_empty_line_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_empty_line_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_empty_line_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_empty_line_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_empty_line_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __line_shape.name() : __line_shape,
        __line_type.name() : __line_type,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'empty-line', empty_line)


# Complex type extend with content type EMPTY
class extend (pyxb.binding.basis.complexTypeDefinition):
    """The extend type represents lyric word extension / melisma lines as well as figured bass extensions. The optional type and position attributes are added in Version 3.0 to provide better formatting control."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'extend')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3893, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_extend_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_extend_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_extend_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_extend_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_extend_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_extend_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_extend_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_extend_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_extend_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_extend_type', start_stop_continue)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3897, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3897, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'extend', extend)


# Complex type figured-bass with content type ELEMENT_ONLY
class figured_bass (pyxb.binding.basis.complexTypeDefinition):
    """The figured-bass element represents figured bass notation. Figured bass elements take their position from the first regular note (not a grace note or chord note) that follows in score order. The optional duration element is used to indicate changes of figures under a note.
	
Figures are ordered from top to bottom. The value of parentheses is "no" if not present."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'figured-bass')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3925, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element figure uses Python identifier figure
    __figure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'figure'), 'figure', '__AbsentNamespace0_figured_bass_figure', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3932, 3), )

    
    figure = property(__figure.value, __figure.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_figured_bass_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_figured_bass_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Element duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'duration'), 'duration', '__AbsentNamespace0_figured_bass_duration', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3), )

    
    duration = property(__duration.value, __duration.set, None, u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_figured_bass_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_figured_bass_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_figured_bass_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_figured_bass_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_figured_bass_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_figured_bass_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_figured_bass_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_figured_bass_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_figured_bass_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_figured_bass_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute print-spacing uses Python identifier print_spacing
    __print_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-spacing'), 'print_spacing', '__AbsentNamespace0_figured_bass_print_spacing', yes_no)
    __print_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1751, 2)
    __print_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1751, 2)
    
    print_spacing = property(__print_spacing.value, __print_spacing.set, None, None)

    
    # Attribute print-dot uses Python identifier print_dot
    __print_dot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-dot'), 'print_dot', '__AbsentNamespace0_figured_bass_print_dot', yes_no)
    __print_dot._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1779, 2)
    __print_dot._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1779, 2)
    
    print_dot = property(__print_dot.value, __print_dot.set, None, None)

    
    # Attribute print-lyric uses Python identifier print_lyric
    __print_lyric = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-lyric'), 'print_lyric', '__AbsentNamespace0_figured_bass_print_lyric', yes_no)
    __print_lyric._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1781, 2)
    __print_lyric._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1781, 2)
    
    print_lyric = property(__print_lyric.value, __print_lyric.set, None, None)

    
    # Attribute parentheses uses Python identifier parentheses
    __parentheses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentheses'), 'parentheses', '__AbsentNamespace0_figured_bass_parentheses', yes_no)
    __parentheses._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3938, 2)
    __parentheses._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3938, 2)
    
    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    _ElementMap.update({
        __figure.name() : __figure,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __duration.name() : __duration
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __print_spacing.name() : __print_spacing,
        __print_dot.name() : __print_dot,
        __print_lyric.name() : __print_lyric,
        __parentheses.name() : __parentheses
    })
Namespace.addCategoryObject('typeBinding', u'figured-bass', figured_bass)


# Complex type glissando with content type SIMPLE
class glissando (pyxb.binding.basis.complexTypeDefinition):
    """Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. The distinction is similar to that between NIFF's glissando and portamento elements. A glissando sounds the half notes in between the slide and defaults to a wavy line. The optional text is printed alongside the line."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'glissando')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3952, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_glissando_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_glissando_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_glissando_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_glissando_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_glissando_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_glissando_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_glissando_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute line-type uses Python identifier line_type
    __line_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-type'), 'line_type', '__AbsentNamespace0_glissando_line_type', line_type)
    __line_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    __line_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    
    line_type = property(__line_type.value, __line_type.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_glissando_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_glissando_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_glissando_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_glissando_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_glissando_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3958, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3958, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_glissando_number', number_level, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3959, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3959, 4)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'glissando', glissando)


# Complex type hammer-on-pull-off with content type SIMPLE
class hammer_on_pull_off (pyxb.binding.basis.complexTypeDefinition):
    """The hammer-on and pull-off elements are used in guitar and fretted instrument notation. Since a single slur can be marked over many notes, the hammer-on and pull-off elements are separate so the individual pair of notes can be specified. The element content can be used to specify how the hammer-on or pull-off should be notated. An empty element leaves this choice up to the application."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'hammer-on-pull-off')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3977, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_hammer_on_pull_off_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_hammer_on_pull_off_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_hammer_on_pull_off_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_hammer_on_pull_off_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_hammer_on_pull_off_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_hammer_on_pull_off_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_hammer_on_pull_off_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_hammer_on_pull_off_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_hammer_on_pull_off_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_hammer_on_pull_off_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_hammer_on_pull_off_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3983, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3983, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_hammer_on_pull_off_number', number_level, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3984, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3984, 4)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'hammer-on-pull-off', hammer_on_pull_off)


# Complex type handbell with content type SIMPLE
class handbell (pyxb.binding.basis.complexTypeDefinition):
    """The handbell element represents notation for various techniques used in handbell and handchime music."""
    _TypeDefinition = handbell_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'handbell')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3991, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is handbell_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_handbell_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_handbell_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_handbell_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_handbell_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_handbell_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_handbell_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_handbell_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_handbell_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_handbell_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_handbell_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'handbell', handbell)


# Complex type harmonic with content type ELEMENT_ONLY
class harmonic (pyxb.binding.basis.complexTypeDefinition):
    """The harmonic type indicates natural and artificial harmonics. Allowing the type of pitch to be specified, combined with controls for appearance/playback differences, allows both the notation and the sound to be represented. Artificial harmonics can add a notated touching-pitch; artificial pinch harmonics will usually not notate a touching pitch. The attributes for the harmonic element refer to the use of the circular harmonic symbol, typically but not always used with natural harmonics."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'harmonic')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4003, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element natural uses Python identifier natural
    __natural = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'natural'), 'natural', '__AbsentNamespace0_harmonic_natural', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4009, 4), )

    
    natural = property(__natural.value, __natural.set, None, u'The natural element indicates that this is a natural harmonic. These are usually notated at base pitch rather than sounding pitch.')

    
    # Element artificial uses Python identifier artificial
    __artificial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'artificial'), 'artificial', '__AbsentNamespace0_harmonic_artificial', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4014, 4), )

    
    artificial = property(__artificial.value, __artificial.set, None, u'The artificial element indicates that this is an artificial harmonic.')

    
    # Element base-pitch uses Python identifier base_pitch
    __base_pitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'base-pitch'), 'base_pitch', '__AbsentNamespace0_harmonic_base_pitch', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4021, 4), )

    
    base_pitch = property(__base_pitch.value, __base_pitch.set, None, u'The base pitch is the pitch at which the string is played before touching to create the harmonic.')

    
    # Element touching-pitch uses Python identifier touching_pitch
    __touching_pitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'touching-pitch'), 'touching_pitch', '__AbsentNamespace0_harmonic_touching_pitch', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4026, 4), )

    
    touching_pitch = property(__touching_pitch.value, __touching_pitch.set, None, u'The touching-pitch is the pitch at which the string is touched lightly to produce the harmonic.')

    
    # Element sounding-pitch uses Python identifier sounding_pitch
    __sounding_pitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sounding-pitch'), 'sounding_pitch', '__AbsentNamespace0_harmonic_sounding_pitch', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4031, 4), )

    
    sounding_pitch = property(__sounding_pitch.value, __sounding_pitch.set, None, u'The sounding-pitch is the pitch which is heard when playing the harmonic.')

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_harmonic_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_harmonic_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_harmonic_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_harmonic_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_harmonic_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_harmonic_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_harmonic_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_harmonic_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_harmonic_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_harmonic_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_harmonic_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __natural.name() : __natural,
        __artificial.name() : __artificial,
        __base_pitch.name() : __base_pitch,
        __touching_pitch.name() : __touching_pitch,
        __sounding_pitch.name() : __sounding_pitch
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object
    })
Namespace.addCategoryObject('typeBinding', u'harmonic', harmonic)


# Complex type hole with content type ELEMENT_ONLY
class hole (pyxb.binding.basis.complexTypeDefinition):
    """The hole type represents the symbols used for woodwind and brass fingerings as well as other notations."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'hole')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4054, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element hole-type uses Python identifier hole_type
    __hole_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hole-type'), 'hole_type', '__AbsentNamespace0_hole_hole_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4059, 3), )

    
    hole_type = property(__hole_type.value, __hole_type.set, None, u'The content of the optional hole-type element indicates what the hole symbol represents in terms of instrument fingering or other techniques.')

    
    # Element hole-closed uses Python identifier hole_closed
    __hole_closed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hole-closed'), 'hole_closed', '__AbsentNamespace0_hole_hole_closed', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4064, 3), )

    
    hole_closed = property(__hole_closed.value, __hole_closed.set, None, None)

    
    # Element hole-shape uses Python identifier hole_shape
    __hole_shape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hole-shape'), 'hole_shape', '__AbsentNamespace0_hole_hole_shape', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4065, 3), )

    
    hole_shape = property(__hole_shape.value, __hole_shape.set, None, u'The optional hole-shape element indicates the shape of the hole symbol; the default is a circle.')

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_hole_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_hole_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_hole_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_hole_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_hole_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_hole_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_hole_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_hole_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_hole_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_hole_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        __hole_type.name() : __hole_type,
        __hole_closed.name() : __hole_closed,
        __hole_shape.name() : __hole_shape
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'hole', hole)


# Complex type note with content type ELEMENT_ONLY
class note (pyxb.binding.basis.complexTypeDefinition):
    """Notes are the most common type of MusicXML data. The MusicXML format keeps the MuseData distinction between elements used for sound information and elements used for notation information (e.g., tie is used for sound, tied for notation). Thus grace notes do not have a duration element. Cue notes have a duration element, as do forward elements, but no tie elements. Having these two types of information available can make interchange considerably easier, as some programs handle one type of information much more readily than the other. 
	
The dynamics and end-dynamics attributes correspond to MIDI 1.0's Note On and Note Off velocities, respectively. They are expressed in terms of percentages of the default forte value (90 for MIDI 1.0). The attack and release attributes are used to alter the starting and stopping time of the note from when it would otherwise occur based on the flow of durations - information that is specific to a performance. They are expressed in terms of divisions, either positive or negative. A note that starts a tie should not have a release attribute, and a note that stops a tie should not have an attack attribute. If a note is played only particular times through a repeat, the time-only attribute shows which times to play the note. The pizzicato attribute is used when just this note is sounded pizzicato, vs. the pizzicato element which changes overall playback between pizzicato and arco."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'note')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4194, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element grace uses Python identifier grace
    __grace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'grace'), 'grace', '__AbsentNamespace0_note_grace', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4203, 5), )

    
    grace = property(__grace.value, __grace.set, None, None)

    
    # Element tie uses Python identifier tie
    __tie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tie'), 'tie', '__AbsentNamespace0_note_tie', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4205, 5), )

    
    tie = property(__tie.value, __tie.set, None, None)

    
    # Element cue uses Python identifier cue
    __cue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'cue'), 'cue', '__AbsentNamespace0_note_cue', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4208, 5), )

    
    cue = property(__cue.value, __cue.set, None, u'The cue element indicates the presence of a cue note.')

    
    # Element instrument uses Python identifier instrument
    __instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'instrument'), 'instrument', '__AbsentNamespace0_note_instrument', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4222, 3), )

    
    instrument = property(__instrument.value, __instrument.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_note_type', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4224, 3), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element dot uses Python identifier dot
    __dot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'dot'), 'dot', '__AbsentNamespace0_note_dot', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4225, 3), )

    
    dot = property(__dot.value, __dot.set, None, u'One dot element is used for each dot of prolongation. The placement element is used to specify whether the dot should appear above or below the staff line. It is ignored for notes that appear on a staff space.')

    
    # Element accidental uses Python identifier accidental
    __accidental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accidental'), 'accidental', '__AbsentNamespace0_note_accidental', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4230, 3), )

    
    accidental = property(__accidental.value, __accidental.set, None, None)

    
    # Element time-modification uses Python identifier time_modification
    __time_modification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'time-modification'), 'time_modification', '__AbsentNamespace0_note_time_modification', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4231, 3), )

    
    time_modification = property(__time_modification.value, __time_modification.set, None, None)

    
    # Element stem uses Python identifier stem
    __stem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stem'), 'stem', '__AbsentNamespace0_note_stem', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4232, 3), )

    
    stem = property(__stem.value, __stem.set, None, None)

    
    # Element notehead uses Python identifier notehead
    __notehead = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notehead'), 'notehead', '__AbsentNamespace0_note_notehead', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4233, 3), )

    
    notehead = property(__notehead.value, __notehead.set, None, None)

    
    # Element notehead-text uses Python identifier notehead_text
    __notehead_text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notehead-text'), 'notehead_text', '__AbsentNamespace0_note_notehead_text', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4234, 3), )

    
    notehead_text = property(__notehead_text.value, __notehead_text.set, None, None)

    
    # Element beam uses Python identifier beam
    __beam = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'beam'), 'beam', '__AbsentNamespace0_note_beam', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4236, 3), )

    
    beam = property(__beam.value, __beam.set, None, None)

    
    # Element notations uses Python identifier notations
    __notations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notations'), 'notations', '__AbsentNamespace0_note_notations', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4237, 3), )

    
    notations = property(__notations.value, __notations.set, None, None)

    
    # Element lyric uses Python identifier lyric
    __lyric = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'lyric'), 'lyric', '__AbsentNamespace0_note_lyric', True, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4238, 3), )

    
    lyric = property(__lyric.value, __lyric.set, None, None)

    
    # Element play uses Python identifier play
    __play = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'play'), 'play', '__AbsentNamespace0_note_play', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4239, 3), )

    
    play = property(__play.value, __play.set, None, None)

    
    # Element footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'footnote'), 'footnote', '__AbsentNamespace0_note_footnote', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3), )

    
    footnote = property(__footnote.value, __footnote.set, None, None)

    
    # Element level uses Python identifier level
    __level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__AbsentNamespace0_note_level', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3), )

    
    level = property(__level.value, __level.set, None, None)

    
    # Element staff uses Python identifier staff
    __staff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'staff'), 'staff', '__AbsentNamespace0_note_staff', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3), )

    
    staff = property(__staff.value, __staff.set, None, u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')

    
    # Element voice uses Python identifier voice
    __voice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'voice'), 'voice', '__AbsentNamespace0_note_voice', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3), )

    
    voice = property(__voice.value, __voice.set, None, None)

    
    # Element duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'duration'), 'duration', '__AbsentNamespace0_note_duration', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3), )

    
    duration = property(__duration.value, __duration.set, None, u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")

    
    # Element chord uses Python identifier chord
    __chord = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'chord'), 'chord', '__AbsentNamespace0_note_chord', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3), )

    
    chord = property(__chord.value, __chord.set, None, u'The chord element indicates that this note is an additional chord tone with the preceding note. The duration of this note can be no longer than the preceding note. In MuseData, a missing duration indicates the same length as the previous note, but the MusicXML format requires a duration for chord notes too.')

    
    # Element pitch uses Python identifier pitch
    __pitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pitch'), 'pitch', '__AbsentNamespace0_note_pitch', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5296, 4), )

    
    pitch = property(__pitch.value, __pitch.set, None, None)

    
    # Element unpitched uses Python identifier unpitched
    __unpitched = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'unpitched'), 'unpitched', '__AbsentNamespace0_note_unpitched', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5297, 4), )

    
    unpitched = property(__unpitched.value, __unpitched.set, None, None)

    
    # Element rest uses Python identifier rest
    __rest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'rest'), 'rest', '__AbsentNamespace0_note_rest', False, pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5298, 4), )

    
    rest = property(__rest.value, __rest.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_note_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_note_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_note_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_note_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_note_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_note_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute print-spacing uses Python identifier print_spacing
    __print_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-spacing'), 'print_spacing', '__AbsentNamespace0_note_print_spacing', yes_no)
    __print_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1751, 2)
    __print_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1751, 2)
    
    print_spacing = property(__print_spacing.value, __print_spacing.set, None, None)

    
    # Attribute print-dot uses Python identifier print_dot
    __print_dot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-dot'), 'print_dot', '__AbsentNamespace0_note_print_dot', yes_no)
    __print_dot._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1779, 2)
    __print_dot._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1779, 2)
    
    print_dot = property(__print_dot.value, __print_dot.set, None, None)

    
    # Attribute print-lyric uses Python identifier print_lyric
    __print_lyric = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-lyric'), 'print_lyric', '__AbsentNamespace0_note_print_lyric', yes_no)
    __print_lyric._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1781, 2)
    __print_lyric._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1781, 2)
    
    print_lyric = property(__print_lyric.value, __print_lyric.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_note_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1869, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1869, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_note_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1870, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1870, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_note_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1871, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1871, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_note_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1872, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1872, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute dynamics uses Python identifier dynamics
    __dynamics = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dynamics'), 'dynamics', '__AbsentNamespace0_note_dynamics', non_negative_decimal)
    __dynamics._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4245, 2)
    __dynamics._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4245, 2)
    
    dynamics = property(__dynamics.value, __dynamics.set, None, None)

    
    # Attribute end-dynamics uses Python identifier end_dynamics
    __end_dynamics = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'end-dynamics'), 'end_dynamics', '__AbsentNamespace0_note_end_dynamics', non_negative_decimal)
    __end_dynamics._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4246, 2)
    __end_dynamics._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4246, 2)
    
    end_dynamics = property(__end_dynamics.value, __end_dynamics.set, None, None)

    
    # Attribute attack uses Python identifier attack
    __attack = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'attack'), 'attack', '__AbsentNamespace0_note_attack', divisions)
    __attack._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4247, 2)
    __attack._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4247, 2)
    
    attack = property(__attack.value, __attack.set, None, None)

    
    # Attribute release uses Python identifier release
    __release = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'release'), 'release', '__AbsentNamespace0_note_release', divisions)
    __release._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4248, 2)
    __release._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4248, 2)
    
    release = property(__release.value, __release.set, None, None)

    
    # Attribute time-only uses Python identifier time_only
    __time_only = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time-only'), 'time_only', '__AbsentNamespace0_note_time_only', time_only)
    __time_only._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4249, 2)
    __time_only._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4249, 2)
    
    time_only = property(__time_only.value, __time_only.set, None, None)

    
    # Attribute pizzicato uses Python identifier pizzicato
    __pizzicato = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pizzicato'), 'pizzicato', '__AbsentNamespace0_note_pizzicato', yes_no)
    __pizzicato._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4250, 2)
    __pizzicato._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4250, 2)
    
    pizzicato = property(__pizzicato.value, __pizzicato.set, None, None)

    _ElementMap.update({
        __grace.name() : __grace,
        __tie.name() : __tie,
        __cue.name() : __cue,
        __instrument.name() : __instrument,
        __type.name() : __type,
        __dot.name() : __dot,
        __accidental.name() : __accidental,
        __time_modification.name() : __time_modification,
        __stem.name() : __stem,
        __notehead.name() : __notehead,
        __notehead_text.name() : __notehead_text,
        __beam.name() : __beam,
        __notations.name() : __notations,
        __lyric.name() : __lyric,
        __play.name() : __play,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __voice.name() : __voice,
        __duration.name() : __duration,
        __chord.name() : __chord,
        __pitch.name() : __pitch,
        __unpitched.name() : __unpitched,
        __rest.name() : __rest
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __print_object.name() : __print_object,
        __print_spacing.name() : __print_spacing,
        __print_dot.name() : __print_dot,
        __print_lyric.name() : __print_lyric,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __dynamics.name() : __dynamics,
        __end_dynamics.name() : __end_dynamics,
        __attack.name() : __attack,
        __release.name() : __release,
        __time_only.name() : __time_only,
        __pizzicato.name() : __pizzicato
    })
Namespace.addCategoryObject('typeBinding', u'note', note)


# Complex type notehead with content type SIMPLE
class notehead (pyxb.binding.basis.complexTypeDefinition):
    """The notehead element indicates shapes other than the open and closed ovals associated with note durations.
	
For the enclosed shapes, the default is to be hollow for half notes and longer, and filled otherwise. The filled attribute can be set to change this if needed.
	
If the parentheses attribute is set to yes, the notehead is parenthesized. It is no by default."""
    _TypeDefinition = notehead_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'notehead')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4264, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is notehead_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_notehead_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_notehead_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_notehead_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_notehead_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_notehead_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute filled uses Python identifier filled
    __filled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'filled'), 'filled', '__AbsentNamespace0_notehead_filled', yes_no)
    __filled._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4274, 4)
    __filled._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4274, 4)
    
    filled = property(__filled.value, __filled.set, None, None)

    
    # Attribute parentheses uses Python identifier parentheses
    __parentheses = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentheses'), 'parentheses', '__AbsentNamespace0_notehead_parentheses', yes_no)
    __parentheses._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4275, 4)
    __parentheses._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4275, 4)
    
    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __filled.name() : __filled,
        __parentheses.name() : __parentheses
    })
Namespace.addCategoryObject('typeBinding', u'notehead', notehead)


# Complex type other-notation with content type SIMPLE
class other_notation (pyxb.binding.basis.complexTypeDefinition):
    """The other-notation type is used to define any notations not yet in the MusicXML format. This allows extended representation, though without application interoperability. It handles notations where more specific extension elements such as other-dynamics and other-technical are not appropriate."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'other-notation')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4362, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_other_notation_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_other_notation_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_other_notation_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_other_notation_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_other_notation_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_other_notation_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_other_notation_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_other_notation_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_other_notation_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_other_notation_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_other_notation_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_other_notation_type', start_stop_single, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4368, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4368, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_other_notation_number', number_level, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4369, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4369, 4)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'other-notation', other_notation)


# Complex type placement-text with content type SIMPLE
class placement_text (pyxb.binding.basis.complexTypeDefinition):
    """The placement-text type represents a text element with print-style and placement attribute groups."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'placement-text')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4388, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_placement_text_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_placement_text_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_placement_text_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_placement_text_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_placement_text_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_placement_text_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_placement_text_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_placement_text_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_placement_text_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_placement_text_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'placement-text', placement_text)


# Complex type slide with content type SIMPLE
class slide (pyxb.binding.basis.complexTypeDefinition):
    """Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. The distinction is similar to that between NIFF's glissando and portamento elements. A slide is continuous between two notes and defaults to a solid line. The optional text for a is printed alongside the line."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'slide')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4410, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute accelerate uses Python identifier accelerate
    __accelerate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accelerate'), 'accelerate', '__AbsentNamespace0_slide_accelerate', yes_no)
    __accelerate._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1557, 2)
    __accelerate._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1557, 2)
    
    accelerate = property(__accelerate.value, __accelerate.set, None, None)

    
    # Attribute beats uses Python identifier beats
    __beats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'beats'), 'beats', '__AbsentNamespace0_slide_beats', trill_beats)
    __beats._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1558, 2)
    __beats._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1558, 2)
    
    beats = property(__beats.value, __beats.set, None, None)

    
    # Attribute first-beat uses Python identifier first_beat
    __first_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'first-beat'), 'first_beat', '__AbsentNamespace0_slide_first_beat', percent)
    __first_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1559, 2)
    __first_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1559, 2)
    
    first_beat = property(__first_beat.value, __first_beat.set, None, None)

    
    # Attribute last-beat uses Python identifier last_beat
    __last_beat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'last-beat'), 'last_beat', '__AbsentNamespace0_slide_last_beat', percent)
    __last_beat._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1560, 2)
    __last_beat._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1560, 2)
    
    last_beat = property(__last_beat.value, __last_beat.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_slide_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute dash-length uses Python identifier dash_length
    __dash_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dash-length'), 'dash_length', '__AbsentNamespace0_slide_dash_length', tenths)
    __dash_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1592, 2)
    
    dash_length = property(__dash_length.value, __dash_length.set, None, None)

    
    # Attribute space-length uses Python identifier space_length
    __space_length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space-length'), 'space_length', '__AbsentNamespace0_slide_space_length', tenths)
    __space_length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    __space_length._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1593, 2)
    
    space_length = property(__space_length.value, __space_length.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_slide_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_slide_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_slide_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_slide_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute line-type uses Python identifier line_type
    __line_type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-type'), 'line_type', '__AbsentNamespace0_slide_line_type', line_type)
    __line_type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    __line_type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1684, 2)
    
    line_type = property(__line_type.value, __line_type.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_slide_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_slide_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_slide_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_slide_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_slide_type', start_stop, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4416, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4416, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_slide_number', number_level, unicode_default=u'1')
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4417, 4)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4417, 4)
    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __first_beat.name() : __first_beat,
        __last_beat.name() : __last_beat,
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
Namespace.addCategoryObject('typeBinding', u'slide', slide)


# Complex type style-text with content type SIMPLE
class style_text (pyxb.binding.basis.complexTypeDefinition):
    """The style-text type represents a text element with a print-style attribute group."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'style-text')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4464, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_style_text_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_style_text_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_style_text_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_style_text_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_style_text_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_style_text_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_style_text_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_style_text_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_style_text_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'style-text', style_text)


# Complex type text-element-data with content type SIMPLE
class text_element_data (pyxb.binding.basis.complexTypeDefinition):
    """The text-element-data type represents a syllable or portion of a syllable for lyric text underlay. A hyphen in the string content should only be used for an actual hyphenated word. Language names for text elements come from ISO 639, with optional country subcodes from ISO 3166."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'text-element-data')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4555, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_text_element_data_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4566, 4)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_text_element_data_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_text_element_data_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_text_element_data_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_text_element_data_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_text_element_data_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_text_element_data_letter_spacing', number_or_normal)
    __letter_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    
    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)

    
    # Attribute underline uses Python identifier underline
    __underline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'underline'), 'underline', '__AbsentNamespace0_text_element_data_underline', number_of_lines)
    __underline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    __underline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    
    underline = property(__underline.value, __underline.set, None, None)

    
    # Attribute overline uses Python identifier overline
    __overline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'overline'), 'overline', '__AbsentNamespace0_text_element_data_overline', number_of_lines)
    __overline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    __overline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    
    overline = property(__overline.value, __overline.set, None, None)

    
    # Attribute line-through uses Python identifier line_through
    __line_through = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-through'), 'line_through', '__AbsentNamespace0_text_element_data_line_through', number_of_lines)
    __line_through._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    __line_through._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    
    line_through = property(__line_through.value, __line_through.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__AbsentNamespace0_text_element_data_dir', text_direction)
    __dir._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    __dir._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotation'), 'rotation', '__AbsentNamespace0_text_element_data_rotation', rotation_degrees)
    __rotation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    __rotation._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    
    rotation = property(__rotation.value, __rotation.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __letter_spacing.name() : __letter_spacing,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation
    })
Namespace.addCategoryObject('typeBinding', u'text-element-data', text_element_data)


# Complex type text-font-color with content type SIMPLE
class text_font_color (pyxb.binding.basis.complexTypeDefinition):
    """The text-font-color type represents text with optional font and color information. It is used for the elision element."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'text-font-color')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4572, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_text_font_color_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4583, 4)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_text_font_color_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_text_font_color_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_text_font_color_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_text_font_color_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_text_font_color_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_text_font_color_letter_spacing', number_or_normal)
    __letter_spacing._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1654, 2)
    
    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)

    
    # Attribute underline uses Python identifier underline
    __underline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'underline'), 'underline', '__AbsentNamespace0_text_font_color_underline', number_of_lines)
    __underline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    __underline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1788, 2)
    
    underline = property(__underline.value, __underline.set, None, None)

    
    # Attribute overline uses Python identifier overline
    __overline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'overline'), 'overline', '__AbsentNamespace0_text_font_color_overline', number_of_lines)
    __overline._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    __overline._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1789, 2)
    
    overline = property(__overline.value, __overline.set, None, None)

    
    # Attribute line-through uses Python identifier line_through
    __line_through = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'line-through'), 'line_through', '__AbsentNamespace0_text_font_color_line_through', number_of_lines)
    __line_through._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    __line_through._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1790, 2)
    
    line_through = property(__line_through.value, __line_through.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__AbsentNamespace0_text_font_color_dir', text_direction)
    __dir._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    __dir._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1797, 2)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotation'), 'rotation', '__AbsentNamespace0_text_font_color_rotation', rotation_degrees)
    __rotation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    __rotation._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1820, 2)
    
    rotation = property(__rotation.value, __rotation.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __letter_spacing.name() : __letter_spacing,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation
    })
Namespace.addCategoryObject('typeBinding', u'text-font-color', text_font_color)


# Complex type tremolo with content type SIMPLE
class tremolo (pyxb.binding.basis.complexTypeDefinition):
    """	The tremolo ornament can be used to indicate either single-note or double-note tremolos. Single-note tremolos use the single type, while double-note tremolos use the start and stop types. The default is "single" for compatibility with Version 1.1. The text of the element indicates the number of tremolo marks and is an integer from 0 to 8. Note that the number of attached beams is not included in this value, but is represented separately using the beam element.

When using double-note tremolos, the duration of each note in the tremolo should correspond to half of the notated type value. A time-modification element should also be added with an actual-notes value of 2 and a normal-notes value of 1. If used within a tuplet, this 2/1 ratio should be multiplied by the existing tuplet ratio.

Using repeater beams for indicating tremolos is deprecated as of MusicXML 3.0."""
    _TypeDefinition = tremolo_marks
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tremolo')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4644, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is tremolo_marks
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_tremolo_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_tremolo_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_tremolo_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_tremolo_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_tremolo_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute placement uses Python identifier placement
    __placement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'placement'), 'placement', '__AbsentNamespace0_tremolo_placement', above_below)
    __placement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    __placement._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1698, 2)
    
    placement = property(__placement.value, __placement.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_tremolo_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_tremolo_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_tremolo_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_tremolo_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_tremolo_type', start_stop_single, unicode_default=u'single')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4654, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4654, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'tremolo', tremolo)


# Complex type tuplet-dot with content type EMPTY
class tuplet_dot (pyxb.binding.basis.complexTypeDefinition):
    """The tuplet-dot type is used to specify dotted normal tuplet types."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tuplet-dot')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4691, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_tuplet_dot_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_tuplet_dot_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_tuplet_dot_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_tuplet_dot_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_tuplet_dot_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
Namespace.addCategoryObject('typeBinding', u'tuplet-dot', tuplet_dot)


# Complex type tuplet-number with content type SIMPLE
class tuplet_number (pyxb.binding.basis.complexTypeDefinition):
    """The tuplet-number type indicates the number of notes for this portion of the tuplet."""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tuplet-number')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4699, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_tuplet_number_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_tuplet_number_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_tuplet_number_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_tuplet_number_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_tuplet_number_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
Namespace.addCategoryObject('typeBinding', u'tuplet-number', tuplet_number)


# Complex type tuplet-type with content type SIMPLE
class tuplet_type (pyxb.binding.basis.complexTypeDefinition):
    """The tuplet-type type indicates the graphical note type of the notes for this portion of the tuplet."""
    _TypeDefinition = note_type_value
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tuplet-type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4722, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is note_type_value
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_tuplet_type_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_tuplet_type_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_tuplet_type_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_tuplet_type_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_tuplet_type_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
Namespace.addCategoryObject('typeBinding', u'tuplet-type', tuplet_type)


# Complex type empty-font with content type EMPTY
class empty_font (pyxb.binding.basis.complexTypeDefinition):
    """The empty-font type represents an empty element with font attributes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'empty-font')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4790, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_empty_font_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_empty_font_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_empty_font_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_empty_font_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
Namespace.addCategoryObject('typeBinding', u'empty-font', empty_font)


# Complex type group-name with content type SIMPLE
class group_name (pyxb.binding.basis.complexTypeDefinition):
    """The group-name type describes the name or abbreviation of a part-group element. Formatting attributes in the group-name type are deprecated in Version 2.0 in favor of the new group-name-display and group-abbreviation-display elements."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'group-name')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4808, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_group_name_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_group_name_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_group_name_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_group_name_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_group_name_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute justify uses Python identifier justify
    __justify = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justify'), 'justify', '__AbsentNamespace0_group_name_justify', left_center_right)
    __justify._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    __justify._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    
    justify = property(__justify.value, __justify.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_group_name_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_group_name_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_group_name_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_group_name_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __justify.name() : __justify,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
Namespace.addCategoryObject('typeBinding', u'group-name', group_name)


# Complex type lyric-font with content type EMPTY
class lyric_font (pyxb.binding.basis.complexTypeDefinition):
    """The lyric-font type specifies the default font for a particular name and number of lyric."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'lyric-font')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4831, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_lyric_font_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_lyric_font_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_lyric_font_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_lyric_font_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute number uses Python identifier number
    __number = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__AbsentNamespace0_lyric_font_number', pyxb.binding.datatypes.NMTOKEN)
    __number._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4835, 2)
    __number._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4835, 2)
    
    number = property(__number.value, __number.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__AbsentNamespace0_lyric_font_name', pyxb.binding.datatypes.token)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4836, 2)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4836, 2)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __number.name() : __number,
        __name.name() : __name
    })
Namespace.addCategoryObject('typeBinding', u'lyric-font', lyric_font)


# Complex type part-name with content type SIMPLE
class part_name (pyxb.binding.basis.complexTypeDefinition):
    """The part-name type describes the name or abbreviation of a score-part element. Formatting attributes for the part-name element are deprecated in Version 2.0 in favor of the new part-name-display and part-abbreviation-display elements."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'part-name')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4904, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'color'), 'color', '__AbsentNamespace0_part_name_color', color)
    __color._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    __color._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1585, 2)
    
    color = property(__color.value, __color.set, None, None)

    
    # Attribute font-family uses Python identifier font_family
    __font_family = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-family'), 'font_family', '__AbsentNamespace0_part_name_font_family', comma_separated_text)
    __font_family._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    __font_family._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1623, 2)
    
    font_family = property(__font_family.value, __font_family.set, None, None)

    
    # Attribute font-style uses Python identifier font_style
    __font_style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-style'), 'font_style', '__AbsentNamespace0_part_name_font_style', font_style)
    __font_style._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    __font_style._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1624, 2)
    
    font_style = property(__font_style.value, __font_style.set, None, None)

    
    # Attribute font-size uses Python identifier font_size
    __font_size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-size'), 'font_size', '__AbsentNamespace0_part_name_font_size', font_size)
    __font_size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    __font_size._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1625, 2)
    
    font_size = property(__font_size.value, __font_size.set, None, None)

    
    # Attribute font-weight uses Python identifier font_weight
    __font_weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'font-weight'), 'font_weight', '__AbsentNamespace0_part_name_font_weight', font_weight)
    __font_weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1626, 2)
    
    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    
    # Attribute justify uses Python identifier justify
    __justify = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justify'), 'justify', '__AbsentNamespace0_part_name_justify', left_center_right)
    __justify._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    __justify._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1647, 2)
    
    justify = property(__justify.value, __justify.set, None, None)

    
    # Attribute default-x uses Python identifier default_x
    __default_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-x'), 'default_x', '__AbsentNamespace0_part_name_default_x', tenths)
    __default_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    __default_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1734, 2)
    
    default_x = property(__default_x.value, __default_x.set, None, None)

    
    # Attribute default-y uses Python identifier default_y
    __default_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'default-y'), 'default_y', '__AbsentNamespace0_part_name_default_y', tenths)
    __default_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    __default_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1735, 2)
    
    default_y = property(__default_y.value, __default_y.set, None, None)

    
    # Attribute relative-x uses Python identifier relative_x
    __relative_x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-x'), 'relative_x', '__AbsentNamespace0_part_name_relative_x', tenths)
    __relative_x._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1736, 2)
    
    relative_x = property(__relative_x.value, __relative_x.set, None, None)

    
    # Attribute relative-y uses Python identifier relative_y
    __relative_y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative-y'), 'relative_y', '__AbsentNamespace0_part_name_relative_y', tenths)
    __relative_y._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1737, 2)
    
    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    
    # Attribute print-object uses Python identifier print_object
    __print_object = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print-object'), 'print_object', '__AbsentNamespace0_part_name_print_object', yes_no)
    __print_object._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    __print_object._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1744, 2)
    
    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __justify.name() : __justify,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object
    })
Namespace.addCategoryObject('typeBinding', u'part-name', part_name)


# Complex type heel-toe with content type EMPTY
class heel_toe (empty_placement):
    """The heel and toe elements are used with organ pedals. The substitution value is "no" if the attribute is not present."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'heel-toe')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4043, 1)
    _ElementMap = empty_placement._ElementMap.copy()
    _AttributeMap = empty_placement._AttributeMap.copy()
    # Base type is empty_placement
    
    # Attribute color inherited from empty-placement
    
    # Attribute font_family inherited from empty-placement
    
    # Attribute font_style inherited from empty-placement
    
    # Attribute font_size inherited from empty-placement
    
    # Attribute font_weight inherited from empty-placement
    
    # Attribute placement inherited from empty-placement
    
    # Attribute default_x inherited from empty-placement
    
    # Attribute default_y inherited from empty-placement
    
    # Attribute relative_x inherited from empty-placement
    
    # Attribute relative_y inherited from empty-placement
    
    # Attribute substitution uses Python identifier substitution
    __substitution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'substitution'), 'substitution', '__AbsentNamespace0_heel_toe_substitution', yes_no)
    __substitution._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4049, 4)
    __substitution._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4049, 4)
    
    substitution = property(__substitution.value, __substitution.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __substitution.name() : __substitution
    })
Namespace.addCategoryObject('typeBinding', u'heel-toe', heel_toe)


# Complex type mordent with content type EMPTY
class mordent (empty_trill_sound):
    """The mordent type is used for both represents the mordent sign with the vertical line and the inverted-mordent sign without the line. The long attribute is "no" by default. The approach and departure attributes are used for compound ornaments, indicating how the beginning and ending of the ornament look relative to the main part of the mordent."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'mordent')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4144, 1)
    _ElementMap = empty_trill_sound._ElementMap.copy()
    _AttributeMap = empty_trill_sound._AttributeMap.copy()
    # Base type is empty_trill_sound
    
    # Attribute color inherited from empty-trill-sound
    
    # Attribute font_family inherited from empty-trill-sound
    
    # Attribute font_style inherited from empty-trill-sound
    
    # Attribute font_size inherited from empty-trill-sound
    
    # Attribute font_weight inherited from empty-trill-sound
    
    # Attribute placement inherited from empty-trill-sound
    
    # Attribute default_x inherited from empty-trill-sound
    
    # Attribute default_y inherited from empty-trill-sound
    
    # Attribute relative_x inherited from empty-trill-sound
    
    # Attribute relative_y inherited from empty-trill-sound
    
    # Attribute start_note inherited from empty-trill-sound
    
    # Attribute trill_step inherited from empty-trill-sound
    
    # Attribute two_note_turn inherited from empty-trill-sound
    
    # Attribute accelerate inherited from empty-trill-sound
    
    # Attribute beats inherited from empty-trill-sound
    
    # Attribute second_beat inherited from empty-trill-sound
    
    # Attribute last_beat inherited from empty-trill-sound
    
    # Attribute long uses Python identifier long
    __long = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'long'), 'long', '__AbsentNamespace0_mordent_long', yes_no)
    __long._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4150, 4)
    __long._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4150, 4)
    
    long = property(__long.value, __long.set, None, None)

    
    # Attribute approach uses Python identifier approach
    __approach = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'approach'), 'approach', '__AbsentNamespace0_mordent_approach', above_below)
    __approach._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4151, 4)
    __approach._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4151, 4)
    
    approach = property(__approach.value, __approach.set, None, None)

    
    # Attribute departure uses Python identifier departure
    __departure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'departure'), 'departure', '__AbsentNamespace0_mordent_departure', above_below)
    __departure._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4152, 4)
    __departure._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4152, 4)
    
    departure = property(__departure.value, __departure.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __long.name() : __long,
        __approach.name() : __approach,
        __departure.name() : __departure
    })
Namespace.addCategoryObject('typeBinding', u'mordent', mordent)


# Complex type strong-accent with content type EMPTY
class strong_accent (empty_placement):
    """The strong-accent type indicates a vertical accent mark. The type attribute indicates if the point of the accent is down or up."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'strong-accent')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4453, 1)
    _ElementMap = empty_placement._ElementMap.copy()
    _AttributeMap = empty_placement._AttributeMap.copy()
    # Base type is empty_placement
    
    # Attribute color inherited from empty-placement
    
    # Attribute font_family inherited from empty-placement
    
    # Attribute font_style inherited from empty-placement
    
    # Attribute font_size inherited from empty-placement
    
    # Attribute font_weight inherited from empty-placement
    
    # Attribute placement inherited from empty-placement
    
    # Attribute default_x inherited from empty-placement
    
    # Attribute default_y inherited from empty-placement
    
    # Attribute relative_x inherited from empty-placement
    
    # Attribute relative_y inherited from empty-placement
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__AbsentNamespace0_strong_accent_type', up_down, unicode_default=u'up')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4459, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4459, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'strong-accent', strong_accent)


score_partwise = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'score-partwise'), CTD_ANON, documentation=u'The score-partwise element is the root element for a partwise MusicXML score. It includes a score-header group followed by a series of parts with measures inside. The document-attributes attribute group includes the version attribute.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5378, 1))
Namespace.addCategoryObject('elementBinding', score_partwise.name().localName(), score_partwise)

score_timewise = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'score-timewise'), CTD_ANON_2, documentation=u'The score-timewise element is the root element for a timewise MusicXML score. It includes a score-header group followed by a series of measures with parts inside. The document-attributes attribute group includes the version attribute.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5403, 1))
Namespace.addCategoryObject('elementBinding', score_timewise.name().localName(), score_timewise)



midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-channel'), midi_16, scope=midi_instrument, documentation=u'The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 16.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2162, 3)))

midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-name'), pyxb.binding.datatypes.string, scope=midi_instrument, documentation=u'The midi-name element corresponds to a ProgramName meta-event within a Standard MIDI File.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2167, 3)))

midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-bank'), midi_16384, scope=midi_instrument, documentation=u'The midi-bank element specified a MIDI 1.0 bank number ranging from 1 to 16,384.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2172, 3)))

midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-program'), midi_128, scope=midi_instrument, documentation=u'The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 128.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2177, 3)))

midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-unpitched'), midi_128, scope=midi_instrument, documentation=u'For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion. Note that MIDI 1.0 note numbers are generally specified from 0 to 127 rather than the 1 to 128 numbering used in this element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2182, 3)))

midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'volume'), percent, scope=midi_instrument, documentation=u'The volume element value is a percentage of the maximum ranging from 0 to 100, with decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 channel volume controller.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2187, 3)))

midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pan'), rotation_degrees, scope=midi_instrument, documentation=u'The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2192, 3)))

midi_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'elevation'), rotation_degrees, scope=midi_instrument, documentation=u'The elevation and pan elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For elevation, 0 is level with the listener, 90 is directly above, and -90 is directly below.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2197, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2162, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2167, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2172, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2177, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2182, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2187, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2192, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2197, 3))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-channel')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2162, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-name')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2167, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-bank')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2172, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-program')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2177, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-unpitched')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2182, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'volume')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2187, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'pan')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2192, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(midi_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'elevation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2197, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
midi_instrument._Automaton = _BuildAutomaton()




play._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ipa'), pyxb.binding.datatypes.string, scope=play, documentation=u'The ipa element represents International Phonetic Alphabet (IPA) sounds for vocal music. String content is limited to IPA 2005 symbols represented in Unicode 6.0.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2236, 4)))

play._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mute'), mute, scope=play, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2241, 4)))

play._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'semi-pitched'), semi_pitched, scope=play, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2242, 4)))

play._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-play'), other_play, scope=play, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2243, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2235, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(play._UseForTag(pyxb.namespace.ExpandedName(None, u'ipa')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2236, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(play._UseForTag(pyxb.namespace.ExpandedName(None, u'mute')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2241, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(play._UseForTag(pyxb.namespace.ExpandedName(None, u'semi-pitched')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2242, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(play._UseForTag(pyxb.namespace.ExpandedName(None, u'other-play')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2243, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
play._Automaton = _BuildAutomaton_()




attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'divisions'), positive_divisions, scope=attributes, documentation=u"Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2293, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'key'), key, scope=attributes, documentation=u'The key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2299, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'time'), time, scope=attributes, documentation=u'Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2305, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staves'), pyxb.binding.datatypes.nonNegativeInteger, scope=attributes, documentation=u'The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2311, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-symbol'), part_symbol, scope=attributes, documentation=u'The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2317, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'instruments'), pyxb.binding.datatypes.nonNegativeInteger, scope=attributes, documentation=u'The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2323, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'clef'), clef, scope=attributes, documentation=u'Clefs are represented by a combination of sign, line, and clef-octave-change elements.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2329, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-details'), staff_details, scope=attributes, documentation=u'The staff-details element is used to indicate different types of staves.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2335, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'transpose'), transpose, scope=attributes, documentation=u'If the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2341, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'directive'), CTD_ANON_6, scope=attributes, documentation=u'Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element has been deprecated in Version 2.0 in favor of the directive attribute for direction elements. Language names come from ISO 639, with optional country subcodes from ISO 3166.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2347, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'measure-style'), measure_style, scope=attributes, documentation=u'A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2361, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=attributes, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

attributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=attributes, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2293, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2299, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2305, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2311, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2317, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2323, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2329, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2335, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2341, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2347, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2361, 3))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'divisions')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2293, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'key')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2299, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'time')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2305, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'staves')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2311, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'part-symbol')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2317, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'instruments')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2323, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'clef')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2329, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-details')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2335, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'transpose')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2341, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'directive')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2347, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(attributes._UseForTag(pyxb.namespace.ExpandedName(None, u'measure-style')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2361, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
attributes._Automaton = _BuildAutomaton_2()




bass._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bass-step'), bass_step, scope=bass, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2738, 3)))

bass._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bass-alter'), bass_alter, scope=bass, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2739, 3)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2739, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bass._UseForTag(pyxb.namespace.ExpandedName(None, u'bass-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2738, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(bass._UseForTag(pyxb.namespace.ExpandedName(None, u'bass-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2739, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bass._Automaton = _BuildAutomaton_3()




direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'rehearsal'), formatted_text, scope=direction_type, documentation=u'The rehearsal type specifies a rehearsal mark. Language is Italian ("it") by default. Enclosure is square by default. Left justification is assumed if not specified.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2877, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'segno'), empty_print_style_align, scope=direction_type, documentation=u'The segno element is the visual indicator of a segno sign. A sound element is needed to guide playback applications reliably.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2882, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'words'), formatted_text, scope=direction_type, documentation=u'The words element specifies a standard text direction. Left justification is assumed if not specified. Language is Italian ("it") by default. Enclosure is none by default.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2887, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'coda'), empty_print_style_align, scope=direction_type, documentation=u'The coda element is the visual indicator of a coda sign. A sound element is needed to guide playback applications reliably.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2892, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'wedge'), wedge, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2897, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'dynamics'), dynamics, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2898, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'dashes'), dashes, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2899, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bracket'), bracket, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2900, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pedal'), pedal, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2901, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metronome'), metronome, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2902, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'octave-shift'), octave_shift, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2903, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'harp-pedals'), harp_pedals, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2904, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'damp'), empty_print_style_align, scope=direction_type, documentation=u'The damp element specifies a harp damping mark.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2905, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'damp-all'), empty_print_style_align, scope=direction_type, documentation=u'The damp-all element specifies a harp damping mark for all strings.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2910, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eyeglasses'), empty_print_style_align, scope=direction_type, documentation=u'The eyeglasses element specifies the eyeglasses symbol, common in commercial music.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2915, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'string-mute'), string_mute, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2920, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'scordatura'), scordatura, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2921, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'image'), image, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2922, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'principal-voice'), principal_voice, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2923, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accordion-registration'), accordion_registration, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2924, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'percussion'), percussion, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2925, 3)))

direction_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-direction'), other_direction, scope=direction_type, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2926, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'rehearsal')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2877, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'segno')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2882, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'words')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2887, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'coda')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2892, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'wedge')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2897, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'dynamics')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2898, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'dashes')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2899, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'bracket')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2900, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'pedal')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2901, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2902, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'octave-shift')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2903, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'harp-pedals')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2904, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'damp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2905, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'damp-all')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2910, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'eyeglasses')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2915, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'string-mute')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2920, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'scordatura')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2921, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'image')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2922, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'principal-voice')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2923, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'accordion-registration')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2924, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'percussion')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2925, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction_type._UseForTag(pyxb.namespace.ExpandedName(None, u'other-direction')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2926, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
direction_type._Automaton = _BuildAutomaton_4()




frame_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'string'), string, scope=frame_note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2985, 3)))

frame_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fret'), fret, scope=frame_note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2986, 3)))

frame_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fingering'), fingering, scope=frame_note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2987, 3)))

frame_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'barre'), barre, scope=frame_note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2988, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2987, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2988, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frame_note._UseForTag(pyxb.namespace.ExpandedName(None, u'string')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2985, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(frame_note._UseForTag(pyxb.namespace.ExpandedName(None, u'fret')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2986, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(frame_note._UseForTag(pyxb.namespace.ExpandedName(None, u'fingering')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2987, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(frame_note._UseForTag(pyxb.namespace.ExpandedName(None, u'barre')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2988, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
frame_note._Automaton = _BuildAutomaton_5()




metronome_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metronome-type'), note_type_value, scope=metronome_note, documentation=u'The metronome-type element works like the type element in defining metric relationships.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3144, 3)))

metronome_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metronome-dot'), empty, scope=metronome_note, documentation=u'The metronome-dot element works like the dot element in defining metric relationships.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3149, 3)))

metronome_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metronome-beam'), metronome_beam, scope=metronome_note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3154, 3)))

metronome_note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metronome-tuplet'), metronome_tuplet, scope=metronome_note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3155, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3149, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3154, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3155, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(metronome_note._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3144, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(metronome_note._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3149, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(metronome_note._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome-beam')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3154, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(metronome_note._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome-tuplet')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3155, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
metronome_note._Automaton = _BuildAutomaton_6()




pedal_tuning._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pedal-step'), step, scope=pedal_tuning, documentation=u'The pedal-step element defines the pitch step for a single harp pedal.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3221, 3)))

pedal_tuning._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pedal-alter'), semitones, scope=pedal_tuning, documentation=u'The pedal-alter element defines the chromatic alteration for a single harp pedal.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3226, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(pedal_tuning._UseForTag(pyxb.namespace.ExpandedName(None, u'pedal-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3221, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(pedal_tuning._UseForTag(pyxb.namespace.ExpandedName(None, u'pedal-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3226, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
pedal_tuning._Automaton = _BuildAutomaton_7()




root._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'root-step'), root_step, scope=root, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3300, 3)))

root._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'root-alter'), root_alter, scope=root, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3301, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3301, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(root._UseForTag(pyxb.namespace.ExpandedName(None, u'root-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3300, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(root._UseForTag(pyxb.namespace.ExpandedName(None, u'root-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3301, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
root._Automaton = _BuildAutomaton_8()




scordatura._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accord'), accord, scope=scordatura, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3335, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(scordatura._UseForTag(pyxb.namespace.ExpandedName(None, u'accord')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3335, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
scordatura._Automaton = _BuildAutomaton_9()




encoding._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'encoding-date'), yyyy_mm_dd, scope=encoding, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3436, 3)))

encoding._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'encoder'), typed_text, scope=encoding, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3437, 3)))

encoding._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'software'), pyxb.binding.datatypes.string, scope=encoding, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3438, 3)))

encoding._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'encoding-description'), pyxb.binding.datatypes.string, scope=encoding, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3439, 3)))

encoding._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'supports'), supports, scope=encoding, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3440, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3435, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(encoding._UseForTag(pyxb.namespace.ExpandedName(None, u'encoding-date')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3436, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(encoding._UseForTag(pyxb.namespace.ExpandedName(None, u'encoder')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3437, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(encoding._UseForTag(pyxb.namespace.ExpandedName(None, u'software')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3438, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(encoding._UseForTag(pyxb.namespace.ExpandedName(None, u'encoding-description')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3439, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(encoding._UseForTag(pyxb.namespace.ExpandedName(None, u'supports')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3440, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
encoding._Automaton = _BuildAutomaton_10()




identification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), typed_text, scope=identification, documentation=u'The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3449, 3)))

identification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'rights'), typed_text, scope=identification, documentation=u'The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights tags with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3454, 3)))

identification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'encoding'), encoding, scope=identification, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3459, 3)))

identification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'source'), pyxb.binding.datatypes.string, scope=identification, documentation=u'The source for the music that is encoded. This is similar to the Dublin Core source element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3460, 3)))

identification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'relation'), typed_text, scope=identification, documentation=u'A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3465, 3)))

identification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'miscellaneous'), miscellaneous, scope=identification, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3470, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3449, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3454, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3459, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3460, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3465, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3470, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(identification._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3449, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(identification._UseForTag(pyxb.namespace.ExpandedName(None, u'rights')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3454, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(identification._UseForTag(pyxb.namespace.ExpandedName(None, u'encoding')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3459, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(identification._UseForTag(pyxb.namespace.ExpandedName(None, u'source')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3460, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(identification._UseForTag(pyxb.namespace.ExpandedName(None, u'relation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3465, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(identification._UseForTag(pyxb.namespace.ExpandedName(None, u'miscellaneous')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3470, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
identification._Automaton = _BuildAutomaton_11()




miscellaneous._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'miscellaneous-field'), miscellaneous_field, scope=miscellaneous, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3479, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3479, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(miscellaneous._UseForTag(pyxb.namespace.ExpandedName(None, u'miscellaneous-field')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3479, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
miscellaneous._Automaton = _BuildAutomaton_12()




appearance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'line-width'), line_width, scope=appearance, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3511, 3)))

appearance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'note-size'), note_size, scope=appearance, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3512, 3)))

appearance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'distance'), distance, scope=appearance, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3513, 3)))

appearance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-appearance'), other_appearance, scope=appearance, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3514, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3511, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3512, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3513, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3514, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(appearance._UseForTag(pyxb.namespace.ExpandedName(None, u'line-width')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3511, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(appearance._UseForTag(pyxb.namespace.ExpandedName(None, u'note-size')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3512, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(appearance._UseForTag(pyxb.namespace.ExpandedName(None, u'distance')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3513, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(appearance._UseForTag(pyxb.namespace.ExpandedName(None, u'other-appearance')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3514, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
appearance._Automaton = _BuildAutomaton_13()




measure_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'measure-distance'), tenths, scope=measure_layout, documentation=u'The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3545, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3545, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(measure_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'measure-distance')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3545, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
measure_layout._Automaton = _BuildAutomaton_14()




page_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'page-height'), tenths, scope=page_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3581, 4)))

page_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'page-width'), tenths, scope=page_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3582, 4)))

page_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'page-margins'), page_margins, scope=page_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3584, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3580, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3584, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(page_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'page-height')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3581, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(page_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'page-width')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3582, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(page_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'page-margins')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3584, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
page_layout._Automaton = _BuildAutomaton_15()




scaling._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'millimeters'), millimeters, scope=scaling, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3601, 3)))

scaling._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tenths'), tenths, scope=scaling, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3602, 3)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(scaling._UseForTag(pyxb.namespace.ExpandedName(None, u'millimeters')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3601, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(scaling._UseForTag(pyxb.namespace.ExpandedName(None, u'tenths')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3602, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
scaling._Automaton = _BuildAutomaton_16()




system_dividers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'left-divider'), empty_print_object_style_align, scope=system_dividers, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3623, 3)))

system_dividers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'right-divider'), empty_print_object_style_align, scope=system_dividers, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3624, 3)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(system_dividers._UseForTag(pyxb.namespace.ExpandedName(None, u'left-divider')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3623, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(system_dividers._UseForTag(pyxb.namespace.ExpandedName(None, u'right-divider')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3624, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
system_dividers._Automaton = _BuildAutomaton_17()




system_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'system-margins'), system_margins, scope=system_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3635, 3)))

system_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'system-distance'), tenths, scope=system_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3636, 3)))

system_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'top-system-distance'), tenths, scope=system_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3637, 3)))

system_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'system-dividers'), system_dividers, scope=system_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3638, 3)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3635, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3636, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3637, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3638, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(system_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'system-margins')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3635, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(system_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'system-distance')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3636, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(system_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'top-system-distance')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3637, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(system_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'system-dividers')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3638, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
system_layout._Automaton = _BuildAutomaton_18()




system_margins._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'left-margin'), tenths, scope=system_margins, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5255, 3)))

system_margins._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'right-margin'), tenths, scope=system_margins, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5256, 3)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(system_margins._UseForTag(pyxb.namespace.ExpandedName(None, u'left-margin')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5255, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(system_margins._UseForTag(pyxb.namespace.ExpandedName(None, u'right-margin')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5256, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
system_margins._Automaton = _BuildAutomaton_19()




articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accent'), empty_placement, scope=articulations, documentation=u'The accent element indicates a regular horizontal accent mark.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3714, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'strong-accent'), strong_accent, scope=articulations, documentation=u'The strong-accent element indicates a vertical accent mark.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3719, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staccato'), empty_placement, scope=articulations, documentation=u'The staccato element is used for a dot articulation, as opposed to a stroke or a wedge.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3724, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tenuto'), empty_placement, scope=articulations, documentation=u'The tenuto element indicates a tenuto line symbol.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3729, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'detached-legato'), empty_placement, scope=articulations, documentation=u'The detached-legato element indicates the combination of a tenuto line and staccato dot symbol.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3734, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staccatissimo'), empty_placement, scope=articulations, documentation=u'The staccatissimo element is used for a wedge articulation, as opposed to a dot or a stroke.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3739, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'spiccato'), empty_placement, scope=articulations, documentation=u'The spiccato element is used for a stroke articulation, as opposed to a dot or a wedge.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3744, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'scoop'), empty_line, scope=articulations, documentation=u'The scoop element is an indeterminate slide attached to a single note. The scoop element appears before the main note and comes from below the main pitch.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3749, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'plop'), empty_line, scope=articulations, documentation=u'The plop element is an indeterminate slide attached to a single note. The plop element appears before the main note and comes from above the main pitch.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3754, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'doit'), empty_line, scope=articulations, documentation=u'The doit element is an indeterminate slide attached to a single note. The doit element appears after the main note and goes above the main pitch.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3759, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'falloff'), empty_line, scope=articulations, documentation=u'The falloff element is an indeterminate slide attached to a single note. The falloff element appears before the main note and goes below the main pitch.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3764, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'breath-mark'), breath_mark, scope=articulations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3769, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'caesura'), empty_placement, scope=articulations, documentation=u'The caesura element indicates a slight pause. It is notated using a "railroad tracks" symbol.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3770, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stress'), empty_placement, scope=articulations, documentation=u'The stress element indicates a stressed note.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3775, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'unstress'), empty_placement, scope=articulations, documentation=u'The unstress element indicates an unstressed note. It is often notated using a u-shaped symbol.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3780, 3)))

articulations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-articulation'), placement_text, scope=articulations, documentation=u'The other-articulation element is used to define any articulations not yet in the MusicXML format. This allows extended representation, though without application interoperability.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3785, 3)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3713, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'accent')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3714, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'strong-accent')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3719, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'staccato')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3724, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'tenuto')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3729, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'detached-legato')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3734, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'staccatissimo')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3739, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'spiccato')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3744, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'scoop')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3749, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'plop')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3754, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'doit')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3759, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'falloff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3764, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'breath-mark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3769, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'caesura')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3770, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'stress')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3775, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'unstress')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3780, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(articulations._UseForTag(pyxb.namespace.ExpandedName(None, u'other-articulation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3785, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
articulations._Automaton = _BuildAutomaton_20()




backup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=backup, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

backup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=backup, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

backup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'duration'), positive_divisions, scope=backup, documentation=u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(backup._UseForTag(pyxb.namespace.ExpandedName(None, u'duration')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(backup._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(backup._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
backup._Automaton = _BuildAutomaton_21()




figure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'prefix'), style_text, scope=figure, documentation=u'Values for the prefix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may contain additional values for symbols specific to particular figured bass styles.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3906, 3)))

figure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'figure-number'), style_text, scope=figure, documentation=u'A figure-number is a number. Overstrikes of the figure number are represented in the suffix element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3911, 3)))

figure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'suffix'), style_text, scope=figure, documentation=u'Values for the suffix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix value slash is used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3916, 3)))

figure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'extend'), extend, scope=figure, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3921, 3)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3906, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3911, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3916, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3921, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(figure._UseForTag(pyxb.namespace.ExpandedName(None, u'prefix')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3906, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(figure._UseForTag(pyxb.namespace.ExpandedName(None, u'figure-number')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3911, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(figure._UseForTag(pyxb.namespace.ExpandedName(None, u'suffix')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3916, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(figure._UseForTag(pyxb.namespace.ExpandedName(None, u'extend')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3921, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
figure._Automaton = _BuildAutomaton_22()




forward._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=forward, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

forward._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=forward, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

forward._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff'), pyxb.binding.datatypes.positiveInteger, scope=forward, documentation=u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3)))

forward._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'voice'), pyxb.binding.datatypes.string, scope=forward, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3)))

forward._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'duration'), positive_divisions, scope=forward, documentation=u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5032, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5033, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5034, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3948, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(forward._UseForTag(pyxb.namespace.ExpandedName(None, u'duration')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(forward._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(forward._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(forward._UseForTag(pyxb.namespace.ExpandedName(None, u'voice')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(forward._UseForTag(pyxb.namespace.ExpandedName(None, u'staff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
forward._Automaton = _BuildAutomaton_23()




notehead_text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'display-text'), formatted_text, scope=notehead_text, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4288, 4)))

notehead_text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accidental-text'), accidental_text, scope=notehead_text, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4289, 4)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(notehead_text._UseForTag(pyxb.namespace.ExpandedName(None, u'display-text')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4288, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(notehead_text._UseForTag(pyxb.namespace.ExpandedName(None, u'accidental-text')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4289, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
notehead_text._Automaton = _BuildAutomaton_24()




ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'trill-mark'), empty_trill_sound, scope=ornaments, documentation=u'The trill-mark element represents the trill-mark symbol.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4300, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'turn'), horizontal_turn, scope=ornaments, documentation=u'The turn element is the normal turn shape which goes up then down.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4305, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'delayed-turn'), horizontal_turn, scope=ornaments, documentation=u'The delayed-turn element indicates a normal turn that is delayed until the end of the current note.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4310, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'inverted-turn'), horizontal_turn, scope=ornaments, documentation=u'The inverted-turn element has the shape which goes down and then up.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4315, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'delayed-inverted-turn'), horizontal_turn, scope=ornaments, documentation=u'The delayed-inverted-turn element indicates an inverted turn that is delayed until the end of the current note.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4320, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'vertical-turn'), empty_trill_sound, scope=ornaments, documentation=u'The vertical-turn element has the turn symbol shape arranged vertically going from upper left to lower right.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4325, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'shake'), empty_trill_sound, scope=ornaments, documentation=u'The shake element has a similar appearance to an inverted-mordent element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4330, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'wavy-line'), wavy_line, scope=ornaments, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4335, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mordent'), mordent, scope=ornaments, documentation=u'The mordent element represents the sign with the vertical line. The long attribute is "no" by default.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4336, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'inverted-mordent'), mordent, scope=ornaments, documentation=u'The inverted-mordent element represents the sign without the vertical line. The long attribute is "no" by default.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4341, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'schleifer'), empty_placement, scope=ornaments, documentation=u'The name for this ornament is based on the German, to avoid confusion with the more common slide element defined earlier.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4346, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tremolo'), tremolo, scope=ornaments, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4351, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-ornament'), placement_text, scope=ornaments, documentation=u'The other-ornament element is used to define any ornaments not yet in the MusicXML format. This allows extended representation, though without application interoperability.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4352, 4)))

ornaments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accidental-mark'), accidental_mark, scope=ornaments, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4358, 3)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4298, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4358, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'trill-mark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4300, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'turn')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4305, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'delayed-turn')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4310, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'inverted-turn')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4315, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'delayed-inverted-turn')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4320, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'vertical-turn')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4325, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'shake')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4330, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'wavy-line')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4335, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'mordent')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4336, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'inverted-mordent')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4341, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'schleifer')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4346, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'tremolo')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4351, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'other-ornament')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4352, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ornaments._UseForTag(pyxb.namespace.ExpandedName(None, u'accidental-mark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4358, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ornaments._Automaton = _BuildAutomaton_25()




pitch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'step'), step, scope=pitch, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4382, 3)))

pitch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'alter'), semitones, scope=pitch, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4383, 3)))

pitch._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'octave'), octave, scope=pitch, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4384, 3)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4383, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(pitch._UseForTag(pyxb.namespace.ExpandedName(None, u'step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4382, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(pitch._UseForTag(pyxb.namespace.ExpandedName(None, u'alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4383, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(pitch._UseForTag(pyxb.namespace.ExpandedName(None, u'octave')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4384, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
pitch._Automaton = _BuildAutomaton_26()




technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'up-bow'), empty_placement, scope=technical, documentation=u'The up-bow element represents the symbol that is used both for up-bowing on bowed instruments, and up-stroke on plucked instruments.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4480, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'down-bow'), empty_placement, scope=technical, documentation=u'The down-bow element represents the symbol that is used both for down-bowing on bowed instruments, and down-stroke on plucked instruments.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4485, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'harmonic'), harmonic, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4490, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'open-string'), empty_placement, scope=technical, documentation=u'The open-string element represents the zero-shaped open string symbol.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4491, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'thumb-position'), empty_placement, scope=technical, documentation=u'The thumb-position element represents the thumb position symbol. This is a circle with a line, where the line does not come within the circle. It is distinct from the snap pizzicato symbol, where the line comes inside the circle.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4496, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fingering'), fingering, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4501, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pluck'), placement_text, scope=technical, documentation=u'The pluck element is used to specify the plucking fingering on a fretted instrument, where the fingering element refers to the fretting fingering. Typical values are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring fingers.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4502, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'double-tongue'), empty_placement, scope=technical, documentation=u'The double-tongue element represents the double tongue symbol (two dots arranged horizontally).', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4507, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'triple-tongue'), empty_placement, scope=technical, documentation=u'The triple-tongue element represents the triple tongue symbol (three dots arranged horizontally).', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4512, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stopped'), empty_placement, scope=technical, documentation=u'The stopped element represents the stopped symbol, which looks like a plus sign.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4517, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'snap-pizzicato'), empty_placement, scope=technical, documentation=u'\tThe snap-pizzicato element represents the snap pizzicato symbol. This is a circle with a line, where the line comes inside the circle. It is distinct from the thumb-position symbol, where the line does not come inside the circle.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4522, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fret'), fret, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4527, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'string'), string, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4528, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hammer-on'), hammer_on_pull_off, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4529, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pull-off'), hammer_on_pull_off, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4530, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bend'), bend, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4531, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tap'), placement_text, scope=technical, documentation=u'The tap element indicates a tap on the fretboard. The element content allows specification of the notation; + and T are common choices. If empty, the display is application-specific.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4532, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'heel'), heel_toe, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4537, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'toe'), heel_toe, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4538, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fingernails'), empty_placement, scope=technical, documentation=u'The fingernails element is used in notation for harp and other plucked string instruments.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4539, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hole'), hole, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4544, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'arrow'), arrow, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4545, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'handbell'), handbell, scope=technical, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4546, 3)))

technical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-technical'), placement_text, scope=technical, documentation=u'The other-technical element is used to define any technical indications not yet in the MusicXML format. This allows extended representation, though without application interoperability.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4547, 3)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4479, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'up-bow')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4480, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'down-bow')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4485, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'harmonic')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4490, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'open-string')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4491, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'thumb-position')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'fingering')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4501, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'pluck')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4502, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'double-tongue')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4507, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'triple-tongue')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4512, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'stopped')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4517, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'snap-pizzicato')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4522, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'fret')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4527, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'string')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4528, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'hammer-on')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4529, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'pull-off')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4530, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'bend')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4531, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'tap')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4532, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'heel')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4537, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'toe')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4538, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'fingernails')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4539, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'hole')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4544, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'arrow')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4545, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'handbell')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4546, 3))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(technical._UseForTag(pyxb.namespace.ExpandedName(None, u'other-technical')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4547, 3))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
technical._Automaton = _BuildAutomaton_27()




time_modification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'actual-notes'), pyxb.binding.datatypes.nonNegativeInteger, scope=time_modification, documentation=u'The actual-notes element describes how many notes are played in the time usually occupied by the number in the normal-notes element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4619, 3)))

time_modification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'normal-notes'), pyxb.binding.datatypes.nonNegativeInteger, scope=time_modification, documentation=u'The normal-notes element describes how many notes are usually played in the time occupied by the number in the actual-notes element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4624, 3)))

time_modification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'normal-type'), note_type_value, scope=time_modification, documentation=u'If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4630, 4)))

time_modification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'normal-dot'), empty, scope=time_modification, documentation=u'The normal-dot element is used to specify dotted normal tuplet types.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4635, 4)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4629, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4635, 4))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(time_modification._UseForTag(pyxb.namespace.ExpandedName(None, u'actual-notes')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4619, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(time_modification._UseForTag(pyxb.namespace.ExpandedName(None, u'normal-notes')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4624, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(time_modification._UseForTag(pyxb.namespace.ExpandedName(None, u'normal-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4630, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(time_modification._UseForTag(pyxb.namespace.ExpandedName(None, u'normal-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4635, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
time_modification._Automaton = _BuildAutomaton_28()




tuplet_portion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuplet-number'), tuplet_number, scope=tuplet_portion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4716, 3)))

tuplet_portion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuplet-type'), tuplet_type, scope=tuplet_portion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4717, 3)))

tuplet_portion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuplet-dot'), tuplet_dot, scope=tuplet_portion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4718, 3)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4716, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4717, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4718, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(tuplet_portion._UseForTag(pyxb.namespace.ExpandedName(None, u'tuplet-number')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4716, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(tuplet_portion._UseForTag(pyxb.namespace.ExpandedName(None, u'tuplet-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4717, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(tuplet_portion._UseForTag(pyxb.namespace.ExpandedName(None, u'tuplet-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4718, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
tuplet_portion._Automaton = _BuildAutomaton_29()




unpitched._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'display-step'), step, scope=unpitched, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5280, 3)))

unpitched._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'display-octave'), octave, scope=unpitched, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5281, 3)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4739, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unpitched._UseForTag(pyxb.namespace.ExpandedName(None, u'display-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5280, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(unpitched._UseForTag(pyxb.namespace.ExpandedName(None, u'display-octave')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5281, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
unpitched._Automaton = _BuildAutomaton_30()




credit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'credit-type'), pyxb.binding.datatypes.string, scope=credit, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4757, 3)))

credit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'link'), link, scope=credit, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4758, 3)))

credit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bookmark'), bookmark, scope=credit, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4759, 3)))

credit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'credit-image'), image, scope=credit, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4761, 4)))

credit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'credit-words'), formatted_text, scope=credit, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4763, 5)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4757, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4758, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4759, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4764, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4765, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4766, 6))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'credit-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4757, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4758, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'bookmark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4759, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'credit-image')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4761, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'credit-words')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4763, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4765, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'bookmark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4766, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(credit._UseForTag(pyxb.namespace.ExpandedName(None, u'credit-words')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4767, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
credit._Automaton = _BuildAutomaton_31()




defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'scaling'), scaling, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4780, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'appearance'), appearance, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4782, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'music-font'), empty_font, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4783, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'word-font'), empty_font, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4784, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'lyric-font'), lyric_font, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4785, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'lyric-language'), lyric_language, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4786, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'page-layout'), page_layout, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'system-layout'), system_layout, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3)))

defaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-layout'), staff_layout, scope=defaults, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4780, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4782, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4783, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4784, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4785, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4786, 3))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'scaling')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4780, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'page-layout')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'system-layout')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-layout')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'appearance')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4782, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'music-font')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4783, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'word-font')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4784, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'lyric-font')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4785, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(defaults._UseForTag(pyxb.namespace.ExpandedName(None, u'lyric-language')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4786, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
defaults._Automaton = _BuildAutomaton_32()




part_list._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-group'), part_group, scope=part_list, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5333, 3)))

part_list._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'score-part'), score_part, scope=part_list, documentation=u'Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5366, 3)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4895, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4897, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(part_list._UseForTag(pyxb.namespace.ExpandedName(None, u'part-group')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5333, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(part_list._UseForTag(pyxb.namespace.ExpandedName(None, u'score-part')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5366, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(part_list._UseForTag(pyxb.namespace.ExpandedName(None, u'part-group')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5333, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(part_list._UseForTag(pyxb.namespace.ExpandedName(None, u'score-part')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5366, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
part_list._Automaton = _BuildAutomaton_33()




score_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'instrument-name'), pyxb.binding.datatypes.string, scope=score_instrument, documentation=u'The instrument-name element is typically used within a software application, rather than appearing on the printed page of a score.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4922, 3)))

score_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'instrument-abbreviation'), pyxb.binding.datatypes.string, scope=score_instrument, documentation=u'The optional instrument-abbreviation element is typically used within a software application, rather than appearing on the printed page of a score.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4927, 3)))

score_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'instrument-sound'), pyxb.binding.datatypes.string, scope=score_instrument, documentation=u'The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4932, 3)))

score_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'solo'), empty, scope=score_instrument, documentation=u'The solo element was added in Version 2.0. It is present if performance is intended by a solo instrument.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4938, 4)))

score_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ensemble'), positive_integer_or_empty, scope=score_instrument, documentation=u'The ensemble element was added in Version 2.0. It is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4943, 4)))

score_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'virtual-instrument'), virtual_instrument, scope=score_instrument, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4949, 3)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4927, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4932, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4937, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4949, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(score_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'instrument-name')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4922, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(score_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'instrument-abbreviation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4927, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(score_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'instrument-sound')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4932, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(score_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'solo')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4938, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(score_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'ensemble')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4943, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(score_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'virtual-instrument')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4949, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
score_instrument._Automaton = _BuildAutomaton_34()




score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'identification'), identification, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4959, 3)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-name'), part_name, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4960, 3)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-name-display'), name_display, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4961, 3)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-abbreviation'), part_name, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4962, 3)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-abbreviation-display'), name_display, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4963, 3)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group'), pyxb.binding.datatypes.string, scope=score_part, documentation=u'The group element allows the use of different versions of the part for different purposes. Typical values include score, parts, sound, and data. Ordering information that is directly encoded in MuseData can be derived from the ordering within a MusicXML score or opus.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4964, 3)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'score-instrument'), score_instrument, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4969, 3)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-device'), midi_device, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4971, 4)))

score_part._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-instrument'), midi_instrument, scope=score_part, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4972, 4)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4959, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4961, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4962, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4963, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4964, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4969, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4970, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4971, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4972, 4))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'identification')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4959, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'part-name')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4960, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'part-name-display')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4961, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'part-abbreviation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4962, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'part-abbreviation-display')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4963, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'group')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4964, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'score-instrument')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4969, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-device')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4971, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(score_part._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-instrument')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4972, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
score_part._Automaton = _BuildAutomaton_35()




virtual_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'virtual-library'), pyxb.binding.datatypes.string, scope=virtual_instrument, documentation=u'The virtual-library element indicates the virtual instrument library name.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4983, 3)))

virtual_instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'virtual-name'), pyxb.binding.datatypes.string, scope=virtual_instrument, documentation=u'The virtual-name element indicates the library-specific name for the virtual instrument.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4988, 3)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4983, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4988, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(virtual_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'virtual-library')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4983, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(virtual_instrument._UseForTag(pyxb.namespace.ExpandedName(None, u'virtual-name')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4988, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
virtual_instrument._Automaton = _BuildAutomaton_36()




work._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'work-number'), pyxb.binding.datatypes.string, scope=work, documentation=u'The work-number element specifies the number of a work, such as its opus number.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5001, 3)))

work._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'work-title'), pyxb.binding.datatypes.string, scope=work, documentation=u'The work-title element specifies the title of a work, not including its opus or other work number.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5006, 3)))

work._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'opus'), opus, scope=work, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5011, 3)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5001, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5006, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5011, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(work._UseForTag(pyxb.namespace.ExpandedName(None, u'work-number')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5001, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(work._UseForTag(pyxb.namespace.ExpandedName(None, u'work-title')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5006, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(work._UseForTag(pyxb.namespace.ExpandedName(None, u'opus')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5011, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
work._Automaton = _BuildAutomaton_37()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'work'), work, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'movement-number'), pyxb.binding.datatypes.string, scope=CTD_ANON, documentation=u'The movement-number element specifies the number of a movement.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'movement-title'), pyxb.binding.datatypes.string, scope=CTD_ANON, documentation=u'The movement-title element specifies the title of a movement, not including its number.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'identification'), identification, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defaults'), defaults, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'credit'), credit, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-list'), part_list, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5357, 3)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part'), CTD_ANON_, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5385, 4)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'work')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'movement-number')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'movement-title')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'identification')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'defaults')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'credit')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'part-list')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5357, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'part')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5385, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_38()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'measure'), CTD_ANON_4, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5388, 7)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, u'measure')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5388, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_39()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'work'), work, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'movement-number'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, documentation=u'The movement-number element specifies the number of a movement.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'movement-title'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, documentation=u'The movement-title element specifies the title of a movement, not including its number.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'identification'), identification, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defaults'), defaults, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'credit'), credit, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-list'), part_list, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5357, 3)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'measure'), CTD_ANON_5, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5410, 4)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'work')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5343, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'movement-number')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5344, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'movement-title')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5349, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'identification')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5354, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'defaults')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5355, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'credit')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5356, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'part-list')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5357, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'measure')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5410, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_40()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'note'), note, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5311, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'backup'), backup, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5312, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'forward'), forward, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5313, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'direction'), direction, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5314, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'attributes'), attributes, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5315, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'harmony'), harmony, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5316, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'figured-bass'), figured_bass, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5317, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'print'), print_, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5318, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sound'), sound, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5319, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'barline'), barline, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5320, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'grouping'), grouping, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5321, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'link'), link, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5322, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bookmark'), bookmark, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5323, 4)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5310, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'note')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5311, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'backup')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5312, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'forward')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5313, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'direction')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5314, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'attributes')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5315, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'harmony')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5316, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'figured-bass')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5317, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'print')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5318, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'sound')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5319, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'barline')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5320, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'grouping')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5321, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5322, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'bookmark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5323, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_41()




name_display._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'display-text'), formatted_text, scope=name_display, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2212, 4)))

name_display._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accidental-text'), accidental_text, scope=name_display, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2213, 4)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2211, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(name_display._UseForTag(pyxb.namespace.ExpandedName(None, u'display-text')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2212, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(name_display._UseForTag(pyxb.namespace.ExpandedName(None, u'accidental-text')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2213, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
name_display._Automaton = _BuildAutomaton_42()




beat_repeat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'slash-type'), note_type_value, scope=beat_repeat, documentation=u'The slash-type element indicates the graphical note type to use for the display of repetition marks.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5142, 3)))

beat_repeat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'slash-dot'), empty, scope=beat_repeat, documentation=u'The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2376, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(beat_repeat._UseForTag(pyxb.namespace.ExpandedName(None, u'slash-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5142, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(beat_repeat._UseForTag(pyxb.namespace.ExpandedName(None, u'slash-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
beat_repeat._Automaton = _BuildAutomaton_43()




interchangeable._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'time-relation'), time_relation, scope=interchangeable, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2433, 3)))

interchangeable._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beats'), pyxb.binding.datatypes.string, scope=interchangeable, documentation=u'The beats element indicates the number of beats, as found in the numerator of a time signature.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5160, 3)))

interchangeable._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beat-type'), pyxb.binding.datatypes.string, scope=interchangeable, documentation=u'The beat-type element indicates the beat unit, as found in the denominator of a time signature.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5165, 3)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2433, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(interchangeable._UseForTag(pyxb.namespace.ExpandedName(None, u'time-relation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2433, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(interchangeable._UseForTag(pyxb.namespace.ExpandedName(None, u'beats')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5160, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(interchangeable._UseForTag(pyxb.namespace.ExpandedName(None, u'beat-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5165, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
interchangeable._Automaton = _BuildAutomaton_44()




slash._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'slash-type'), note_type_value, scope=slash, documentation=u'The slash-type element indicates the graphical note type to use for the display of repetition marks.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5142, 3)))

slash._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'slash-dot'), empty, scope=slash, documentation=u'The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2532, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(slash._UseForTag(pyxb.namespace.ExpandedName(None, u'slash-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5142, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(slash._UseForTag(pyxb.namespace.ExpandedName(None, u'slash-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5147, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
slash._Automaton = _BuildAutomaton_45()




staff_details._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-type'), staff_type, scope=staff_details, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2543, 3)))

staff_details._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-lines'), pyxb.binding.datatypes.nonNegativeInteger, scope=staff_details, documentation=u'The staff-lines element specifies the number of lines for a non 5-line staff.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2544, 3)))

staff_details._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-tuning'), staff_tuning, scope=staff_details, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2549, 3)))

staff_details._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'capo'), pyxb.binding.datatypes.nonNegativeInteger, scope=staff_details, documentation=u'The capo element indicates at which fret a capo should be placed on a fretted instrument. This changes the open tuning of the strings specified by staff-tuning by the specified number of half-steps.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2550, 3)))

staff_details._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-size'), non_negative_decimal, scope=staff_details, documentation=u"The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2555, 3)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2543, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2544, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2549, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2550, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2555, 3))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(staff_details._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2543, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(staff_details._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-lines')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2544, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(staff_details._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-tuning')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2549, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(staff_details._UseForTag(pyxb.namespace.ExpandedName(None, u'capo')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2550, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(staff_details._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-size')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2555, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
staff_details._Automaton = _BuildAutomaton_46()




staff_tuning._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuning-step'), step, scope=staff_tuning, documentation=u'The tuning-step element is represented like the step element, with a different name to reflect is different function.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5085, 3)))

staff_tuning._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuning-alter'), semitones, scope=staff_tuning, documentation=u'The tuning-alter element is represented like the alter element, with a different name to reflect is different function.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3)))

staff_tuning._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuning-octave'), octave, scope=staff_tuning, documentation=u'The tuning-octave element is represented like the octave element, with a different name to reflect is different function.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5095, 3)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(staff_tuning._UseForTag(pyxb.namespace.ExpandedName(None, u'tuning-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5085, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(staff_tuning._UseForTag(pyxb.namespace.ExpandedName(None, u'tuning-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(staff_tuning._UseForTag(pyxb.namespace.ExpandedName(None, u'tuning-octave')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5095, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
staff_tuning._Automaton = _BuildAutomaton_47()




transpose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'diatonic'), pyxb.binding.datatypes.integer, scope=transpose, documentation=u'The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2604, 3)))

transpose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'chromatic'), semitones, scope=transpose, documentation=u'The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2609, 3)))

transpose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'octave-change'), pyxb.binding.datatypes.integer, scope=transpose, documentation=u'The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2614, 3)))

transpose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'double'), empty, scope=transpose, documentation=u'If the double element is present, it indicates that the music is doubled one octave down from what is currently written (as is the case for mixed cello / bass parts in orchestral literature).', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2619, 3)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2604, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2614, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2619, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(transpose._UseForTag(pyxb.namespace.ExpandedName(None, u'diatonic')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2604, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(transpose._UseForTag(pyxb.namespace.ExpandedName(None, u'chromatic')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2609, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(transpose._UseForTag(pyxb.namespace.ExpandedName(None, u'octave-change')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2614, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(transpose._UseForTag(pyxb.namespace.ExpandedName(None, u'double')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2619, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
transpose._Automaton = _BuildAutomaton_48()




barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bar-style'), bar_style_color, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2648, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'wavy-line'), wavy_line, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2650, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'segno'), empty_print_style_align, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2651, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'coda'), empty_print_style_align, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2652, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fermata'), fermata, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2653, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ending'), ending, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2654, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'repeat'), repeat, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2655, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

barline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=barline, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2648, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2650, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2651, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2652, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2653, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2654, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2655, 3))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'bar-style')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2648, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'wavy-line')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2650, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'segno')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2651, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'coda')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2652, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'fermata')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2653, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'ending')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2654, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(barline._UseForTag(pyxb.namespace.ExpandedName(None, u'repeat')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2655, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
barline._Automaton = _BuildAutomaton_49()




accord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuning-step'), step, scope=accord, documentation=u'The tuning-step element is represented like the step element, with a different name to reflect is different function.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5085, 3)))

accord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuning-alter'), semitones, scope=accord, documentation=u'The tuning-alter element is represented like the alter element, with a different name to reflect is different function.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3)))

accord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuning-octave'), octave, scope=accord, documentation=u'The tuning-octave element is represented like the octave element, with a different name to reflect is different function.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5095, 3)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accord._UseForTag(pyxb.namespace.ExpandedName(None, u'tuning-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5085, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accord._UseForTag(pyxb.namespace.ExpandedName(None, u'tuning-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5090, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(accord._UseForTag(pyxb.namespace.ExpandedName(None, u'tuning-octave')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5095, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
accord._Automaton = _BuildAutomaton_50()




degree._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'degree-value'), degree_value, scope=degree, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2811, 3)))

degree._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'degree-alter'), degree_alter, scope=degree, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2812, 3)))

degree._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'degree-type'), degree_type, scope=degree, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2813, 3)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(degree._UseForTag(pyxb.namespace.ExpandedName(None, u'degree-value')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2811, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(degree._UseForTag(pyxb.namespace.ExpandedName(None, u'degree-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2812, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(degree._UseForTag(pyxb.namespace.ExpandedName(None, u'degree-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2813, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
degree._Automaton = _BuildAutomaton_51()




direction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'direction-type'), direction_type, scope=direction, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2862, 3)))

direction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'offset'), offset, scope=direction, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2863, 3)))

direction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sound'), sound, scope=direction, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2866, 3)))

direction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=direction, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

direction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=direction, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

direction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff'), pyxb.binding.datatypes.positiveInteger, scope=direction, documentation=u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3)))

direction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'voice'), pyxb.binding.datatypes.string, scope=direction, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2863, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5043, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5044, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5045, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2865, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2866, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(direction._UseForTag(pyxb.namespace.ExpandedName(None, u'direction-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2862, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(direction._UseForTag(pyxb.namespace.ExpandedName(None, u'offset')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2863, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(direction._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(direction._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(direction._UseForTag(pyxb.namespace.ExpandedName(None, u'voice')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(direction._UseForTag(pyxb.namespace.ExpandedName(None, u'staff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(direction._UseForTag(pyxb.namespace.ExpandedName(None, u'sound')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2866, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
direction._Automaton = _BuildAutomaton_52()




frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'frame-strings'), pyxb.binding.datatypes.positiveInteger, scope=frame, documentation=u'The frame-strings element gives the overall size of the frame in vertical lines (strings).', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2958, 3)))

frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'frame-frets'), pyxb.binding.datatypes.positiveInteger, scope=frame, documentation=u'The frame-frets element gives the overall size of the frame in horizontal spaces (frets).', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2963, 3)))

frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'first-fret'), first_fret, scope=frame, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2968, 3)))

frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'frame-note'), frame_note, scope=frame, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2969, 3)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2968, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frame._UseForTag(pyxb.namespace.ExpandedName(None, u'frame-strings')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2958, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frame._UseForTag(pyxb.namespace.ExpandedName(None, u'frame-frets')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2963, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frame._UseForTag(pyxb.namespace.ExpandedName(None, u'first-fret')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2968, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(frame._UseForTag(pyxb.namespace.ExpandedName(None, u'frame-note')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2969, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
frame._Automaton = _BuildAutomaton_53()




grouping._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'feature'), feature, scope=grouping, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2999, 3)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2999, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(grouping._UseForTag(pyxb.namespace.ExpandedName(None, u'feature')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2999, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
grouping._Automaton = _BuildAutomaton_54()




def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4629, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4635, 4))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(metronome_tuplet._UseForTag(pyxb.namespace.ExpandedName(None, u'actual-notes')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4619, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(metronome_tuplet._UseForTag(pyxb.namespace.ExpandedName(None, u'normal-notes')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4624, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(metronome_tuplet._UseForTag(pyxb.namespace.ExpandedName(None, u'normal-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4630, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(metronome_tuplet._UseForTag(pyxb.namespace.ExpandedName(None, u'normal-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4635, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
metronome_tuplet._Automaton = _BuildAutomaton_55()




print_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'measure-layout'), measure_layout, scope=print_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3287, 3)))

print_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'measure-numbering'), measure_numbering, scope=print_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3288, 3)))

print_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-name-display'), name_display, scope=print_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3289, 3)))

print_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part-abbreviation-display'), name_display, scope=print_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3290, 3)))

print_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'page-layout'), page_layout, scope=print_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3)))

print_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'system-layout'), system_layout, scope=print_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3)))

print_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-layout'), staff_layout, scope=print_, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3287, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3288, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3289, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3290, 3))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(print_._UseForTag(pyxb.namespace.ExpandedName(None, u'page-layout')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5244, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(print_._UseForTag(pyxb.namespace.ExpandedName(None, u'system-layout')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5245, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(print_._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-layout')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5246, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(print_._UseForTag(pyxb.namespace.ExpandedName(None, u'measure-layout')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3287, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(print_._UseForTag(pyxb.namespace.ExpandedName(None, u'measure-numbering')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3288, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(print_._UseForTag(pyxb.namespace.ExpandedName(None, u'part-name-display')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3289, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(print_._UseForTag(pyxb.namespace.ExpandedName(None, u'part-abbreviation-display')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3290, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
print_._Automaton = _BuildAutomaton_56()




stick._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stick-type'), stick_type, scope=stick, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3401, 3)))

stick._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stick-material'), stick_material, scope=stick, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3402, 3)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(stick._UseForTag(pyxb.namespace.ExpandedName(None, u'stick-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3401, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(stick._UseForTag(pyxb.namespace.ExpandedName(None, u'stick-material')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3402, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
stick._Automaton = _BuildAutomaton_57()




page_margins._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'top-margin'), tenths, scope=page_margins, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5234, 3)))

page_margins._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bottom-margin'), tenths, scope=page_margins, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5235, 3)))

page_margins._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'left-margin'), tenths, scope=page_margins, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5255, 3)))

page_margins._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'right-margin'), tenths, scope=page_margins, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5256, 3)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(page_margins._UseForTag(pyxb.namespace.ExpandedName(None, u'left-margin')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5255, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(page_margins._UseForTag(pyxb.namespace.ExpandedName(None, u'right-margin')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5256, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(page_margins._UseForTag(pyxb.namespace.ExpandedName(None, u'top-margin')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5234, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(page_margins._UseForTag(pyxb.namespace.ExpandedName(None, u'bottom-margin')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5235, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
page_margins._Automaton = _BuildAutomaton_58()




staff_layout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff-distance'), tenths, scope=staff_layout, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3611, 3)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3611, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(staff_layout._UseForTag(pyxb.namespace.ExpandedName(None, u'staff-distance')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3611, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
staff_layout._Automaton = _BuildAutomaton_59()




lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'syllabic'), syllabic, scope=lyric, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4100, 5)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'text'), text_element_data, scope=lyric, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4101, 5)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'elision'), text_font_color, scope=lyric, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4104, 7)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'extend'), extend, scope=lyric, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4109, 5)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'laughing'), empty, scope=lyric, documentation=u'The laughing element is taken from Humdrum.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4112, 4)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'humming'), empty, scope=lyric, documentation=u'The humming element is taken from Humdrum.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4117, 4)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'end-line'), empty, scope=lyric, documentation=u'The end-line element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4123, 3)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'end-paragraph'), empty, scope=lyric, documentation=u'The end-paragraph element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4128, 3)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=lyric, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

lyric._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=lyric, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4100, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4102, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4103, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4105, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4109, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4123, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4128, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'syllabic')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4100, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'text')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4101, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'elision')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4104, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'syllabic')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4105, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'text')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4107, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'extend')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4109, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'extend')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4111, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'laughing')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4112, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'humming')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4117, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'end-line')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4123, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'end-paragraph')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4128, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(lyric._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
lyric._Automaton = _BuildAutomaton_60()




notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tied'), tied, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4175, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'slur'), slur, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4176, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuplet'), tuplet, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4177, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'glissando'), glissando, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4178, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'slide'), slide, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4179, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ornaments'), ornaments, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4180, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'technical'), technical, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4181, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'articulations'), articulations, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4182, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'dynamics'), dynamics, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4183, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fermata'), fermata, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4184, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'arpeggiate'), arpeggiate, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4185, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'non-arpeggiate'), non_arpeggiate, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4186, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accidental-mark'), accidental_mark, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4187, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-notation'), other_notation, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4188, 4)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

notations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=notations, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4174, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'tied')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4175, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'slur')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4176, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'tuplet')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4177, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'glissando')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4178, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'slide')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4179, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'ornaments')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4180, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'technical')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4181, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'articulations')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4182, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'dynamics')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4183, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'fermata')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4184, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'arpeggiate')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4185, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'non-arpeggiate')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4186, 4))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'accidental-mark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4187, 4))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notations._UseForTag(pyxb.namespace.ExpandedName(None, u'other-notation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4188, 4))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
notations._Automaton = _BuildAutomaton_61()




rest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'display-step'), step, scope=rest, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5280, 3)))

rest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'display-octave'), octave, scope=rest, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5281, 3)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4405, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(rest._UseForTag(pyxb.namespace.ExpandedName(None, u'display-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5280, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(rest._UseForTag(pyxb.namespace.ExpandedName(None, u'display-octave')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5281, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
rest._Automaton = _BuildAutomaton_62()




tuplet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuplet-actual'), tuplet_portion, scope=tuplet, documentation=u'The tuplet-actual element provide optional full control over how the actual part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4670, 3)))

tuplet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tuplet-normal'), tuplet_portion, scope=tuplet, documentation=u'The tuplet-normal element provide optional full control over how the normal part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4675, 3)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4670, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4675, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(tuplet._UseForTag(pyxb.namespace.ExpandedName(None, u'tuplet-actual')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4670, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(tuplet._UseForTag(pyxb.namespace.ExpandedName(None, u'tuplet-normal')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4675, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
tuplet._Automaton = _BuildAutomaton_63()




part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group-name'), group_name, scope=part_group, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4865, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group-name-display'), name_display, scope=part_group, documentation=u'Formatting specified in the group-name-display element overrides formatting specified in the group-name element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4866, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group-abbreviation'), group_name, scope=part_group, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4871, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group-abbreviation-display'), name_display, scope=part_group, documentation=u'Formatting specified in the group-abbreviation-display element overrides formatting specified in the group-abbreviation element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4872, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group-symbol'), group_symbol, scope=part_group, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4877, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group-barline'), group_barline, scope=part_group, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4878, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'group-time'), empty, scope=part_group, documentation=u'The group-time element indicates that the displayed time signatures should stretch across all parts and staves in the group.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4879, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=part_group, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

part_group._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=part_group, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4865, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4866, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4871, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4872, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4877, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4878, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4879, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'group-name')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4865, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'group-name-display')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4866, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'group-abbreviation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4871, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'group-abbreviation-display')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4872, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'group-symbol')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4877, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'group-barline')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4878, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'group-time')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4879, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(part_group._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
part_group._Automaton = _BuildAutomaton_64()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'note'), note, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5311, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'backup'), backup, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5312, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'forward'), forward, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5313, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'direction'), direction, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5314, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'attributes'), attributes, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5315, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'harmony'), harmony, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5316, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'figured-bass'), figured_bass, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5317, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'print'), print_, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5318, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sound'), sound, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5319, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'barline'), barline, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5320, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'grouping'), grouping, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5321, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'link'), link, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5322, 4)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bookmark'), bookmark, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5323, 4)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5310, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'note')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5311, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'backup')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5312, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'forward')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5313, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'direction')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5314, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'attributes')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5315, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'harmony')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5316, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'figured-bass')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5317, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'print')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5318, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'sound')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5319, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'barline')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5320, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'grouping')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5321, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5322, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'bookmark')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5323, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_65()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'part'), CTD_ANON_3, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5413, 7)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'part')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5413, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_66()




dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'p'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1998, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1999, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ppp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2000, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pppp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2001, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ppppp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2002, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pppppp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2003, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'f'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2004, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ff'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2005, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fff'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2006, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ffff'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2007, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fffff'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2008, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ffffff'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2009, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2010, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mf'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2011, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sf'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2012, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sfp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2013, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sfpp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2014, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fp'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2015, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'rf'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2016, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'rfz'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2017, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sfz'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2018, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sffz'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2019, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fz'), empty, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2020, 3)))

dynamics._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-dynamics'), pyxb.binding.datatypes.string, scope=dynamics, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2021, 3)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1997, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'p')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1998, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'pp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 1999, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'ppp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2000, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'pppp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2001, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'ppppp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2002, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'pppppp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2003, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'f')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2004, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'ff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2005, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'fff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2006, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'ffff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2007, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'fffff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2008, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'ffffff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2009, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'mp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2010, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'mf')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2011, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'sf')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2012, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'sfp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2013, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'sfpp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2014, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'fp')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2015, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'rf')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2016, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'rfz')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2017, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'sfz')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2018, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'sffz')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2019, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'fz')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2020, 3))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dynamics._UseForTag(pyxb.namespace.ExpandedName(None, u'other-dynamics')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2021, 3))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
dynamics._Automaton = _BuildAutomaton_67()




clef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sign'), clef_sign, scope=clef, documentation=u'The sign element represents the clef symbol.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2404, 3)))

clef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'line'), staff_line, scope=clef, documentation=u'Line numbers are counted from the bottom of the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), 3 for the C sign (alto clef) and 5 for TAB (on a 6-line staff).', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2409, 3)))

clef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'clef-octave-change'), pyxb.binding.datatypes.integer, scope=clef, documentation=u'The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2414, 3)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2409, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2414, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(clef._UseForTag(pyxb.namespace.ExpandedName(None, u'sign')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2404, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(clef._UseForTag(pyxb.namespace.ExpandedName(None, u'line')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2409, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(clef._UseForTag(pyxb.namespace.ExpandedName(None, u'clef-octave-change')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2414, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
clef._Automaton = _BuildAutomaton_68()




key._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'key-octave'), key_octave, scope=key, documentation=u'The optional list of key-octave elements is used to specify in which octave each element of the key signature appears.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2449, 3)))

key._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'key-step'), step, scope=key, documentation=u'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5119, 3)))

key._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'key-alter'), semitones, scope=key, documentation=u'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5124, 3)))

key._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'key-accidental'), accidental_value, scope=key, documentation=u'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5129, 3)))

key._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'cancel'), cancel, scope=key, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5178, 3)))

key._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fifths'), fifths, scope=key, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5179, 3)))

key._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mode'), mode, scope=key, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5180, 3)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5178, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5180, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2447, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5129, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2449, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(key._UseForTag(pyxb.namespace.ExpandedName(None, u'cancel')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5178, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(key._UseForTag(pyxb.namespace.ExpandedName(None, u'fifths')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5179, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(key._UseForTag(pyxb.namespace.ExpandedName(None, u'mode')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5180, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(key._UseForTag(pyxb.namespace.ExpandedName(None, u'key-step')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5119, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(key._UseForTag(pyxb.namespace.ExpandedName(None, u'key-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5124, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(key._UseForTag(pyxb.namespace.ExpandedName(None, u'key-accidental')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5129, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(key._UseForTag(pyxb.namespace.ExpandedName(None, u'key-octave')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2449, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
key._Automaton = _BuildAutomaton_69()




measure_style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'multiple-rest'), multiple_rest, scope=measure_style, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2493, 3)))

measure_style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'measure-repeat'), measure_repeat, scope=measure_style, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2494, 3)))

measure_style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beat-repeat'), beat_repeat, scope=measure_style, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2495, 3)))

measure_style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'slash'), slash, scope=measure_style, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2496, 3)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(measure_style._UseForTag(pyxb.namespace.ExpandedName(None, u'multiple-rest')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2493, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(measure_style._UseForTag(pyxb.namespace.ExpandedName(None, u'measure-repeat')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2494, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(measure_style._UseForTag(pyxb.namespace.ExpandedName(None, u'beat-repeat')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2495, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(measure_style._UseForTag(pyxb.namespace.ExpandedName(None, u'slash')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2496, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
measure_style._Automaton = _BuildAutomaton_70()




time._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'interchangeable'), interchangeable, scope=time, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2584, 4)))

time._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'senza-misura'), pyxb.binding.datatypes.string, scope=time, documentation=u"A senza-misura element explicitly indicates that no time signature is present. The optional element content indicates the symbol to be used, if any, such as an X. The time element's symbol attribute is not used when a senza-misura element is present.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2586, 3)))

time._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beats'), pyxb.binding.datatypes.string, scope=time, documentation=u'The beats element indicates the number of beats, as found in the numerator of a time signature.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5160, 3)))

time._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beat-type'), pyxb.binding.datatypes.string, scope=time, documentation=u'The beat-type element indicates the beat unit, as found in the denominator of a time signature.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5165, 3)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2584, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(time._UseForTag(pyxb.namespace.ExpandedName(None, u'beats')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5160, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(time._UseForTag(pyxb.namespace.ExpandedName(None, u'beat-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5165, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(time._UseForTag(pyxb.namespace.ExpandedName(None, u'interchangeable')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2584, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(time._UseForTag(pyxb.namespace.ExpandedName(None, u'senza-misura')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2586, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
time._Automaton = _BuildAutomaton_71()




accordion_registration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accordion-high'), empty, scope=accordion_registration, documentation=u"The accordion-high element indicates the presence of a dot in the high (4') section of the registration symbol.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2706, 3)))

accordion_registration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accordion-middle'), accordion_middle, scope=accordion_registration, documentation=u"The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2711, 3)))

accordion_registration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accordion-low'), empty, scope=accordion_registration, documentation=u"The accordion-low element indicates the presence of a dot in the low (16') section of the registration symbol.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2716, 3)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2706, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2711, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2716, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(accordion_registration._UseForTag(pyxb.namespace.ExpandedName(None, u'accordion-high')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2706, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(accordion_registration._UseForTag(pyxb.namespace.ExpandedName(None, u'accordion-middle')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2711, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(accordion_registration._UseForTag(pyxb.namespace.ExpandedName(None, u'accordion-low')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 2716, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
accordion_registration._Automaton = _BuildAutomaton_72()




harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'frame'), frame, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3016, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'offset'), offset, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3017, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff'), pyxb.binding.datatypes.positiveInteger, scope=harmony, documentation=u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'root'), root, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5212, 4)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'function'), style_text, scope=harmony, documentation=u'The function element is used to represent classical functional harmony with an indication like I, II, III rather than C, D, E. It is relative to the key that is specified in the MusicXML encoding.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5213, 4)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'kind'), kind, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5219, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'inversion'), inversion, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5220, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bass'), bass, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5221, 3)))

harmony._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'degree'), degree, scope=harmony, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5222, 3)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5220, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5221, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5222, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3016, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3017, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3019, 3))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'root')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5212, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'function')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5213, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'kind')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5219, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'inversion')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5220, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'bass')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5221, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'degree')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5222, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'frame')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3016, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'offset')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3017, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(harmony._UseForTag(pyxb.namespace.ExpandedName(None, u'staff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
harmony._Automaton = _BuildAutomaton_73()




harp_pedals._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pedal-tuning'), pedal_tuning, scope=harp_pedals, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3033, 3)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(harp_pedals._UseForTag(pyxb.namespace.ExpandedName(None, u'pedal-tuning')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3033, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
harp_pedals._Automaton = _BuildAutomaton_74()




metronome._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'per-minute'), per_minute, scope=metronome, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3107, 5)))

metronome._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metronome-note'), metronome_note, scope=metronome, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3112, 4)))

metronome._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metronome-relation'), pyxb.binding.datatypes.string, scope=metronome, documentation=u'The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3114, 5)))

metronome._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beat-unit'), note_type_value, scope=metronome, documentation=u'The beat-unit element indicates the graphical note type to use in a metronome mark.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5191, 3)))

metronome._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beat-unit-dot'), empty, scope=metronome, documentation=u'The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5196, 3)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5196, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5196, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3113, 4))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'beat-unit')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5191, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'beat-unit-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5196, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'per-minute')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3107, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'beat-unit')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5191, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'beat-unit-dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5196, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome-note')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3112, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome-relation')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3114, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(metronome._UseForTag(pyxb.namespace.ExpandedName(None, u'metronome-note')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3119, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
metronome._Automaton = _BuildAutomaton_75()




percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'glass'), glass, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3250, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metal'), metal, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3251, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'wood'), wood, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3252, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pitched'), pitched, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3253, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'membrane'), membrane, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3254, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'effect'), effect, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3255, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'timpani'), empty, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3256, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beater'), beater, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3257, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stick'), stick, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3258, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stick-location'), stick_location, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3259, 3)))

percussion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'other-percussion'), pyxb.binding.datatypes.string, scope=percussion, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3260, 3)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'glass')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3250, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'metal')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3251, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'wood')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3252, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'pitched')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3253, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'membrane')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3254, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'effect')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3255, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'timpani')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3256, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'beater')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3257, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'stick')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3258, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'stick-location')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3259, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(percussion._UseForTag(pyxb.namespace.ExpandedName(None, u'other-percussion')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3260, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
percussion._Automaton = _BuildAutomaton_76()




sound._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-device'), midi_device, scope=sound, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3371, 4)))

sound._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'midi-instrument'), midi_instrument, scope=sound, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3372, 4)))

sound._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'play'), play, scope=sound, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3373, 4)))

sound._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'offset'), offset, scope=sound, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3375, 3)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3370, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3371, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3372, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3373, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3375, 3))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(sound._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-device')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3371, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(sound._UseForTag(pyxb.namespace.ExpandedName(None, u'midi-instrument')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3372, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(sound._UseForTag(pyxb.namespace.ExpandedName(None, u'play')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3373, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(sound._UseForTag(pyxb.namespace.ExpandedName(None, u'offset')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3375, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
sound._Automaton = _BuildAutomaton_77()




arrow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'arrow-direction'), arrow_direction, scope=arrow, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3799, 4)))

arrow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'arrow-style'), arrow_style, scope=arrow, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3800, 4)))

arrow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'circular-arrow'), circular_arrow, scope=arrow, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3802, 3)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3800, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(arrow._UseForTag(pyxb.namespace.ExpandedName(None, u'arrow-direction')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3799, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(arrow._UseForTag(pyxb.namespace.ExpandedName(None, u'arrow-style')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3800, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(arrow._UseForTag(pyxb.namespace.ExpandedName(None, u'circular-arrow')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3802, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
arrow._Automaton = _BuildAutomaton_78()




bend._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'bend-alter'), semitones, scope=bend, documentation=u'The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3843, 3)))

bend._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pre-bend'), empty, scope=bend, documentation=u'The pre-bend element indicates that this is a pre-bend rather than a normal bend or a release.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3849, 4)))

bend._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'release'), empty, scope=bend, documentation=u'The release element indicates that this is a release rather than a normal bend or pre-bend.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3854, 4)))

bend._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'with-bar'), placement_text, scope=bend, documentation=u'The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3860, 3)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3848, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3860, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bend._UseForTag(pyxb.namespace.ExpandedName(None, u'bend-alter')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3843, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(bend._UseForTag(pyxb.namespace.ExpandedName(None, u'pre-bend')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3849, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(bend._UseForTag(pyxb.namespace.ExpandedName(None, u'release')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3854, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(bend._UseForTag(pyxb.namespace.ExpandedName(None, u'with-bar')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3860, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bend._Automaton = _BuildAutomaton_79()




figured_bass._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'figure'), figure, scope=figured_bass, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3932, 3)))

figured_bass._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=figured_bass, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

figured_bass._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=figured_bass, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

figured_bass._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'duration'), positive_divisions, scope=figured_bass, documentation=u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3933, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5022, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5023, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(figured_bass._UseForTag(pyxb.namespace.ExpandedName(None, u'figure')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 3932, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(figured_bass._UseForTag(pyxb.namespace.ExpandedName(None, u'duration')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(figured_bass._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(figured_bass._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
figured_bass._Automaton = _BuildAutomaton_80()




harmonic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'natural'), empty, scope=harmonic, documentation=u'The natural element indicates that this is a natural harmonic. These are usually notated at base pitch rather than sounding pitch.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4009, 4)))

harmonic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'artificial'), empty, scope=harmonic, documentation=u'The artificial element indicates that this is an artificial harmonic.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4014, 4)))

harmonic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'base-pitch'), empty, scope=harmonic, documentation=u'The base pitch is the pitch at which the string is played before touching to create the harmonic.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4021, 4)))

harmonic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'touching-pitch'), empty, scope=harmonic, documentation=u'The touching-pitch is the pitch at which the string is touched lightly to produce the harmonic.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4026, 4)))

harmonic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sounding-pitch'), empty, scope=harmonic, documentation=u'The sounding-pitch is the pitch which is heard when playing the harmonic.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4031, 4)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4008, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4020, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(harmonic._UseForTag(pyxb.namespace.ExpandedName(None, u'natural')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4009, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(harmonic._UseForTag(pyxb.namespace.ExpandedName(None, u'artificial')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4014, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(harmonic._UseForTag(pyxb.namespace.ExpandedName(None, u'base-pitch')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4021, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(harmonic._UseForTag(pyxb.namespace.ExpandedName(None, u'touching-pitch')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4026, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(harmonic._UseForTag(pyxb.namespace.ExpandedName(None, u'sounding-pitch')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4031, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
harmonic._Automaton = _BuildAutomaton_81()




hole._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hole-type'), pyxb.binding.datatypes.string, scope=hole, documentation=u'The content of the optional hole-type element indicates what the hole symbol represents in terms of instrument fingering or other techniques.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4059, 3)))

hole._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hole-closed'), hole_closed, scope=hole, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4064, 3)))

hole._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hole-shape'), pyxb.binding.datatypes.string, scope=hole, documentation=u'The optional hole-shape element indicates the shape of the hole symbol; the default is a circle.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4065, 3)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4059, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4065, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(hole._UseForTag(pyxb.namespace.ExpandedName(None, u'hole-type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4059, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(hole._UseForTag(pyxb.namespace.ExpandedName(None, u'hole-closed')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4064, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(hole._UseForTag(pyxb.namespace.ExpandedName(None, u'hole-shape')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4065, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
hole._Automaton = _BuildAutomaton_82()




note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'grace'), grace, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4203, 5)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tie'), tie, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4205, 5)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'cue'), empty, scope=note, documentation=u'The cue element indicates the presence of a cue note.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4208, 5)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'instrument'), instrument, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4222, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'type'), note_type, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4224, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'dot'), empty_placement, scope=note, documentation=u'One dot element is used for each dot of prolongation. The placement element is used to specify whether the dot should appear above or below the staff line. It is ignored for notes that appear on a staff space.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4225, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accidental'), accidental, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4230, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'time-modification'), time_modification, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4231, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stem'), stem, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4232, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notehead'), notehead, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4233, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notehead-text'), notehead_text, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4234, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'beam'), beam, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4236, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notations'), notations, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4237, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'lyric'), lyric, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4238, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'play'), play, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4239, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'footnote'), formatted_text, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'level'), level, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'staff'), pyxb.binding.datatypes.positiveInteger, scope=note, documentation=u'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'voice'), pyxb.binding.datatypes.string, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'duration'), positive_divisions, scope=note, documentation=u"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'chord'), empty, scope=note, documentation=u'The chord element indicates that this note is an additional chord tone with the preceding note. The duration of this note can be no longer than the preceding note. In MuseData, a missing duration indicates the same length as the previous note, but the MusicXML format requires a duration for chord notes too.', location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pitch'), pitch, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5296, 4)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'unpitched'), unpitched, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5297, 4)))

note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'rest'), rest, scope=note, location=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5298, 4)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4205, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4219, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4222, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5032, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5033, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5034, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4224, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4225, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4230, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4231, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4232, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4233, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4234, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4235, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=8L, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4236, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4237, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4238, 3))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4239, 3))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'grace')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4203, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'chord')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'pitch')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5296, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'unpitched')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5297, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'rest')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5298, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'tie')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4205, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'cue')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4208, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'chord')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'pitch')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5296, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'unpitched')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5297, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'rest')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5298, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'duration')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'chord')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5290, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'pitch')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5296, 4))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'unpitched')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5297, 4))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'rest')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5298, 4))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'duration')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5267, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'tie')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4219, 5))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'instrument')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4222, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'footnote')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5054, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'level')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5063, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'voice')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5108, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'type')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4224, 3))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'dot')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4225, 3))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'accidental')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4230, 3))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'time-modification')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4231, 3))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'stem')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4232, 3))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'notehead')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4233, 3))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'notehead-text')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4234, 3))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'staff')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 5072, 3))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'beam')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4236, 3))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'notations')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4237, 3))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'lyric')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4238, 3))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(note._UseForTag(pyxb.namespace.ExpandedName(None, u'play')), pyxb.utils.utility.Location('/Users/fredrik/Downloads/xml_test/musicxml.xsd', 4239, 3))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_33._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
note._Automaton = _BuildAutomaton_83()

